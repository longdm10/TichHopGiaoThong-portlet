/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.nhapcanh.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.nhapcanh.model.DocumentGeneral;
import vn.gt.dao.nhapcanh.model.DocumentGeneralModel;
import vn.gt.dao.nhapcanh.model.DocumentGeneralSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the DocumentGeneral service. Represents a row in the &quot;document_general&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.nhapcanh.model.DocumentGeneralModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DocumentGeneralImpl}.
 * </p>
 *
 * @author win_64
 * @see DocumentGeneralImpl
 * @see vn.gt.dao.nhapcanh.model.DocumentGeneral
 * @see vn.gt.dao.nhapcanh.model.DocumentGeneralModel
 * @generated
 */
@JSON(strict = true)
public class DocumentGeneralModelImpl extends BaseModelImpl<DocumentGeneral>
	implements DocumentGeneralModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a document general model instance should use the {@link vn.gt.dao.nhapcanh.model.DocumentGeneral} interface instead.
	 */
	public static final String TABLE_NAME = "document_general";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "documentno", Types.VARCHAR },
			{ "documentfunction", Types.VARCHAR },
			{ "isarrival", Types.INTEGER },
			{ "isdeparture", Types.INTEGER },
			{ "shipcode", Types.VARCHAR },
			{ "arrivalordepartureportcode", Types.VARCHAR },
			{ "timearrivalordeparture", Types.TIMESTAMP },
			{ "imonumber", Types.VARCHAR },
			{ "callsign", Types.VARCHAR },
			{ "voyagenumber", Types.INTEGER },
			{ "shipnationcode", Types.VARCHAR },
			{ "nameofmaster", Types.VARCHAR },
			{ "lastport", Types.VARCHAR },
			{ "contactdetailshipagent", Types.VARCHAR },
			{ "grosstonnage", Types.DOUBLE },
			{ "nettonnage", Types.DOUBLE },
			{ "positionshipinport", Types.INTEGER },
			{ "briefparticularsvoyage", Types.VARCHAR },
			{ "briefdescriptioncargo", Types.VARCHAR },
			{ "crewnumber", Types.INTEGER },
			{ "passengernumber", Types.INTEGER },
			{ "remarks", Types.VARCHAR },
			{ "cargodeclaration", Types.VARCHAR },
			{ "shipstoresdeclaration", Types.VARCHAR },
			{ "crewlist", Types.VARCHAR },
			{ "passengerlist", Types.VARCHAR },
			{ "shiprequirements", Types.VARCHAR },
			{ "iscreweffectdeclaration", Types.INTEGER },
			{ "ismaritimedeclarationhealth", Types.INTEGER },
			{ "createdate", Types.TIMESTAMP },
			{ "modifydate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table document_general (id LONG not null primary key,documentno VARCHAR(75) null,documentfunction VARCHAR(75) null,isarrival INTEGER,isdeparture INTEGER,shipcode VARCHAR(75) null,arrivalordepartureportcode VARCHAR(75) null,timearrivalordeparture DATE null,imonumber VARCHAR(75) null,callsign VARCHAR(75) null,voyagenumber INTEGER,shipnationcode VARCHAR(75) null,nameofmaster VARCHAR(75) null,lastport VARCHAR(75) null,contactdetailshipagent VARCHAR(75) null,grosstonnage DOUBLE,nettonnage DOUBLE,positionshipinport INTEGER,briefparticularsvoyage VARCHAR(75) null,briefdescriptioncargo VARCHAR(75) null,crewnumber INTEGER,passengernumber INTEGER,remarks VARCHAR(75) null,cargodeclaration VARCHAR(75) null,shipstoresdeclaration VARCHAR(75) null,crewlist VARCHAR(75) null,passengerlist VARCHAR(75) null,shiprequirements VARCHAR(75) null,iscreweffectdeclaration INTEGER,ismaritimedeclarationhealth INTEGER,createdate DATE null,modifydate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table document_general";
	public static final String ORDER_BY_JPQL = " ORDER BY documentGeneral.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY document_general.createdate ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.nhapcanh.model.DocumentGeneral"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.nhapcanh.model.DocumentGeneral"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DocumentGeneral toModel(DocumentGeneralSoap soapModel) {
		DocumentGeneral model = new DocumentGeneralImpl();

		model.setId(soapModel.getId());
		model.setDocumentNo(soapModel.getDocumentNo());
		model.setDocumentFunction(soapModel.getDocumentFunction());
		model.setIsArrival(soapModel.getIsArrival());
		model.setIsDeparture(soapModel.getIsDeparture());
		model.setShipCode(soapModel.getShipCode());
		model.setArrivalOrDeparturePortCode(soapModel.getArrivalOrDeparturePortCode());
		model.setTimeArrivalOrDeparture(soapModel.getTimeArrivalOrDeparture());
		model.setImoNumber(soapModel.getImoNumber());
		model.setCallSign(soapModel.getCallSign());
		model.setVoyageNumber(soapModel.getVoyageNumber());
		model.setShipNationCode(soapModel.getShipNationCode());
		model.setNameOfMaster(soapModel.getNameOfMaster());
		model.setLastPort(soapModel.getLastPort());
		model.setContactDetailShipAgent(soapModel.getContactDetailShipAgent());
		model.setGrossTonnage(soapModel.getGrossTonnage());
		model.setNetTonnage(soapModel.getNetTonnage());
		model.setPositionShipInPort(soapModel.getPositionShipInPort());
		model.setBriefParticularsVoyage(soapModel.getBriefParticularsVoyage());
		model.setBriefDescriptionCargo(soapModel.getBriefDescriptionCargo());
		model.setCrewNumber(soapModel.getCrewNumber());
		model.setPassengerNumber(soapModel.getPassengerNumber());
		model.setRemarks(soapModel.getRemarks());
		model.setCargoDeclaration(soapModel.getCargoDeclaration());
		model.setShipStoresDeclaration(soapModel.getShipStoresDeclaration());
		model.setCrewList(soapModel.getCrewList());
		model.setPassengerList(soapModel.getPassengerList());
		model.setShipRequirements(soapModel.getShipRequirements());
		model.setIsCrewEffectDeclaration(soapModel.getIsCrewEffectDeclaration());
		model.setIsMaritimeDeclarationHealth(soapModel.getIsMaritimeDeclarationHealth());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifyDate(soapModel.getModifyDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DocumentGeneral> toModels(
		DocumentGeneralSoap[] soapModels) {
		List<DocumentGeneral> models = new ArrayList<DocumentGeneral>(soapModels.length);

		for (DocumentGeneralSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.nhapcanh.model.DocumentGeneral"));

	public DocumentGeneralModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return DocumentGeneral.class;
	}

	public String getModelClassName() {
		return DocumentGeneral.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	@JSON
	public String getDocumentNo() {
		if (_documentNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _documentNo;
		}
	}

	public void setDocumentNo(String documentNo) {
		_documentNo = documentNo;
	}

	@JSON
	public String getDocumentFunction() {
		if (_documentFunction == null) {
			return StringPool.BLANK;
		}
		else {
			return _documentFunction;
		}
	}

	public void setDocumentFunction(String documentFunction) {
		_documentFunction = documentFunction;
	}

	@JSON
	public int getIsArrival() {
		return _isArrival;
	}

	public void setIsArrival(int isArrival) {
		_isArrival = isArrival;
	}

	@JSON
	public int getIsDeparture() {
		return _isDeparture;
	}

	public void setIsDeparture(int isDeparture) {
		_isDeparture = isDeparture;
	}

	@JSON
	public String getShipCode() {
		if (_shipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipCode;
		}
	}

	public void setShipCode(String shipCode) {
		_shipCode = shipCode;
	}

	@JSON
	public String getArrivalOrDeparturePortCode() {
		if (_arrivalOrDeparturePortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _arrivalOrDeparturePortCode;
		}
	}

	public void setArrivalOrDeparturePortCode(String arrivalOrDeparturePortCode) {
		_arrivalOrDeparturePortCode = arrivalOrDeparturePortCode;
	}

	@JSON
	public Date getTimeArrivalOrDeparture() {
		return _timeArrivalOrDeparture;
	}

	public void setTimeArrivalOrDeparture(Date timeArrivalOrDeparture) {
		_timeArrivalOrDeparture = timeArrivalOrDeparture;
	}

	@JSON
	public String getImoNumber() {
		if (_imoNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _imoNumber;
		}
	}

	public void setImoNumber(String imoNumber) {
		_imoNumber = imoNumber;
	}

	@JSON
	public String getCallSign() {
		if (_callSign == null) {
			return StringPool.BLANK;
		}
		else {
			return _callSign;
		}
	}

	public void setCallSign(String callSign) {
		_callSign = callSign;
	}

	@JSON
	public int getVoyageNumber() {
		return _voyageNumber;
	}

	public void setVoyageNumber(int voyageNumber) {
		_voyageNumber = voyageNumber;
	}

	@JSON
	public String getShipNationCode() {
		if (_shipNationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipNationCode;
		}
	}

	public void setShipNationCode(String shipNationCode) {
		_shipNationCode = shipNationCode;
	}

	@JSON
	public String getNameOfMaster() {
		if (_nameOfMaster == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfMaster;
		}
	}

	public void setNameOfMaster(String nameOfMaster) {
		_nameOfMaster = nameOfMaster;
	}

	@JSON
	public String getLastPort() {
		if (_lastPort == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastPort;
		}
	}

	public void setLastPort(String lastPort) {
		_lastPort = lastPort;
	}

	@JSON
	public String getContactDetailShipAgent() {
		if (_contactDetailShipAgent == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactDetailShipAgent;
		}
	}

	public void setContactDetailShipAgent(String contactDetailShipAgent) {
		_contactDetailShipAgent = contactDetailShipAgent;
	}

	@JSON
	public double getGrossTonnage() {
		return _grossTonnage;
	}

	public void setGrossTonnage(double grossTonnage) {
		_grossTonnage = grossTonnage;
	}

	@JSON
	public double getNetTonnage() {
		return _netTonnage;
	}

	public void setNetTonnage(double netTonnage) {
		_netTonnage = netTonnage;
	}

	@JSON
	public int getPositionShipInPort() {
		return _positionShipInPort;
	}

	public void setPositionShipInPort(int positionShipInPort) {
		_positionShipInPort = positionShipInPort;
	}

	@JSON
	public String getBriefParticularsVoyage() {
		if (_briefParticularsVoyage == null) {
			return StringPool.BLANK;
		}
		else {
			return _briefParticularsVoyage;
		}
	}

	public void setBriefParticularsVoyage(String briefParticularsVoyage) {
		_briefParticularsVoyage = briefParticularsVoyage;
	}

	@JSON
	public String getBriefDescriptionCargo() {
		if (_briefDescriptionCargo == null) {
			return StringPool.BLANK;
		}
		else {
			return _briefDescriptionCargo;
		}
	}

	public void setBriefDescriptionCargo(String briefDescriptionCargo) {
		_briefDescriptionCargo = briefDescriptionCargo;
	}

	@JSON
	public int getCrewNumber() {
		return _crewNumber;
	}

	public void setCrewNumber(int crewNumber) {
		_crewNumber = crewNumber;
	}

	@JSON
	public int getPassengerNumber() {
		return _passengerNumber;
	}

	public void setPassengerNumber(int passengerNumber) {
		_passengerNumber = passengerNumber;
	}

	@JSON
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	public String getCargoDeclaration() {
		if (_cargoDeclaration == null) {
			return StringPool.BLANK;
		}
		else {
			return _cargoDeclaration;
		}
	}

	public void setCargoDeclaration(String cargoDeclaration) {
		_cargoDeclaration = cargoDeclaration;
	}

	@JSON
	public String getShipStoresDeclaration() {
		if (_shipStoresDeclaration == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipStoresDeclaration;
		}
	}

	public void setShipStoresDeclaration(String shipStoresDeclaration) {
		_shipStoresDeclaration = shipStoresDeclaration;
	}

	@JSON
	public String getCrewList() {
		if (_crewList == null) {
			return StringPool.BLANK;
		}
		else {
			return _crewList;
		}
	}

	public void setCrewList(String crewList) {
		_crewList = crewList;
	}

	@JSON
	public String getPassengerList() {
		if (_passengerList == null) {
			return StringPool.BLANK;
		}
		else {
			return _passengerList;
		}
	}

	public void setPassengerList(String passengerList) {
		_passengerList = passengerList;
	}

	@JSON
	public String getShipRequirements() {
		if (_shipRequirements == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipRequirements;
		}
	}

	public void setShipRequirements(String shipRequirements) {
		_shipRequirements = shipRequirements;
	}

	@JSON
	public int getIsCrewEffectDeclaration() {
		return _isCrewEffectDeclaration;
	}

	public void setIsCrewEffectDeclaration(int isCrewEffectDeclaration) {
		_isCrewEffectDeclaration = isCrewEffectDeclaration;
	}

	@JSON
	public int getIsMaritimeDeclarationHealth() {
		return _isMaritimeDeclarationHealth;
	}

	public void setIsMaritimeDeclarationHealth(int isMaritimeDeclarationHealth) {
		_isMaritimeDeclarationHealth = isMaritimeDeclarationHealth;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifyDate() {
		return _modifyDate;
	}

	public void setModifyDate(Date modifyDate) {
		_modifyDate = modifyDate;
	}

	@Override
	public DocumentGeneral toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (DocumentGeneral)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					DocumentGeneral.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		DocumentGeneralImpl documentGeneralImpl = new DocumentGeneralImpl();

		documentGeneralImpl.setId(getId());
		documentGeneralImpl.setDocumentNo(getDocumentNo());
		documentGeneralImpl.setDocumentFunction(getDocumentFunction());
		documentGeneralImpl.setIsArrival(getIsArrival());
		documentGeneralImpl.setIsDeparture(getIsDeparture());
		documentGeneralImpl.setShipCode(getShipCode());
		documentGeneralImpl.setArrivalOrDeparturePortCode(getArrivalOrDeparturePortCode());
		documentGeneralImpl.setTimeArrivalOrDeparture(getTimeArrivalOrDeparture());
		documentGeneralImpl.setImoNumber(getImoNumber());
		documentGeneralImpl.setCallSign(getCallSign());
		documentGeneralImpl.setVoyageNumber(getVoyageNumber());
		documentGeneralImpl.setShipNationCode(getShipNationCode());
		documentGeneralImpl.setNameOfMaster(getNameOfMaster());
		documentGeneralImpl.setLastPort(getLastPort());
		documentGeneralImpl.setContactDetailShipAgent(getContactDetailShipAgent());
		documentGeneralImpl.setGrossTonnage(getGrossTonnage());
		documentGeneralImpl.setNetTonnage(getNetTonnage());
		documentGeneralImpl.setPositionShipInPort(getPositionShipInPort());
		documentGeneralImpl.setBriefParticularsVoyage(getBriefParticularsVoyage());
		documentGeneralImpl.setBriefDescriptionCargo(getBriefDescriptionCargo());
		documentGeneralImpl.setCrewNumber(getCrewNumber());
		documentGeneralImpl.setPassengerNumber(getPassengerNumber());
		documentGeneralImpl.setRemarks(getRemarks());
		documentGeneralImpl.setCargoDeclaration(getCargoDeclaration());
		documentGeneralImpl.setShipStoresDeclaration(getShipStoresDeclaration());
		documentGeneralImpl.setCrewList(getCrewList());
		documentGeneralImpl.setPassengerList(getPassengerList());
		documentGeneralImpl.setShipRequirements(getShipRequirements());
		documentGeneralImpl.setIsCrewEffectDeclaration(getIsCrewEffectDeclaration());
		documentGeneralImpl.setIsMaritimeDeclarationHealth(getIsMaritimeDeclarationHealth());
		documentGeneralImpl.setCreateDate(getCreateDate());
		documentGeneralImpl.setModifyDate(getModifyDate());

		documentGeneralImpl.resetOriginalValues();

		return documentGeneralImpl;
	}

	public int compareTo(DocumentGeneral documentGeneral) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				documentGeneral.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		DocumentGeneral documentGeneral = null;

		try {
			documentGeneral = (DocumentGeneral)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = documentGeneral.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DocumentGeneral> toCacheModel() {
		DocumentGeneralCacheModel documentGeneralCacheModel = new DocumentGeneralCacheModel();

		documentGeneralCacheModel.id = getId();

		documentGeneralCacheModel.documentNo = getDocumentNo();

		String documentNo = documentGeneralCacheModel.documentNo;

		if ((documentNo != null) && (documentNo.length() == 0)) {
			documentGeneralCacheModel.documentNo = null;
		}

		documentGeneralCacheModel.documentFunction = getDocumentFunction();

		String documentFunction = documentGeneralCacheModel.documentFunction;

		if ((documentFunction != null) && (documentFunction.length() == 0)) {
			documentGeneralCacheModel.documentFunction = null;
		}

		documentGeneralCacheModel.isArrival = getIsArrival();

		documentGeneralCacheModel.isDeparture = getIsDeparture();

		documentGeneralCacheModel.shipCode = getShipCode();

		String shipCode = documentGeneralCacheModel.shipCode;

		if ((shipCode != null) && (shipCode.length() == 0)) {
			documentGeneralCacheModel.shipCode = null;
		}

		documentGeneralCacheModel.arrivalOrDeparturePortCode = getArrivalOrDeparturePortCode();

		String arrivalOrDeparturePortCode = documentGeneralCacheModel.arrivalOrDeparturePortCode;

		if ((arrivalOrDeparturePortCode != null) &&
				(arrivalOrDeparturePortCode.length() == 0)) {
			documentGeneralCacheModel.arrivalOrDeparturePortCode = null;
		}

		Date timeArrivalOrDeparture = getTimeArrivalOrDeparture();

		if (timeArrivalOrDeparture != null) {
			documentGeneralCacheModel.timeArrivalOrDeparture = timeArrivalOrDeparture.getTime();
		}
		else {
			documentGeneralCacheModel.timeArrivalOrDeparture = Long.MIN_VALUE;
		}

		documentGeneralCacheModel.imoNumber = getImoNumber();

		String imoNumber = documentGeneralCacheModel.imoNumber;

		if ((imoNumber != null) && (imoNumber.length() == 0)) {
			documentGeneralCacheModel.imoNumber = null;
		}

		documentGeneralCacheModel.callSign = getCallSign();

		String callSign = documentGeneralCacheModel.callSign;

		if ((callSign != null) && (callSign.length() == 0)) {
			documentGeneralCacheModel.callSign = null;
		}

		documentGeneralCacheModel.voyageNumber = getVoyageNumber();

		documentGeneralCacheModel.shipNationCode = getShipNationCode();

		String shipNationCode = documentGeneralCacheModel.shipNationCode;

		if ((shipNationCode != null) && (shipNationCode.length() == 0)) {
			documentGeneralCacheModel.shipNationCode = null;
		}

		documentGeneralCacheModel.nameOfMaster = getNameOfMaster();

		String nameOfMaster = documentGeneralCacheModel.nameOfMaster;

		if ((nameOfMaster != null) && (nameOfMaster.length() == 0)) {
			documentGeneralCacheModel.nameOfMaster = null;
		}

		documentGeneralCacheModel.lastPort = getLastPort();

		String lastPort = documentGeneralCacheModel.lastPort;

		if ((lastPort != null) && (lastPort.length() == 0)) {
			documentGeneralCacheModel.lastPort = null;
		}

		documentGeneralCacheModel.contactDetailShipAgent = getContactDetailShipAgent();

		String contactDetailShipAgent = documentGeneralCacheModel.contactDetailShipAgent;

		if ((contactDetailShipAgent != null) &&
				(contactDetailShipAgent.length() == 0)) {
			documentGeneralCacheModel.contactDetailShipAgent = null;
		}

		documentGeneralCacheModel.grossTonnage = getGrossTonnage();

		documentGeneralCacheModel.netTonnage = getNetTonnage();

		documentGeneralCacheModel.positionShipInPort = getPositionShipInPort();

		documentGeneralCacheModel.briefParticularsVoyage = getBriefParticularsVoyage();

		String briefParticularsVoyage = documentGeneralCacheModel.briefParticularsVoyage;

		if ((briefParticularsVoyage != null) &&
				(briefParticularsVoyage.length() == 0)) {
			documentGeneralCacheModel.briefParticularsVoyage = null;
		}

		documentGeneralCacheModel.briefDescriptionCargo = getBriefDescriptionCargo();

		String briefDescriptionCargo = documentGeneralCacheModel.briefDescriptionCargo;

		if ((briefDescriptionCargo != null) &&
				(briefDescriptionCargo.length() == 0)) {
			documentGeneralCacheModel.briefDescriptionCargo = null;
		}

		documentGeneralCacheModel.crewNumber = getCrewNumber();

		documentGeneralCacheModel.passengerNumber = getPassengerNumber();

		documentGeneralCacheModel.remarks = getRemarks();

		String remarks = documentGeneralCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			documentGeneralCacheModel.remarks = null;
		}

		documentGeneralCacheModel.cargoDeclaration = getCargoDeclaration();

		String cargoDeclaration = documentGeneralCacheModel.cargoDeclaration;

		if ((cargoDeclaration != null) && (cargoDeclaration.length() == 0)) {
			documentGeneralCacheModel.cargoDeclaration = null;
		}

		documentGeneralCacheModel.shipStoresDeclaration = getShipStoresDeclaration();

		String shipStoresDeclaration = documentGeneralCacheModel.shipStoresDeclaration;

		if ((shipStoresDeclaration != null) &&
				(shipStoresDeclaration.length() == 0)) {
			documentGeneralCacheModel.shipStoresDeclaration = null;
		}

		documentGeneralCacheModel.crewList = getCrewList();

		String crewList = documentGeneralCacheModel.crewList;

		if ((crewList != null) && (crewList.length() == 0)) {
			documentGeneralCacheModel.crewList = null;
		}

		documentGeneralCacheModel.passengerList = getPassengerList();

		String passengerList = documentGeneralCacheModel.passengerList;

		if ((passengerList != null) && (passengerList.length() == 0)) {
			documentGeneralCacheModel.passengerList = null;
		}

		documentGeneralCacheModel.shipRequirements = getShipRequirements();

		String shipRequirements = documentGeneralCacheModel.shipRequirements;

		if ((shipRequirements != null) && (shipRequirements.length() == 0)) {
			documentGeneralCacheModel.shipRequirements = null;
		}

		documentGeneralCacheModel.isCrewEffectDeclaration = getIsCrewEffectDeclaration();

		documentGeneralCacheModel.isMaritimeDeclarationHealth = getIsMaritimeDeclarationHealth();

		Date createDate = getCreateDate();

		if (createDate != null) {
			documentGeneralCacheModel.createDate = createDate.getTime();
		}
		else {
			documentGeneralCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			documentGeneralCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			documentGeneralCacheModel.modifyDate = Long.MIN_VALUE;
		}

		return documentGeneralCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(65);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", documentNo=");
		sb.append(getDocumentNo());
		sb.append(", documentFunction=");
		sb.append(getDocumentFunction());
		sb.append(", isArrival=");
		sb.append(getIsArrival());
		sb.append(", isDeparture=");
		sb.append(getIsDeparture());
		sb.append(", shipCode=");
		sb.append(getShipCode());
		sb.append(", arrivalOrDeparturePortCode=");
		sb.append(getArrivalOrDeparturePortCode());
		sb.append(", timeArrivalOrDeparture=");
		sb.append(getTimeArrivalOrDeparture());
		sb.append(", imoNumber=");
		sb.append(getImoNumber());
		sb.append(", callSign=");
		sb.append(getCallSign());
		sb.append(", voyageNumber=");
		sb.append(getVoyageNumber());
		sb.append(", shipNationCode=");
		sb.append(getShipNationCode());
		sb.append(", nameOfMaster=");
		sb.append(getNameOfMaster());
		sb.append(", lastPort=");
		sb.append(getLastPort());
		sb.append(", contactDetailShipAgent=");
		sb.append(getContactDetailShipAgent());
		sb.append(", grossTonnage=");
		sb.append(getGrossTonnage());
		sb.append(", netTonnage=");
		sb.append(getNetTonnage());
		sb.append(", positionShipInPort=");
		sb.append(getPositionShipInPort());
		sb.append(", briefParticularsVoyage=");
		sb.append(getBriefParticularsVoyage());
		sb.append(", briefDescriptionCargo=");
		sb.append(getBriefDescriptionCargo());
		sb.append(", crewNumber=");
		sb.append(getCrewNumber());
		sb.append(", passengerNumber=");
		sb.append(getPassengerNumber());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", cargoDeclaration=");
		sb.append(getCargoDeclaration());
		sb.append(", shipStoresDeclaration=");
		sb.append(getShipStoresDeclaration());
		sb.append(", crewList=");
		sb.append(getCrewList());
		sb.append(", passengerList=");
		sb.append(getPassengerList());
		sb.append(", shipRequirements=");
		sb.append(getShipRequirements());
		sb.append(", isCrewEffectDeclaration=");
		sb.append(getIsCrewEffectDeclaration());
		sb.append(", isMaritimeDeclarationHealth=");
		sb.append(getIsMaritimeDeclarationHealth());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(100);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.nhapcanh.model.DocumentGeneral");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentNo</column-name><column-value><![CDATA[");
		sb.append(getDocumentNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentFunction</column-name><column-value><![CDATA[");
		sb.append(getDocumentFunction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isArrival</column-name><column-value><![CDATA[");
		sb.append(getIsArrival());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDeparture</column-name><column-value><![CDATA[");
		sb.append(getIsDeparture());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipCode</column-name><column-value><![CDATA[");
		sb.append(getShipCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arrivalOrDeparturePortCode</column-name><column-value><![CDATA[");
		sb.append(getArrivalOrDeparturePortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeArrivalOrDeparture</column-name><column-value><![CDATA[");
		sb.append(getTimeArrivalOrDeparture());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imoNumber</column-name><column-value><![CDATA[");
		sb.append(getImoNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callSign</column-name><column-value><![CDATA[");
		sb.append(getCallSign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>voyageNumber</column-name><column-value><![CDATA[");
		sb.append(getVoyageNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipNationCode</column-name><column-value><![CDATA[");
		sb.append(getShipNationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfMaster</column-name><column-value><![CDATA[");
		sb.append(getNameOfMaster());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastPort</column-name><column-value><![CDATA[");
		sb.append(getLastPort());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactDetailShipAgent</column-name><column-value><![CDATA[");
		sb.append(getContactDetailShipAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossTonnage</column-name><column-value><![CDATA[");
		sb.append(getGrossTonnage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netTonnage</column-name><column-value><![CDATA[");
		sb.append(getNetTonnage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionShipInPort</column-name><column-value><![CDATA[");
		sb.append(getPositionShipInPort());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>briefParticularsVoyage</column-name><column-value><![CDATA[");
		sb.append(getBriefParticularsVoyage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>briefDescriptionCargo</column-name><column-value><![CDATA[");
		sb.append(getBriefDescriptionCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>crewNumber</column-name><column-value><![CDATA[");
		sb.append(getCrewNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passengerNumber</column-name><column-value><![CDATA[");
		sb.append(getPassengerNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cargoDeclaration</column-name><column-value><![CDATA[");
		sb.append(getCargoDeclaration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipStoresDeclaration</column-name><column-value><![CDATA[");
		sb.append(getShipStoresDeclaration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>crewList</column-name><column-value><![CDATA[");
		sb.append(getCrewList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passengerList</column-name><column-value><![CDATA[");
		sb.append(getPassengerList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipRequirements</column-name><column-value><![CDATA[");
		sb.append(getShipRequirements());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isCrewEffectDeclaration</column-name><column-value><![CDATA[");
		sb.append(getIsCrewEffectDeclaration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isMaritimeDeclarationHealth</column-name><column-value><![CDATA[");
		sb.append(getIsMaritimeDeclarationHealth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DocumentGeneral.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			DocumentGeneral.class
		};
	private long _id;
	private String _documentNo;
	private String _documentFunction;
	private int _isArrival;
	private int _isDeparture;
	private String _shipCode;
	private String _arrivalOrDeparturePortCode;
	private Date _timeArrivalOrDeparture;
	private String _imoNumber;
	private String _callSign;
	private int _voyageNumber;
	private String _shipNationCode;
	private String _nameOfMaster;
	private String _lastPort;
	private String _contactDetailShipAgent;
	private double _grossTonnage;
	private double _netTonnage;
	private int _positionShipInPort;
	private String _briefParticularsVoyage;
	private String _briefDescriptionCargo;
	private int _crewNumber;
	private int _passengerNumber;
	private String _remarks;
	private String _cargoDeclaration;
	private String _shipStoresDeclaration;
	private String _crewList;
	private String _passengerList;
	private String _shipRequirements;
	private int _isCrewEffectDeclaration;
	private int _isMaritimeDeclarationHealth;
	private Date _createDate;
	private Date _modifyDate;
	private transient ExpandoBridge _expandoBridge;
	private DocumentGeneral _escapedModelProxy;
}