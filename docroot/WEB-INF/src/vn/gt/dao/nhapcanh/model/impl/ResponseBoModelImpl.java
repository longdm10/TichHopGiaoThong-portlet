/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.nhapcanh.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.nhapcanh.model.ResponseBo;
import vn.gt.dao.nhapcanh.model.ResponseBoModel;
import vn.gt.dao.nhapcanh.model.ResponseBoSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the ResponseBo service. Represents a row in the &quot;responsebo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.nhapcanh.model.ResponseBoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ResponseBoImpl}.
 * </p>
 *
 * @author win_64
 * @see ResponseBoImpl
 * @see vn.gt.dao.nhapcanh.model.ResponseBo
 * @see vn.gt.dao.nhapcanh.model.ResponseBoModel
 * @generated
 */
@JSON(strict = true)
public class ResponseBoModelImpl extends BaseModelImpl<ResponseBo>
	implements ResponseBoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a response bo model instance should use the {@link vn.gt.dao.nhapcanh.model.ResponseBo} interface instead.
	 */
	public static final String TABLE_NAME = "responsebo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "issuccess", Types.INTEGER },
			{ "errormessage", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table responsebo (id LONG not null primary key,issuccess INTEGER,errormessage VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table responsebo";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.nhapcanh.model.ResponseBo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.nhapcanh.model.ResponseBo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ResponseBo toModel(ResponseBoSoap soapModel) {
		ResponseBo model = new ResponseBoImpl();

		model.setId(soapModel.getId());
		model.setIsSuccess(soapModel.getIsSuccess());
		model.setErrorMessage(soapModel.getErrorMessage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ResponseBo> toModels(ResponseBoSoap[] soapModels) {
		List<ResponseBo> models = new ArrayList<ResponseBo>(soapModels.length);

		for (ResponseBoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.nhapcanh.model.ResponseBo"));

	public ResponseBoModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ResponseBo.class;
	}

	public String getModelClassName() {
		return ResponseBo.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	@JSON
	public int getIsSuccess() {
		return _isSuccess;
	}

	public void setIsSuccess(int isSuccess) {
		_isSuccess = isSuccess;
	}

	@JSON
	public String getErrorMessage() {
		if (_errorMessage == null) {
			return StringPool.BLANK;
		}
		else {
			return _errorMessage;
		}
	}

	public void setErrorMessage(String errorMessage) {
		_errorMessage = errorMessage;
	}

	@Override
	public ResponseBo toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ResponseBo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					ResponseBo.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		ResponseBoImpl responseBoImpl = new ResponseBoImpl();

		responseBoImpl.setId(getId());
		responseBoImpl.setIsSuccess(getIsSuccess());
		responseBoImpl.setErrorMessage(getErrorMessage());

		responseBoImpl.resetOriginalValues();

		return responseBoImpl;
	}

	public int compareTo(ResponseBo responseBo) {
		long primaryKey = responseBo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ResponseBo responseBo = null;

		try {
			responseBo = (ResponseBo)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = responseBo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ResponseBo> toCacheModel() {
		ResponseBoCacheModel responseBoCacheModel = new ResponseBoCacheModel();

		responseBoCacheModel.id = getId();

		responseBoCacheModel.isSuccess = getIsSuccess();

		responseBoCacheModel.errorMessage = getErrorMessage();

		String errorMessage = responseBoCacheModel.errorMessage;

		if ((errorMessage != null) && (errorMessage.length() == 0)) {
			responseBoCacheModel.errorMessage = null;
		}

		return responseBoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", isSuccess=");
		sb.append(getIsSuccess());
		sb.append(", errorMessage=");
		sb.append(getErrorMessage());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.nhapcanh.model.ResponseBo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isSuccess</column-name><column-value><![CDATA[");
		sb.append(getIsSuccess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorMessage</column-name><column-value><![CDATA[");
		sb.append(getErrorMessage());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ResponseBo.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ResponseBo.class
		};
	private long _id;
	private int _isSuccess;
	private String _errorMessage;
	private transient ExpandoBridge _expandoBridge;
	private ResponseBo _escapedModelProxy;
}