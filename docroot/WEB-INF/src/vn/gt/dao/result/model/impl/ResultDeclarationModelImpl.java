/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.result.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.result.model.ResultDeclaration;
import vn.gt.dao.result.model.ResultDeclarationModel;
import vn.gt.dao.result.model.ResultDeclarationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the ResultDeclaration service. Represents a row in the &quot;RESULT_DECLARATION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.result.model.ResultDeclarationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ResultDeclarationImpl}.
 * </p>
 *
 * @author win_64
 * @see ResultDeclarationImpl
 * @see vn.gt.dao.result.model.ResultDeclaration
 * @see vn.gt.dao.result.model.ResultDeclarationModel
 * @generated
 */
@JSON(strict = true)
public class ResultDeclarationModelImpl extends BaseModelImpl<ResultDeclaration>
	implements ResultDeclarationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a result declaration model instance should use the {@link vn.gt.dao.result.model.ResultDeclaration} interface instead.
	 */
	public static final String TABLE_NAME = "RESULT_DECLARATION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "RequestState", Types.INTEGER },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "BusinessOrder", Types.INTEGER },
			{ "BusinessTypeCode", Types.INTEGER },
			{ "LatestSend", Types.INTEGER },
			{ "DeclarationTime", Types.TIMESTAMP },
			{ "ArrivalDepartureTime", Types.TIMESTAMP },
			{ "RemainingTime", Types.VARCHAR },
			{ "Remarks", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table RESULT_DECLARATION (id LONG not null primary key,RequestCode VARCHAR(75) null,RequestState INTEGER,DocumentName LONG,DocumentYear INTEGER,BusinessOrder INTEGER,BusinessTypeCode INTEGER,LatestSend INTEGER,DeclarationTime DATE null,ArrivalDepartureTime DATE null,RemainingTime VARCHAR(75) null,Remarks VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table RESULT_DECLARATION";
	public static final String ORDER_BY_JPQL = " ORDER BY resultDeclaration.id DESC";
	public static final String ORDER_BY_SQL = " ORDER BY RESULT_DECLARATION.id DESC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.result.model.ResultDeclaration"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.result.model.ResultDeclaration"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.result.model.ResultDeclaration"),
			true);
	public static long BUSINESSTYPECODE_COLUMN_BITMASK = 1L;
	public static long DOCUMENTNAME_COLUMN_BITMASK = 2L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 4L;
	public static long REQUESTCODE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ResultDeclaration toModel(ResultDeclarationSoap soapModel) {
		ResultDeclaration model = new ResultDeclarationImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setRequestState(soapModel.getRequestState());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setBusinessOrder(soapModel.getBusinessOrder());
		model.setBusinessTypeCode(soapModel.getBusinessTypeCode());
		model.setLatestSend(soapModel.getLatestSend());
		model.setDeclarationTime(soapModel.getDeclarationTime());
		model.setArrivalDepartureTime(soapModel.getArrivalDepartureTime());
		model.setRemainingTime(soapModel.getRemainingTime());
		model.setRemarks(soapModel.getRemarks());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ResultDeclaration> toModels(
		ResultDeclarationSoap[] soapModels) {
		List<ResultDeclaration> models = new ArrayList<ResultDeclaration>(soapModels.length);

		for (ResultDeclarationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.result.model.ResultDeclaration"));

	public ResultDeclarationModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ResultDeclaration.class;
	}

	public String getModelClassName() {
		return ResultDeclaration.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	public int getRequestState() {
		return _requestState;
	}

	public void setRequestState(int requestState) {
		_requestState = requestState;
	}

	@JSON
	public long getDocumentName() {
		return _documentName;
	}

	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	public int getDocumentYear() {
		return _documentYear;
	}

	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	public int getBusinessOrder() {
		return _businessOrder;
	}

	public void setBusinessOrder(int businessOrder) {
		_businessOrder = businessOrder;
	}

	@JSON
	public int getBusinessTypeCode() {
		return _businessTypeCode;
	}

	public void setBusinessTypeCode(int businessTypeCode) {
		_columnBitmask |= BUSINESSTYPECODE_COLUMN_BITMASK;

		if (!_setOriginalBusinessTypeCode) {
			_setOriginalBusinessTypeCode = true;

			_originalBusinessTypeCode = _businessTypeCode;
		}

		_businessTypeCode = businessTypeCode;
	}

	public int getOriginalBusinessTypeCode() {
		return _originalBusinessTypeCode;
	}

	@JSON
	public int getLatestSend() {
		return _latestSend;
	}

	public void setLatestSend(int latestSend) {
		_latestSend = latestSend;
	}

	@JSON
	public Date getDeclarationTime() {
		return _declarationTime;
	}

	public void setDeclarationTime(Date declarationTime) {
		_declarationTime = declarationTime;
	}

	@JSON
	public Date getArrivalDepartureTime() {
		return _arrivalDepartureTime;
	}

	public void setArrivalDepartureTime(Date arrivalDepartureTime) {
		_arrivalDepartureTime = arrivalDepartureTime;
	}

	@JSON
	public String getRemainingTime() {
		if (_remainingTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _remainingTime;
		}
	}

	public void setRemainingTime(String remainingTime) {
		_remainingTime = remainingTime;
	}

	@JSON
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ResultDeclaration toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ResultDeclaration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					ResultDeclaration.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		ResultDeclarationImpl resultDeclarationImpl = new ResultDeclarationImpl();

		resultDeclarationImpl.setId(getId());
		resultDeclarationImpl.setRequestCode(getRequestCode());
		resultDeclarationImpl.setRequestState(getRequestState());
		resultDeclarationImpl.setDocumentName(getDocumentName());
		resultDeclarationImpl.setDocumentYear(getDocumentYear());
		resultDeclarationImpl.setBusinessOrder(getBusinessOrder());
		resultDeclarationImpl.setBusinessTypeCode(getBusinessTypeCode());
		resultDeclarationImpl.setLatestSend(getLatestSend());
		resultDeclarationImpl.setDeclarationTime(getDeclarationTime());
		resultDeclarationImpl.setArrivalDepartureTime(getArrivalDepartureTime());
		resultDeclarationImpl.setRemainingTime(getRemainingTime());
		resultDeclarationImpl.setRemarks(getRemarks());

		resultDeclarationImpl.resetOriginalValues();

		return resultDeclarationImpl;
	}

	public int compareTo(ResultDeclaration resultDeclaration) {
		int value = 0;

		if (getId() < resultDeclaration.getId()) {
			value = -1;
		}
		else if (getId() > resultDeclaration.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ResultDeclaration resultDeclaration = null;

		try {
			resultDeclaration = (ResultDeclaration)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = resultDeclaration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ResultDeclarationModelImpl resultDeclarationModelImpl = this;

		resultDeclarationModelImpl._originalRequestCode = resultDeclarationModelImpl._requestCode;

		resultDeclarationModelImpl._originalDocumentName = resultDeclarationModelImpl._documentName;

		resultDeclarationModelImpl._setOriginalDocumentName = false;

		resultDeclarationModelImpl._originalDocumentYear = resultDeclarationModelImpl._documentYear;

		resultDeclarationModelImpl._setOriginalDocumentYear = false;

		resultDeclarationModelImpl._originalBusinessTypeCode = resultDeclarationModelImpl._businessTypeCode;

		resultDeclarationModelImpl._setOriginalBusinessTypeCode = false;

		resultDeclarationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ResultDeclaration> toCacheModel() {
		ResultDeclarationCacheModel resultDeclarationCacheModel = new ResultDeclarationCacheModel();

		resultDeclarationCacheModel.id = getId();

		resultDeclarationCacheModel.requestCode = getRequestCode();

		String requestCode = resultDeclarationCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			resultDeclarationCacheModel.requestCode = null;
		}

		resultDeclarationCacheModel.requestState = getRequestState();

		resultDeclarationCacheModel.documentName = getDocumentName();

		resultDeclarationCacheModel.documentYear = getDocumentYear();

		resultDeclarationCacheModel.businessOrder = getBusinessOrder();

		resultDeclarationCacheModel.businessTypeCode = getBusinessTypeCode();

		resultDeclarationCacheModel.latestSend = getLatestSend();

		Date declarationTime = getDeclarationTime();

		if (declarationTime != null) {
			resultDeclarationCacheModel.declarationTime = declarationTime.getTime();
		}
		else {
			resultDeclarationCacheModel.declarationTime = Long.MIN_VALUE;
		}

		Date arrivalDepartureTime = getArrivalDepartureTime();

		if (arrivalDepartureTime != null) {
			resultDeclarationCacheModel.arrivalDepartureTime = arrivalDepartureTime.getTime();
		}
		else {
			resultDeclarationCacheModel.arrivalDepartureTime = Long.MIN_VALUE;
		}

		resultDeclarationCacheModel.remainingTime = getRemainingTime();

		String remainingTime = resultDeclarationCacheModel.remainingTime;

		if ((remainingTime != null) && (remainingTime.length() == 0)) {
			resultDeclarationCacheModel.remainingTime = null;
		}

		resultDeclarationCacheModel.remarks = getRemarks();

		String remarks = resultDeclarationCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			resultDeclarationCacheModel.remarks = null;
		}

		return resultDeclarationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", businessOrder=");
		sb.append(getBusinessOrder());
		sb.append(", businessTypeCode=");
		sb.append(getBusinessTypeCode());
		sb.append(", latestSend=");
		sb.append(getLatestSend());
		sb.append(", declarationTime=");
		sb.append(getDeclarationTime());
		sb.append(", arrivalDepartureTime=");
		sb.append(getArrivalDepartureTime());
		sb.append(", remainingTime=");
		sb.append(getRemainingTime());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.result.model.ResultDeclaration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessOrder</column-name><column-value><![CDATA[");
		sb.append(getBusinessOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessTypeCode</column-name><column-value><![CDATA[");
		sb.append(getBusinessTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latestSend</column-name><column-value><![CDATA[");
		sb.append(getLatestSend());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>declarationTime</column-name><column-value><![CDATA[");
		sb.append(getDeclarationTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arrivalDepartureTime</column-name><column-value><![CDATA[");
		sb.append(getArrivalDepartureTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remainingTime</column-name><column-value><![CDATA[");
		sb.append(getRemainingTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ResultDeclaration.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ResultDeclaration.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private int _requestState;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private int _businessOrder;
	private int _businessTypeCode;
	private int _originalBusinessTypeCode;
	private boolean _setOriginalBusinessTypeCode;
	private int _latestSend;
	private Date _declarationTime;
	private Date _arrivalDepartureTime;
	private String _remainingTime;
	private String _remarks;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private ResultDeclaration _escapedModelProxy;
}