/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.danhmucgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import vn.gt.dao.danhmucgt.model.DmGtVersion;
import vn.gt.dao.danhmucgt.model.DmGtVersionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the DmGtVersion service. Represents a row in the &quot;DM_GT_VERSION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.danhmucgt.model.DmGtVersionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmGtVersionImpl}.
 * </p>
 *
 * @author win_64
 * @see DmGtVersionImpl
 * @see vn.gt.dao.danhmucgt.model.DmGtVersion
 * @see vn.gt.dao.danhmucgt.model.DmGtVersionModel
 * @generated
 */
public class DmGtVersionModelImpl extends BaseModelImpl<DmGtVersion>
	implements DmGtVersionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm gt version model instance should use the {@link vn.gt.dao.danhmucgt.model.DmGtVersion} interface instead.
	 */
	public static final String TABLE_NAME = "DM_GT_VERSION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.INTEGER },
			{ "VersionName", Types.VARCHAR },
			{ "VersionDate", Types.TIMESTAMP },
			{ "VersionDeployer", Types.VARCHAR },
			{ "Contents", Types.VARCHAR },
			{ "Description", Types.VARCHAR },
			{ "DBFileName", Types.VARCHAR },
			{ "DBFileSize", Types.VARCHAR },
			{ "DBDescription", Types.VARCHAR },
			{ "APPFileName", Types.VARCHAR },
			{ "APPFileSize", Types.VARCHAR },
			{ "APPDescription", Types.VARCHAR },
			{ "SpecFileName", Types.VARCHAR },
			{ "SpecFileSize", Types.VARCHAR },
			{ "SpecDescription", Types.VARCHAR },
			{ "OrganizationCode", Types.VARCHAR },
			{ "IsDelete", Types.INTEGER },
			{ "MarkedAsDelete", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "SyncVersion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_GT_VERSION (id INTEGER not null primary key,VersionName VARCHAR(75) null,VersionDate DATE null,VersionDeployer VARCHAR(75) null,Contents VARCHAR(75) null,Description VARCHAR(75) null,DBFileName VARCHAR(75) null,DBFileSize VARCHAR(75) null,DBDescription VARCHAR(75) null,APPFileName VARCHAR(75) null,APPFileSize VARCHAR(75) null,APPDescription VARCHAR(75) null,SpecFileName VARCHAR(75) null,SpecFileSize VARCHAR(75) null,SpecDescription VARCHAR(75) null,OrganizationCode VARCHAR(75) null,IsDelete INTEGER,MarkedAsDelete INTEGER,ModifiedDate DATE null,RequestedDate DATE null,SyncVersion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_GT_VERSION";
	public static final String ORDER_BY_JPQL = " ORDER BY dmGtVersion.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_GT_VERSION.id ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.danhmucgt.model.DmGtVersion"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.danhmucgt.model.DmGtVersion"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.danhmucgt.model.DmGtVersion"));

	public DmGtVersionModelImpl() {
	}

	public int getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return DmGtVersion.class;
	}

	public String getModelClassName() {
		return DmGtVersion.class.getName();
	}

	public int getId() {
		return _id;
	}

	public void setId(int id) {
		_id = id;
	}

	public String getVersionName() {
		if (_versionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _versionName;
		}
	}

	public void setVersionName(String versionName) {
		_versionName = versionName;
	}

	public Date getVersionDate() {
		return _versionDate;
	}

	public void setVersionDate(Date versionDate) {
		_versionDate = versionDate;
	}

	public String getVersionDeployer() {
		if (_versionDeployer == null) {
			return StringPool.BLANK;
		}
		else {
			return _versionDeployer;
		}
	}

	public void setVersionDeployer(String versionDeployer) {
		_versionDeployer = versionDeployer;
	}

	public String getContents() {
		if (_contents == null) {
			return StringPool.BLANK;
		}
		else {
			return _contents;
		}
	}

	public void setContents(String contents) {
		_contents = contents;
	}

	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	public String getDbFileName() {
		if (_dbFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _dbFileName;
		}
	}

	public void setDbFileName(String dbFileName) {
		_dbFileName = dbFileName;
	}

	public String getDbFileSize() {
		if (_dbFileSize == null) {
			return StringPool.BLANK;
		}
		else {
			return _dbFileSize;
		}
	}

	public void setDbFileSize(String dbFileSize) {
		_dbFileSize = dbFileSize;
	}

	public String getDbDescription() {
		if (_dbDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _dbDescription;
		}
	}

	public void setDbDescription(String dbDescription) {
		_dbDescription = dbDescription;
	}

	public String getAppFileName() {
		if (_appFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _appFileName;
		}
	}

	public void setAppFileName(String appFileName) {
		_appFileName = appFileName;
	}

	public String getAppFileSize() {
		if (_appFileSize == null) {
			return StringPool.BLANK;
		}
		else {
			return _appFileSize;
		}
	}

	public void setAppFileSize(String appFileSize) {
		_appFileSize = appFileSize;
	}

	public String getAppDescription() {
		if (_appDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _appDescription;
		}
	}

	public void setAppDescription(String appDescription) {
		_appDescription = appDescription;
	}

	public String getSpecFileName() {
		if (_specFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _specFileName;
		}
	}

	public void setSpecFileName(String specFileName) {
		_specFileName = specFileName;
	}

	public String getSpecFileSize() {
		if (_specFileSize == null) {
			return StringPool.BLANK;
		}
		else {
			return _specFileSize;
		}
	}

	public void setSpecFileSize(String specFileSize) {
		_specFileSize = specFileSize;
	}

	public String getSpecDescription() {
		if (_specDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _specDescription;
		}
	}

	public void setSpecDescription(String specDescription) {
		_specDescription = specDescription;
	}

	public String getOrganizationCode() {
		if (_organizationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _organizationCode;
		}
	}

	public void setOrganizationCode(String organizationCode) {
		_organizationCode = organizationCode;
	}

	public int getIsDelete() {
		return _isDelete;
	}

	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public Date getRequestedDate() {
		return _requestedDate;
	}

	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	public void setSyncVersion(String syncVersion) {
		_syncVersion = syncVersion;
	}

	@Override
	public DmGtVersion toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (DmGtVersion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		DmGtVersionImpl dmGtVersionImpl = new DmGtVersionImpl();

		dmGtVersionImpl.setId(getId());
		dmGtVersionImpl.setVersionName(getVersionName());
		dmGtVersionImpl.setVersionDate(getVersionDate());
		dmGtVersionImpl.setVersionDeployer(getVersionDeployer());
		dmGtVersionImpl.setContents(getContents());
		dmGtVersionImpl.setDescription(getDescription());
		dmGtVersionImpl.setDbFileName(getDbFileName());
		dmGtVersionImpl.setDbFileSize(getDbFileSize());
		dmGtVersionImpl.setDbDescription(getDbDescription());
		dmGtVersionImpl.setAppFileName(getAppFileName());
		dmGtVersionImpl.setAppFileSize(getAppFileSize());
		dmGtVersionImpl.setAppDescription(getAppDescription());
		dmGtVersionImpl.setSpecFileName(getSpecFileName());
		dmGtVersionImpl.setSpecFileSize(getSpecFileSize());
		dmGtVersionImpl.setSpecDescription(getSpecDescription());
		dmGtVersionImpl.setOrganizationCode(getOrganizationCode());
		dmGtVersionImpl.setIsDelete(getIsDelete());
		dmGtVersionImpl.setMarkedAsDelete(getMarkedAsDelete());
		dmGtVersionImpl.setModifiedDate(getModifiedDate());
		dmGtVersionImpl.setRequestedDate(getRequestedDate());
		dmGtVersionImpl.setSyncVersion(getSyncVersion());

		dmGtVersionImpl.resetOriginalValues();

		return dmGtVersionImpl;
	}

	public int compareTo(DmGtVersion dmGtVersion) {
		int value = 0;

		if (getId() < dmGtVersion.getId()) {
			value = -1;
		}
		else if (getId() > dmGtVersion.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		DmGtVersion dmGtVersion = null;

		try {
			dmGtVersion = (DmGtVersion)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = dmGtVersion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DmGtVersion> toCacheModel() {
		DmGtVersionCacheModel dmGtVersionCacheModel = new DmGtVersionCacheModel();

		dmGtVersionCacheModel.id = getId();

		dmGtVersionCacheModel.versionName = getVersionName();

		String versionName = dmGtVersionCacheModel.versionName;

		if ((versionName != null) && (versionName.length() == 0)) {
			dmGtVersionCacheModel.versionName = null;
		}

		Date versionDate = getVersionDate();

		if (versionDate != null) {
			dmGtVersionCacheModel.versionDate = versionDate.getTime();
		}
		else {
			dmGtVersionCacheModel.versionDate = Long.MIN_VALUE;
		}

		dmGtVersionCacheModel.versionDeployer = getVersionDeployer();

		String versionDeployer = dmGtVersionCacheModel.versionDeployer;

		if ((versionDeployer != null) && (versionDeployer.length() == 0)) {
			dmGtVersionCacheModel.versionDeployer = null;
		}

		dmGtVersionCacheModel.contents = getContents();

		String contents = dmGtVersionCacheModel.contents;

		if ((contents != null) && (contents.length() == 0)) {
			dmGtVersionCacheModel.contents = null;
		}

		dmGtVersionCacheModel.description = getDescription();

		String description = dmGtVersionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			dmGtVersionCacheModel.description = null;
		}

		dmGtVersionCacheModel.dbFileName = getDbFileName();

		String dbFileName = dmGtVersionCacheModel.dbFileName;

		if ((dbFileName != null) && (dbFileName.length() == 0)) {
			dmGtVersionCacheModel.dbFileName = null;
		}

		dmGtVersionCacheModel.dbFileSize = getDbFileSize();

		String dbFileSize = dmGtVersionCacheModel.dbFileSize;

		if ((dbFileSize != null) && (dbFileSize.length() == 0)) {
			dmGtVersionCacheModel.dbFileSize = null;
		}

		dmGtVersionCacheModel.dbDescription = getDbDescription();

		String dbDescription = dmGtVersionCacheModel.dbDescription;

		if ((dbDescription != null) && (dbDescription.length() == 0)) {
			dmGtVersionCacheModel.dbDescription = null;
		}

		dmGtVersionCacheModel.appFileName = getAppFileName();

		String appFileName = dmGtVersionCacheModel.appFileName;

		if ((appFileName != null) && (appFileName.length() == 0)) {
			dmGtVersionCacheModel.appFileName = null;
		}

		dmGtVersionCacheModel.appFileSize = getAppFileSize();

		String appFileSize = dmGtVersionCacheModel.appFileSize;

		if ((appFileSize != null) && (appFileSize.length() == 0)) {
			dmGtVersionCacheModel.appFileSize = null;
		}

		dmGtVersionCacheModel.appDescription = getAppDescription();

		String appDescription = dmGtVersionCacheModel.appDescription;

		if ((appDescription != null) && (appDescription.length() == 0)) {
			dmGtVersionCacheModel.appDescription = null;
		}

		dmGtVersionCacheModel.specFileName = getSpecFileName();

		String specFileName = dmGtVersionCacheModel.specFileName;

		if ((specFileName != null) && (specFileName.length() == 0)) {
			dmGtVersionCacheModel.specFileName = null;
		}

		dmGtVersionCacheModel.specFileSize = getSpecFileSize();

		String specFileSize = dmGtVersionCacheModel.specFileSize;

		if ((specFileSize != null) && (specFileSize.length() == 0)) {
			dmGtVersionCacheModel.specFileSize = null;
		}

		dmGtVersionCacheModel.specDescription = getSpecDescription();

		String specDescription = dmGtVersionCacheModel.specDescription;

		if ((specDescription != null) && (specDescription.length() == 0)) {
			dmGtVersionCacheModel.specDescription = null;
		}

		dmGtVersionCacheModel.organizationCode = getOrganizationCode();

		String organizationCode = dmGtVersionCacheModel.organizationCode;

		if ((organizationCode != null) && (organizationCode.length() == 0)) {
			dmGtVersionCacheModel.organizationCode = null;
		}

		dmGtVersionCacheModel.isDelete = getIsDelete();

		dmGtVersionCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmGtVersionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmGtVersionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			dmGtVersionCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			dmGtVersionCacheModel.requestedDate = Long.MIN_VALUE;
		}

		dmGtVersionCacheModel.syncVersion = getSyncVersion();

		String syncVersion = dmGtVersionCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			dmGtVersionCacheModel.syncVersion = null;
		}

		return dmGtVersionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(43);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", versionName=");
		sb.append(getVersionName());
		sb.append(", versionDate=");
		sb.append(getVersionDate());
		sb.append(", versionDeployer=");
		sb.append(getVersionDeployer());
		sb.append(", contents=");
		sb.append(getContents());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", dbFileName=");
		sb.append(getDbFileName());
		sb.append(", dbFileSize=");
		sb.append(getDbFileSize());
		sb.append(", dbDescription=");
		sb.append(getDbDescription());
		sb.append(", appFileName=");
		sb.append(getAppFileName());
		sb.append(", appFileSize=");
		sb.append(getAppFileSize());
		sb.append(", appDescription=");
		sb.append(getAppDescription());
		sb.append(", specFileName=");
		sb.append(getSpecFileName());
		sb.append(", specFileSize=");
		sb.append(getSpecFileSize());
		sb.append(", specDescription=");
		sb.append(getSpecDescription());
		sb.append(", organizationCode=");
		sb.append(getOrganizationCode());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(67);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.danhmucgt.model.DmGtVersion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionName</column-name><column-value><![CDATA[");
		sb.append(getVersionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionDate</column-name><column-value><![CDATA[");
		sb.append(getVersionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionDeployer</column-name><column-value><![CDATA[");
		sb.append(getVersionDeployer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contents</column-name><column-value><![CDATA[");
		sb.append(getContents());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dbFileName</column-name><column-value><![CDATA[");
		sb.append(getDbFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dbFileSize</column-name><column-value><![CDATA[");
		sb.append(getDbFileSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dbDescription</column-name><column-value><![CDATA[");
		sb.append(getDbDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appFileName</column-name><column-value><![CDATA[");
		sb.append(getAppFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appFileSize</column-name><column-value><![CDATA[");
		sb.append(getAppFileSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appDescription</column-name><column-value><![CDATA[");
		sb.append(getAppDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specFileName</column-name><column-value><![CDATA[");
		sb.append(getSpecFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specFileSize</column-name><column-value><![CDATA[");
		sb.append(getSpecFileSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specDescription</column-name><column-value><![CDATA[");
		sb.append(getSpecDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationCode</column-name><column-value><![CDATA[");
		sb.append(getOrganizationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmGtVersion.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			DmGtVersion.class
		};
	private int _id;
	private String _versionName;
	private Date _versionDate;
	private String _versionDeployer;
	private String _contents;
	private String _description;
	private String _dbFileName;
	private String _dbFileSize;
	private String _dbDescription;
	private String _appFileName;
	private String _appFileSize;
	private String _appDescription;
	private String _specFileName;
	private String _specFileSize;
	private String _specDescription;
	private String _organizationCode;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private DmGtVersion _escapedModelProxy;
}