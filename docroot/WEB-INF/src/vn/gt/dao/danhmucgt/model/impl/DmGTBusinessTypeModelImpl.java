/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.danhmucgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.danhmucgt.model.DmGTBusinessType;
import vn.gt.dao.danhmucgt.model.DmGTBusinessTypeModel;
import vn.gt.dao.danhmucgt.model.DmGTBusinessTypeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the DmGTBusinessType service. Represents a row in the &quot;DM_GT_BUSINESS_TYPE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.danhmucgt.model.DmGTBusinessTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmGTBusinessTypeImpl}.
 * </p>
 *
 * @author win_64
 * @see DmGTBusinessTypeImpl
 * @see vn.gt.dao.danhmucgt.model.DmGTBusinessType
 * @see vn.gt.dao.danhmucgt.model.DmGTBusinessTypeModel
 * @generated
 */
@JSON(strict = true)
public class DmGTBusinessTypeModelImpl extends BaseModelImpl<DmGTBusinessType>
	implements DmGTBusinessTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm g t business type model instance should use the {@link vn.gt.dao.danhmucgt.model.DmGTBusinessType} interface instead.
	 */
	public static final String TABLE_NAME = "DM_GT_BUSINESS_TYPE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "BusinessTypeCode", Types.INTEGER },
			{ "BusinessTypeName", Types.VARCHAR },
			{ "BusinessTypeNameVN", Types.VARCHAR },
			{ "BusinessTypeOrder", Types.INTEGER },
			{ "IsDelete", Types.INTEGER },
			{ "MarkedAsDelete", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "SyncVersion", Types.VARCHAR },
			{ "Remarks", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_GT_BUSINESS_TYPE (id LONG not null primary key,BusinessTypeCode INTEGER,BusinessTypeName VARCHAR(75) null,BusinessTypeNameVN VARCHAR(75) null,BusinessTypeOrder INTEGER,IsDelete INTEGER,MarkedAsDelete INTEGER,ModifiedDate DATE null,RequestedDate DATE null,SyncVersion VARCHAR(75) null,Remarks VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_GT_BUSINESS_TYPE";
	public static final String ORDER_BY_JPQL = " ORDER BY dmGTBusinessType.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_GT_BUSINESS_TYPE.id ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.danhmucgt.model.DmGTBusinessType"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.danhmucgt.model.DmGTBusinessType"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.danhmucgt.model.DmGTBusinessType"),
			true);
	public static long BUSINESSTYPECODE_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DmGTBusinessType toModel(DmGTBusinessTypeSoap soapModel) {
		DmGTBusinessType model = new DmGTBusinessTypeImpl();

		model.setId(soapModel.getId());
		model.setBusinessTypeCode(soapModel.getBusinessTypeCode());
		model.setBusinessTypeName(soapModel.getBusinessTypeName());
		model.setBusinessTypeNameVN(soapModel.getBusinessTypeNameVN());
		model.setBusinessTypeOrder(soapModel.getBusinessTypeOrder());
		model.setIsDelete(soapModel.getIsDelete());
		model.setMarkedAsDelete(soapModel.getMarkedAsDelete());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRequestedDate(soapModel.getRequestedDate());
		model.setSyncVersion(soapModel.getSyncVersion());
		model.setRemarks(soapModel.getRemarks());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DmGTBusinessType> toModels(
		DmGTBusinessTypeSoap[] soapModels) {
		List<DmGTBusinessType> models = new ArrayList<DmGTBusinessType>(soapModels.length);

		for (DmGTBusinessTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.danhmucgt.model.DmGTBusinessType"));

	public DmGTBusinessTypeModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return DmGTBusinessType.class;
	}

	public String getModelClassName() {
		return DmGTBusinessType.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public int getBusinessTypeCode() {
		return _businessTypeCode;
	}

	public void setBusinessTypeCode(int businessTypeCode) {
		_columnBitmask |= BUSINESSTYPECODE_COLUMN_BITMASK;

		if (!_setOriginalBusinessTypeCode) {
			_setOriginalBusinessTypeCode = true;

			_originalBusinessTypeCode = _businessTypeCode;
		}

		_businessTypeCode = businessTypeCode;
	}

	public int getOriginalBusinessTypeCode() {
		return _originalBusinessTypeCode;
	}

	@JSON
	public String getBusinessTypeName() {
		if (_businessTypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessTypeName;
		}
	}

	public void setBusinessTypeName(String businessTypeName) {
		_businessTypeName = businessTypeName;
	}

	@JSON
	public String getBusinessTypeNameVN() {
		if (_businessTypeNameVN == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessTypeNameVN;
		}
	}

	public void setBusinessTypeNameVN(String businessTypeNameVN) {
		_businessTypeNameVN = businessTypeNameVN;
	}

	@JSON
	public int getBusinessTypeOrder() {
		return _businessTypeOrder;
	}

	public void setBusinessTypeOrder(int businessTypeOrder) {
		_businessTypeOrder = businessTypeOrder;
	}

	@JSON
	public int getIsDelete() {
		return _isDelete;
	}

	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	@JSON
	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public Date getRequestedDate() {
		return _requestedDate;
	}

	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	@JSON
	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	public void setSyncVersion(String syncVersion) {
		_syncVersion = syncVersion;
	}

	@JSON
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DmGTBusinessType toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (DmGTBusinessType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					DmGTBusinessType.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		DmGTBusinessTypeImpl dmGTBusinessTypeImpl = new DmGTBusinessTypeImpl();

		dmGTBusinessTypeImpl.setId(getId());
		dmGTBusinessTypeImpl.setBusinessTypeCode(getBusinessTypeCode());
		dmGTBusinessTypeImpl.setBusinessTypeName(getBusinessTypeName());
		dmGTBusinessTypeImpl.setBusinessTypeNameVN(getBusinessTypeNameVN());
		dmGTBusinessTypeImpl.setBusinessTypeOrder(getBusinessTypeOrder());
		dmGTBusinessTypeImpl.setIsDelete(getIsDelete());
		dmGTBusinessTypeImpl.setMarkedAsDelete(getMarkedAsDelete());
		dmGTBusinessTypeImpl.setModifiedDate(getModifiedDate());
		dmGTBusinessTypeImpl.setRequestedDate(getRequestedDate());
		dmGTBusinessTypeImpl.setSyncVersion(getSyncVersion());
		dmGTBusinessTypeImpl.setRemarks(getRemarks());

		dmGTBusinessTypeImpl.resetOriginalValues();

		return dmGTBusinessTypeImpl;
	}

	public int compareTo(DmGTBusinessType dmGTBusinessType) {
		int value = 0;

		if (getId() < dmGTBusinessType.getId()) {
			value = -1;
		}
		else if (getId() > dmGTBusinessType.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		DmGTBusinessType dmGTBusinessType = null;

		try {
			dmGTBusinessType = (DmGTBusinessType)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = dmGTBusinessType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DmGTBusinessTypeModelImpl dmGTBusinessTypeModelImpl = this;

		dmGTBusinessTypeModelImpl._originalBusinessTypeCode = dmGTBusinessTypeModelImpl._businessTypeCode;

		dmGTBusinessTypeModelImpl._setOriginalBusinessTypeCode = false;

		dmGTBusinessTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DmGTBusinessType> toCacheModel() {
		DmGTBusinessTypeCacheModel dmGTBusinessTypeCacheModel = new DmGTBusinessTypeCacheModel();

		dmGTBusinessTypeCacheModel.id = getId();

		dmGTBusinessTypeCacheModel.businessTypeCode = getBusinessTypeCode();

		dmGTBusinessTypeCacheModel.businessTypeName = getBusinessTypeName();

		String businessTypeName = dmGTBusinessTypeCacheModel.businessTypeName;

		if ((businessTypeName != null) && (businessTypeName.length() == 0)) {
			dmGTBusinessTypeCacheModel.businessTypeName = null;
		}

		dmGTBusinessTypeCacheModel.businessTypeNameVN = getBusinessTypeNameVN();

		String businessTypeNameVN = dmGTBusinessTypeCacheModel.businessTypeNameVN;

		if ((businessTypeNameVN != null) && (businessTypeNameVN.length() == 0)) {
			dmGTBusinessTypeCacheModel.businessTypeNameVN = null;
		}

		dmGTBusinessTypeCacheModel.businessTypeOrder = getBusinessTypeOrder();

		dmGTBusinessTypeCacheModel.isDelete = getIsDelete();

		dmGTBusinessTypeCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmGTBusinessTypeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmGTBusinessTypeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			dmGTBusinessTypeCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			dmGTBusinessTypeCacheModel.requestedDate = Long.MIN_VALUE;
		}

		dmGTBusinessTypeCacheModel.syncVersion = getSyncVersion();

		String syncVersion = dmGTBusinessTypeCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			dmGTBusinessTypeCacheModel.syncVersion = null;
		}

		dmGTBusinessTypeCacheModel.remarks = getRemarks();

		String remarks = dmGTBusinessTypeCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			dmGTBusinessTypeCacheModel.remarks = null;
		}

		return dmGTBusinessTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", businessTypeCode=");
		sb.append(getBusinessTypeCode());
		sb.append(", businessTypeName=");
		sb.append(getBusinessTypeName());
		sb.append(", businessTypeNameVN=");
		sb.append(getBusinessTypeNameVN());
		sb.append(", businessTypeOrder=");
		sb.append(getBusinessTypeOrder());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.danhmucgt.model.DmGTBusinessType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessTypeCode</column-name><column-value><![CDATA[");
		sb.append(getBusinessTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessTypeName</column-name><column-value><![CDATA[");
		sb.append(getBusinessTypeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessTypeNameVN</column-name><column-value><![CDATA[");
		sb.append(getBusinessTypeNameVN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessTypeOrder</column-name><column-value><![CDATA[");
		sb.append(getBusinessTypeOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmGTBusinessType.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			DmGTBusinessType.class
		};
	private long _id;
	private int _businessTypeCode;
	private int _originalBusinessTypeCode;
	private boolean _setOriginalBusinessTypeCode;
	private String _businessTypeName;
	private String _businessTypeNameVN;
	private int _businessTypeOrder;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private String _remarks;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private DmGTBusinessType _escapedModelProxy;
}