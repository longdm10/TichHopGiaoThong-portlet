/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.danhmucgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.danhmucgt.model.DmGtRouteConfig;
import vn.gt.dao.danhmucgt.model.DmGtRouteConfigModel;
import vn.gt.dao.danhmucgt.model.DmGtRouteConfigSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the DmGtRouteConfig service. Represents a row in the &quot;DM_GT_ROUTE_CONFIG&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.danhmucgt.model.DmGtRouteConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmGtRouteConfigImpl}.
 * </p>
 *
 * @author win_64
 * @see DmGtRouteConfigImpl
 * @see vn.gt.dao.danhmucgt.model.DmGtRouteConfig
 * @see vn.gt.dao.danhmucgt.model.DmGtRouteConfigModel
 * @generated
 */
@JSON(strict = true)
public class DmGtRouteConfigModelImpl extends BaseModelImpl<DmGtRouteConfig>
	implements DmGtRouteConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm gt route config model instance should use the {@link vn.gt.dao.danhmucgt.model.DmGtRouteConfig} interface instead.
	 */
	public static final String TABLE_NAME = "DM_GT_ROUTE_CONFIG";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RouteCode", Types.VARCHAR },
			{ "OrganizationCode", Types.VARCHAR },
			{ "LocCode", Types.VARCHAR },
			{ "IPName", Types.VARCHAR },
			{ "PortName", Types.VARCHAR },
			{ "LinkAddress", Types.VARCHAR },
			{ "IsDelete", Types.INTEGER },
			{ "MarkedAsDelete", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "SyncVersion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_GT_ROUTE_CONFIG (ID LONG not null primary key,RouteCode VARCHAR(75) null,OrganizationCode VARCHAR(75) null,LocCode VARCHAR(75) null,IPName VARCHAR(75) null,PortName VARCHAR(75) null,LinkAddress VARCHAR(75) null,IsDelete INTEGER,MarkedAsDelete INTEGER,ModifiedDate DATE null,RequestedDate DATE null,SyncVersion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_GT_ROUTE_CONFIG";
	public static final String ORDER_BY_JPQL = " ORDER BY dmGtRouteConfig.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_GT_ROUTE_CONFIG.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.danhmucgt.model.DmGtRouteConfig"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.danhmucgt.model.DmGtRouteConfig"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.danhmucgt.model.DmGtRouteConfig"),
			true);
	public static long ISDELETE_COLUMN_BITMASK = 1L;
	public static long ROUTECODE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DmGtRouteConfig toModel(DmGtRouteConfigSoap soapModel) {
		DmGtRouteConfig model = new DmGtRouteConfigImpl();

		model.setId(soapModel.getId());
		model.setRouteCode(soapModel.getRouteCode());
		model.setOrganizationCode(soapModel.getOrganizationCode());
		model.setLocCode(soapModel.getLocCode());
		model.setIpName(soapModel.getIpName());
		model.setPortName(soapModel.getPortName());
		model.setLinkAddress(soapModel.getLinkAddress());
		model.setIsDelete(soapModel.getIsDelete());
		model.setMarkedAsDelete(soapModel.getMarkedAsDelete());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRequestedDate(soapModel.getRequestedDate());
		model.setSyncVersion(soapModel.getSyncVersion());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DmGtRouteConfig> toModels(
		DmGtRouteConfigSoap[] soapModels) {
		List<DmGtRouteConfig> models = new ArrayList<DmGtRouteConfig>(soapModels.length);

		for (DmGtRouteConfigSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.danhmucgt.model.DmGtRouteConfig"));

	public DmGtRouteConfigModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return DmGtRouteConfig.class;
	}

	public String getModelClassName() {
		return DmGtRouteConfig.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getRouteCode() {
		if (_routeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _routeCode;
		}
	}

	public void setRouteCode(String routeCode) {
		_columnBitmask |= ROUTECODE_COLUMN_BITMASK;

		if (_originalRouteCode == null) {
			_originalRouteCode = _routeCode;
		}

		_routeCode = routeCode;
	}

	public String getOriginalRouteCode() {
		return GetterUtil.getString(_originalRouteCode);
	}

	@JSON
	public String getOrganizationCode() {
		if (_organizationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _organizationCode;
		}
	}

	public void setOrganizationCode(String organizationCode) {
		_organizationCode = organizationCode;
	}

	@JSON
	public String getLocCode() {
		if (_locCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _locCode;
		}
	}

	public void setLocCode(String locCode) {
		_locCode = locCode;
	}

	@JSON
	public String getIpName() {
		if (_ipName == null) {
			return StringPool.BLANK;
		}
		else {
			return _ipName;
		}
	}

	public void setIpName(String ipName) {
		_ipName = ipName;
	}

	@JSON
	public String getPortName() {
		if (_portName == null) {
			return StringPool.BLANK;
		}
		else {
			return _portName;
		}
	}

	public void setPortName(String portName) {
		_portName = portName;
	}

	@JSON
	public String getLinkAddress() {
		if (_linkAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _linkAddress;
		}
	}

	public void setLinkAddress(String linkAddress) {
		_linkAddress = linkAddress;
	}

	@JSON
	public int getIsDelete() {
		return _isDelete;
	}

	public void setIsDelete(int isDelete) {
		_columnBitmask |= ISDELETE_COLUMN_BITMASK;

		if (!_setOriginalIsDelete) {
			_setOriginalIsDelete = true;

			_originalIsDelete = _isDelete;
		}

		_isDelete = isDelete;
	}

	public int getOriginalIsDelete() {
		return _originalIsDelete;
	}

	@JSON
	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public Date getRequestedDate() {
		return _requestedDate;
	}

	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	@JSON
	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	public void setSyncVersion(String syncVersion) {
		_syncVersion = syncVersion;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DmGtRouteConfig toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (DmGtRouteConfig)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					DmGtRouteConfig.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		DmGtRouteConfigImpl dmGtRouteConfigImpl = new DmGtRouteConfigImpl();

		dmGtRouteConfigImpl.setId(getId());
		dmGtRouteConfigImpl.setRouteCode(getRouteCode());
		dmGtRouteConfigImpl.setOrganizationCode(getOrganizationCode());
		dmGtRouteConfigImpl.setLocCode(getLocCode());
		dmGtRouteConfigImpl.setIpName(getIpName());
		dmGtRouteConfigImpl.setPortName(getPortName());
		dmGtRouteConfigImpl.setLinkAddress(getLinkAddress());
		dmGtRouteConfigImpl.setIsDelete(getIsDelete());
		dmGtRouteConfigImpl.setMarkedAsDelete(getMarkedAsDelete());
		dmGtRouteConfigImpl.setModifiedDate(getModifiedDate());
		dmGtRouteConfigImpl.setRequestedDate(getRequestedDate());
		dmGtRouteConfigImpl.setSyncVersion(getSyncVersion());

		dmGtRouteConfigImpl.resetOriginalValues();

		return dmGtRouteConfigImpl;
	}

	public int compareTo(DmGtRouteConfig dmGtRouteConfig) {
		int value = 0;

		if (getId() < dmGtRouteConfig.getId()) {
			value = -1;
		}
		else if (getId() > dmGtRouteConfig.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		DmGtRouteConfig dmGtRouteConfig = null;

		try {
			dmGtRouteConfig = (DmGtRouteConfig)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = dmGtRouteConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DmGtRouteConfigModelImpl dmGtRouteConfigModelImpl = this;

		dmGtRouteConfigModelImpl._originalRouteCode = dmGtRouteConfigModelImpl._routeCode;

		dmGtRouteConfigModelImpl._originalIsDelete = dmGtRouteConfigModelImpl._isDelete;

		dmGtRouteConfigModelImpl._setOriginalIsDelete = false;

		dmGtRouteConfigModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DmGtRouteConfig> toCacheModel() {
		DmGtRouteConfigCacheModel dmGtRouteConfigCacheModel = new DmGtRouteConfigCacheModel();

		dmGtRouteConfigCacheModel.id = getId();

		dmGtRouteConfigCacheModel.routeCode = getRouteCode();

		String routeCode = dmGtRouteConfigCacheModel.routeCode;

		if ((routeCode != null) && (routeCode.length() == 0)) {
			dmGtRouteConfigCacheModel.routeCode = null;
		}

		dmGtRouteConfigCacheModel.organizationCode = getOrganizationCode();

		String organizationCode = dmGtRouteConfigCacheModel.organizationCode;

		if ((organizationCode != null) && (organizationCode.length() == 0)) {
			dmGtRouteConfigCacheModel.organizationCode = null;
		}

		dmGtRouteConfigCacheModel.locCode = getLocCode();

		String locCode = dmGtRouteConfigCacheModel.locCode;

		if ((locCode != null) && (locCode.length() == 0)) {
			dmGtRouteConfigCacheModel.locCode = null;
		}

		dmGtRouteConfigCacheModel.ipName = getIpName();

		String ipName = dmGtRouteConfigCacheModel.ipName;

		if ((ipName != null) && (ipName.length() == 0)) {
			dmGtRouteConfigCacheModel.ipName = null;
		}

		dmGtRouteConfigCacheModel.portName = getPortName();

		String portName = dmGtRouteConfigCacheModel.portName;

		if ((portName != null) && (portName.length() == 0)) {
			dmGtRouteConfigCacheModel.portName = null;
		}

		dmGtRouteConfigCacheModel.linkAddress = getLinkAddress();

		String linkAddress = dmGtRouteConfigCacheModel.linkAddress;

		if ((linkAddress != null) && (linkAddress.length() == 0)) {
			dmGtRouteConfigCacheModel.linkAddress = null;
		}

		dmGtRouteConfigCacheModel.isDelete = getIsDelete();

		dmGtRouteConfigCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmGtRouteConfigCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmGtRouteConfigCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			dmGtRouteConfigCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			dmGtRouteConfigCacheModel.requestedDate = Long.MIN_VALUE;
		}

		dmGtRouteConfigCacheModel.syncVersion = getSyncVersion();

		String syncVersion = dmGtRouteConfigCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			dmGtRouteConfigCacheModel.syncVersion = null;
		}

		return dmGtRouteConfigCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", routeCode=");
		sb.append(getRouteCode());
		sb.append(", organizationCode=");
		sb.append(getOrganizationCode());
		sb.append(", locCode=");
		sb.append(getLocCode());
		sb.append(", ipName=");
		sb.append(getIpName());
		sb.append(", portName=");
		sb.append(getPortName());
		sb.append(", linkAddress=");
		sb.append(getLinkAddress());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.danhmucgt.model.DmGtRouteConfig");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>routeCode</column-name><column-value><![CDATA[");
		sb.append(getRouteCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationCode</column-name><column-value><![CDATA[");
		sb.append(getOrganizationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locCode</column-name><column-value><![CDATA[");
		sb.append(getLocCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ipName</column-name><column-value><![CDATA[");
		sb.append(getIpName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portName</column-name><column-value><![CDATA[");
		sb.append(getPortName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkAddress</column-name><column-value><![CDATA[");
		sb.append(getLinkAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmGtRouteConfig.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			DmGtRouteConfig.class
		};
	private long _id;
	private String _routeCode;
	private String _originalRouteCode;
	private String _organizationCode;
	private String _locCode;
	private String _ipName;
	private String _portName;
	private String _linkAddress;
	private int _isDelete;
	private int _originalIsDelete;
	private boolean _setOriginalIsDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private DmGtRouteConfig _escapedModelProxy;
}