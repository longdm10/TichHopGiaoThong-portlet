/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.danhmucgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.danhmucgt.model.DmMinistry;
import vn.gt.dao.danhmucgt.model.DmMinistryModel;
import vn.gt.dao.danhmucgt.model.DmMinistrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the DmMinistry service. Represents a row in the &quot;DM_MINISTRY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.danhmucgt.model.DmMinistryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmMinistryImpl}.
 * </p>
 *
 * @author win_64
 * @see DmMinistryImpl
 * @see vn.gt.dao.danhmucgt.model.DmMinistry
 * @see vn.gt.dao.danhmucgt.model.DmMinistryModel
 * @generated
 */
@JSON(strict = true)
public class DmMinistryModelImpl extends BaseModelImpl<DmMinistry>
	implements DmMinistryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm ministry model instance should use the {@link vn.gt.dao.danhmucgt.model.DmMinistry} interface instead.
	 */
	public static final String TABLE_NAME = "DM_MINISTRY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "MinistryCode", Types.VARCHAR },
			{ "MinistryName", Types.VARCHAR },
			{ "MinistryNameVN", Types.VARCHAR },
			{ "MinistryOrder", Types.INTEGER },
			{ "IsDelete", Types.INTEGER },
			{ "MarkedAsDelete", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "SyncVersion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_MINISTRY (ID LONG not null primary key,MinistryCode VARCHAR(75) null,MinistryName VARCHAR(75) null,MinistryNameVN VARCHAR(75) null,MinistryOrder INTEGER,IsDelete INTEGER,MarkedAsDelete INTEGER,ModifiedDate DATE null,RequestedDate DATE null,SyncVersion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_MINISTRY";
	public static final String ORDER_BY_JPQL = " ORDER BY dmMinistry.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_MINISTRY.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.danhmucgt.model.DmMinistry"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.danhmucgt.model.DmMinistry"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.danhmucgt.model.DmMinistry"),
			true);
	public static long MINISTRYCODE_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DmMinistry toModel(DmMinistrySoap soapModel) {
		DmMinistry model = new DmMinistryImpl();

		model.setId(soapModel.getId());
		model.setMinistryCode(soapModel.getMinistryCode());
		model.setMinistryName(soapModel.getMinistryName());
		model.setMinistryNameVN(soapModel.getMinistryNameVN());
		model.setMinistryOrder(soapModel.getMinistryOrder());
		model.setIsDelete(soapModel.getIsDelete());
		model.setMarkedAsDelete(soapModel.getMarkedAsDelete());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRequestedDate(soapModel.getRequestedDate());
		model.setSyncVersion(soapModel.getSyncVersion());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DmMinistry> toModels(DmMinistrySoap[] soapModels) {
		List<DmMinistry> models = new ArrayList<DmMinistry>(soapModels.length);

		for (DmMinistrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.danhmucgt.model.DmMinistry"));

	public DmMinistryModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return DmMinistry.class;
	}

	public String getModelClassName() {
		return DmMinistry.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getMinistryCode() {
		if (_ministryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _ministryCode;
		}
	}

	public void setMinistryCode(String ministryCode) {
		_columnBitmask |= MINISTRYCODE_COLUMN_BITMASK;

		if (_originalMinistryCode == null) {
			_originalMinistryCode = _ministryCode;
		}

		_ministryCode = ministryCode;
	}

	public String getOriginalMinistryCode() {
		return GetterUtil.getString(_originalMinistryCode);
	}

	@JSON
	public String getMinistryName() {
		if (_ministryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _ministryName;
		}
	}

	public void setMinistryName(String ministryName) {
		_ministryName = ministryName;
	}

	@JSON
	public String getMinistryNameVN() {
		if (_ministryNameVN == null) {
			return StringPool.BLANK;
		}
		else {
			return _ministryNameVN;
		}
	}

	public void setMinistryNameVN(String ministryNameVN) {
		_ministryNameVN = ministryNameVN;
	}

	@JSON
	public int getMinistryOrder() {
		return _ministryOrder;
	}

	public void setMinistryOrder(int ministryOrder) {
		_ministryOrder = ministryOrder;
	}

	@JSON
	public int getIsDelete() {
		return _isDelete;
	}

	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	@JSON
	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public Date getRequestedDate() {
		return _requestedDate;
	}

	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	@JSON
	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	public void setSyncVersion(String syncVersion) {
		_syncVersion = syncVersion;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DmMinistry toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (DmMinistry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					DmMinistry.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		DmMinistryImpl dmMinistryImpl = new DmMinistryImpl();

		dmMinistryImpl.setId(getId());
		dmMinistryImpl.setMinistryCode(getMinistryCode());
		dmMinistryImpl.setMinistryName(getMinistryName());
		dmMinistryImpl.setMinistryNameVN(getMinistryNameVN());
		dmMinistryImpl.setMinistryOrder(getMinistryOrder());
		dmMinistryImpl.setIsDelete(getIsDelete());
		dmMinistryImpl.setMarkedAsDelete(getMarkedAsDelete());
		dmMinistryImpl.setModifiedDate(getModifiedDate());
		dmMinistryImpl.setRequestedDate(getRequestedDate());
		dmMinistryImpl.setSyncVersion(getSyncVersion());

		dmMinistryImpl.resetOriginalValues();

		return dmMinistryImpl;
	}

	public int compareTo(DmMinistry dmMinistry) {
		int value = 0;

		if (getId() < dmMinistry.getId()) {
			value = -1;
		}
		else if (getId() > dmMinistry.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		DmMinistry dmMinistry = null;

		try {
			dmMinistry = (DmMinistry)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = dmMinistry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DmMinistryModelImpl dmMinistryModelImpl = this;

		dmMinistryModelImpl._originalMinistryCode = dmMinistryModelImpl._ministryCode;

		dmMinistryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DmMinistry> toCacheModel() {
		DmMinistryCacheModel dmMinistryCacheModel = new DmMinistryCacheModel();

		dmMinistryCacheModel.id = getId();

		dmMinistryCacheModel.ministryCode = getMinistryCode();

		String ministryCode = dmMinistryCacheModel.ministryCode;

		if ((ministryCode != null) && (ministryCode.length() == 0)) {
			dmMinistryCacheModel.ministryCode = null;
		}

		dmMinistryCacheModel.ministryName = getMinistryName();

		String ministryName = dmMinistryCacheModel.ministryName;

		if ((ministryName != null) && (ministryName.length() == 0)) {
			dmMinistryCacheModel.ministryName = null;
		}

		dmMinistryCacheModel.ministryNameVN = getMinistryNameVN();

		String ministryNameVN = dmMinistryCacheModel.ministryNameVN;

		if ((ministryNameVN != null) && (ministryNameVN.length() == 0)) {
			dmMinistryCacheModel.ministryNameVN = null;
		}

		dmMinistryCacheModel.ministryOrder = getMinistryOrder();

		dmMinistryCacheModel.isDelete = getIsDelete();

		dmMinistryCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmMinistryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmMinistryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			dmMinistryCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			dmMinistryCacheModel.requestedDate = Long.MIN_VALUE;
		}

		dmMinistryCacheModel.syncVersion = getSyncVersion();

		String syncVersion = dmMinistryCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			dmMinistryCacheModel.syncVersion = null;
		}

		return dmMinistryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", ministryCode=");
		sb.append(getMinistryCode());
		sb.append(", ministryName=");
		sb.append(getMinistryName());
		sb.append(", ministryNameVN=");
		sb.append(getMinistryNameVN());
		sb.append(", ministryOrder=");
		sb.append(getMinistryOrder());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.danhmucgt.model.DmMinistry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ministryCode</column-name><column-value><![CDATA[");
		sb.append(getMinistryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ministryName</column-name><column-value><![CDATA[");
		sb.append(getMinistryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ministryNameVN</column-name><column-value><![CDATA[");
		sb.append(getMinistryNameVN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ministryOrder</column-name><column-value><![CDATA[");
		sb.append(getMinistryOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmMinistry.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			DmMinistry.class
		};
	private long _id;
	private String _ministryCode;
	private String _originalMinistryCode;
	private String _ministryName;
	private String _ministryNameVN;
	private int _ministryOrder;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private DmMinistry _escapedModelProxy;
}