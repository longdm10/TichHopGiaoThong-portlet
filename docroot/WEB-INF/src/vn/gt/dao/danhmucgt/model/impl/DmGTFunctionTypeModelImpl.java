/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.danhmucgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.danhmucgt.model.DmGTFunctionType;
import vn.gt.dao.danhmucgt.model.DmGTFunctionTypeModel;
import vn.gt.dao.danhmucgt.model.DmGTFunctionTypeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the DmGTFunctionType service. Represents a row in the &quot;DM_GT_FUNCTION_TYPE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.danhmucgt.model.DmGTFunctionTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmGTFunctionTypeImpl}.
 * </p>
 *
 * @author win_64
 * @see DmGTFunctionTypeImpl
 * @see vn.gt.dao.danhmucgt.model.DmGTFunctionType
 * @see vn.gt.dao.danhmucgt.model.DmGTFunctionTypeModel
 * @generated
 */
@JSON(strict = true)
public class DmGTFunctionTypeModelImpl extends BaseModelImpl<DmGTFunctionType>
	implements DmGTFunctionTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm g t function type model instance should use the {@link vn.gt.dao.danhmucgt.model.DmGTFunctionType} interface instead.
	 */
	public static final String TABLE_NAME = "DM_GT_FUNCTION_TYPE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "FunctionTypeCode", Types.VARCHAR },
			{ "FunctionTypeName", Types.VARCHAR },
			{ "FunctionTypeNameVN", Types.VARCHAR },
			{ "FunctionTypeOrder", Types.INTEGER },
			{ "IsDelete", Types.INTEGER },
			{ "MarkedAsDelete", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "SyncVersion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_GT_FUNCTION_TYPE (id LONG not null primary key,FunctionTypeCode VARCHAR(75) null,FunctionTypeName VARCHAR(75) null,FunctionTypeNameVN VARCHAR(75) null,FunctionTypeOrder INTEGER,IsDelete INTEGER,MarkedAsDelete INTEGER,ModifiedDate DATE null,RequestedDate DATE null,SyncVersion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_GT_FUNCTION_TYPE";
	public static final String ORDER_BY_JPQL = " ORDER BY dmGTFunctionType.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_GT_FUNCTION_TYPE.id ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.danhmucgt.model.DmGTFunctionType"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.danhmucgt.model.DmGTFunctionType"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.danhmucgt.model.DmGTFunctionType"),
			true);
	public static long FUNCTIONTYPECODE_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DmGTFunctionType toModel(DmGTFunctionTypeSoap soapModel) {
		DmGTFunctionType model = new DmGTFunctionTypeImpl();

		model.setId(soapModel.getId());
		model.setFunctionTypeCode(soapModel.getFunctionTypeCode());
		model.setFunctionTypeName(soapModel.getFunctionTypeName());
		model.setFunctionTypeNameVN(soapModel.getFunctionTypeNameVN());
		model.setFunctionTypeOrder(soapModel.getFunctionTypeOrder());
		model.setIsDelete(soapModel.getIsDelete());
		model.setMarkedAsDelete(soapModel.getMarkedAsDelete());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRequestedDate(soapModel.getRequestedDate());
		model.setSyncVersion(soapModel.getSyncVersion());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DmGTFunctionType> toModels(
		DmGTFunctionTypeSoap[] soapModels) {
		List<DmGTFunctionType> models = new ArrayList<DmGTFunctionType>(soapModels.length);

		for (DmGTFunctionTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.danhmucgt.model.DmGTFunctionType"));

	public DmGTFunctionTypeModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return DmGTFunctionType.class;
	}

	public String getModelClassName() {
		return DmGTFunctionType.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getFunctionTypeCode() {
		if (_functionTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _functionTypeCode;
		}
	}

	public void setFunctionTypeCode(String functionTypeCode) {
		_columnBitmask |= FUNCTIONTYPECODE_COLUMN_BITMASK;

		if (_originalFunctionTypeCode == null) {
			_originalFunctionTypeCode = _functionTypeCode;
		}

		_functionTypeCode = functionTypeCode;
	}

	public String getOriginalFunctionTypeCode() {
		return GetterUtil.getString(_originalFunctionTypeCode);
	}

	@JSON
	public String getFunctionTypeName() {
		if (_functionTypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _functionTypeName;
		}
	}

	public void setFunctionTypeName(String functionTypeName) {
		_functionTypeName = functionTypeName;
	}

	@JSON
	public String getFunctionTypeNameVN() {
		if (_functionTypeNameVN == null) {
			return StringPool.BLANK;
		}
		else {
			return _functionTypeNameVN;
		}
	}

	public void setFunctionTypeNameVN(String functionTypeNameVN) {
		_functionTypeNameVN = functionTypeNameVN;
	}

	@JSON
	public int getFunctionTypeOrder() {
		return _functionTypeOrder;
	}

	public void setFunctionTypeOrder(int functionTypeOrder) {
		_functionTypeOrder = functionTypeOrder;
	}

	@JSON
	public int getIsDelete() {
		return _isDelete;
	}

	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	@JSON
	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public Date getRequestedDate() {
		return _requestedDate;
	}

	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	@JSON
	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	public void setSyncVersion(String syncVersion) {
		_syncVersion = syncVersion;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DmGTFunctionType toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (DmGTFunctionType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					DmGTFunctionType.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		DmGTFunctionTypeImpl dmGTFunctionTypeImpl = new DmGTFunctionTypeImpl();

		dmGTFunctionTypeImpl.setId(getId());
		dmGTFunctionTypeImpl.setFunctionTypeCode(getFunctionTypeCode());
		dmGTFunctionTypeImpl.setFunctionTypeName(getFunctionTypeName());
		dmGTFunctionTypeImpl.setFunctionTypeNameVN(getFunctionTypeNameVN());
		dmGTFunctionTypeImpl.setFunctionTypeOrder(getFunctionTypeOrder());
		dmGTFunctionTypeImpl.setIsDelete(getIsDelete());
		dmGTFunctionTypeImpl.setMarkedAsDelete(getMarkedAsDelete());
		dmGTFunctionTypeImpl.setModifiedDate(getModifiedDate());
		dmGTFunctionTypeImpl.setRequestedDate(getRequestedDate());
		dmGTFunctionTypeImpl.setSyncVersion(getSyncVersion());

		dmGTFunctionTypeImpl.resetOriginalValues();

		return dmGTFunctionTypeImpl;
	}

	public int compareTo(DmGTFunctionType dmGTFunctionType) {
		int value = 0;

		if (getId() < dmGTFunctionType.getId()) {
			value = -1;
		}
		else if (getId() > dmGTFunctionType.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		DmGTFunctionType dmGTFunctionType = null;

		try {
			dmGTFunctionType = (DmGTFunctionType)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = dmGTFunctionType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DmGTFunctionTypeModelImpl dmGTFunctionTypeModelImpl = this;

		dmGTFunctionTypeModelImpl._originalFunctionTypeCode = dmGTFunctionTypeModelImpl._functionTypeCode;

		dmGTFunctionTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DmGTFunctionType> toCacheModel() {
		DmGTFunctionTypeCacheModel dmGTFunctionTypeCacheModel = new DmGTFunctionTypeCacheModel();

		dmGTFunctionTypeCacheModel.id = getId();

		dmGTFunctionTypeCacheModel.functionTypeCode = getFunctionTypeCode();

		String functionTypeCode = dmGTFunctionTypeCacheModel.functionTypeCode;

		if ((functionTypeCode != null) && (functionTypeCode.length() == 0)) {
			dmGTFunctionTypeCacheModel.functionTypeCode = null;
		}

		dmGTFunctionTypeCacheModel.functionTypeName = getFunctionTypeName();

		String functionTypeName = dmGTFunctionTypeCacheModel.functionTypeName;

		if ((functionTypeName != null) && (functionTypeName.length() == 0)) {
			dmGTFunctionTypeCacheModel.functionTypeName = null;
		}

		dmGTFunctionTypeCacheModel.functionTypeNameVN = getFunctionTypeNameVN();

		String functionTypeNameVN = dmGTFunctionTypeCacheModel.functionTypeNameVN;

		if ((functionTypeNameVN != null) && (functionTypeNameVN.length() == 0)) {
			dmGTFunctionTypeCacheModel.functionTypeNameVN = null;
		}

		dmGTFunctionTypeCacheModel.functionTypeOrder = getFunctionTypeOrder();

		dmGTFunctionTypeCacheModel.isDelete = getIsDelete();

		dmGTFunctionTypeCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmGTFunctionTypeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmGTFunctionTypeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			dmGTFunctionTypeCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			dmGTFunctionTypeCacheModel.requestedDate = Long.MIN_VALUE;
		}

		dmGTFunctionTypeCacheModel.syncVersion = getSyncVersion();

		String syncVersion = dmGTFunctionTypeCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			dmGTFunctionTypeCacheModel.syncVersion = null;
		}

		return dmGTFunctionTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", functionTypeCode=");
		sb.append(getFunctionTypeCode());
		sb.append(", functionTypeName=");
		sb.append(getFunctionTypeName());
		sb.append(", functionTypeNameVN=");
		sb.append(getFunctionTypeNameVN());
		sb.append(", functionTypeOrder=");
		sb.append(getFunctionTypeOrder());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.danhmucgt.model.DmGTFunctionType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>functionTypeCode</column-name><column-value><![CDATA[");
		sb.append(getFunctionTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>functionTypeName</column-name><column-value><![CDATA[");
		sb.append(getFunctionTypeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>functionTypeNameVN</column-name><column-value><![CDATA[");
		sb.append(getFunctionTypeNameVN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>functionTypeOrder</column-name><column-value><![CDATA[");
		sb.append(getFunctionTypeOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmGTFunctionType.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			DmGTFunctionType.class
		};
	private long _id;
	private String _functionTypeCode;
	private String _originalFunctionTypeCode;
	private String _functionTypeName;
	private String _functionTypeNameVN;
	private int _functionTypeOrder;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private DmGTFunctionType _escapedModelProxy;
}