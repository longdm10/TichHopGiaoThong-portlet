/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.HistoryInterfaceRequest;
import vn.gt.dao.noticeandmessage.model.HistoryInterfaceRequestModel;
import vn.gt.dao.noticeandmessage.model.HistoryInterfaceRequestSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the HistoryInterfaceRequest service. Represents a row in the &quot;HISTORY_INTERFACE_REQUEST&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.HistoryInterfaceRequestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HistoryInterfaceRequestImpl}.
 * </p>
 *
 * @author win_64
 * @see HistoryInterfaceRequestImpl
 * @see vn.gt.dao.noticeandmessage.model.HistoryInterfaceRequest
 * @see vn.gt.dao.noticeandmessage.model.HistoryInterfaceRequestModel
 * @generated
 */
@JSON(strict = true)
public class HistoryInterfaceRequestModelImpl extends BaseModelImpl<HistoryInterfaceRequest>
	implements HistoryInterfaceRequestModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a history interface request model instance should use the {@link vn.gt.dao.noticeandmessage.model.HistoryInterfaceRequest} interface instead.
	 */
	public static final String TABLE_NAME = "HISTORY_INTERFACE_REQUEST";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "OrganizationCode", Types.VARCHAR },
			{ "LocCode", Types.VARCHAR },
			{ "RequestDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "RequestDirection", Types.VARCHAR },
			{ "RequestState", Types.INTEGER },
			{ "RequestResponseTime", Types.TIMESTAMP },
			{ "DocumentType", Types.VARCHAR },
			{ "BusinessType", Types.VARCHAR },
			{ "FunctionType", Types.VARCHAR },
			{ "RequestContent", Types.VARCHAR },
			{ "SenderName", Types.VARCHAR },
			{ "RequestVersion", Types.VARCHAR },
			{ "SenderIdentify", Types.VARCHAR },
			{ "ReceiverName", Types.VARCHAR },
			{ "SendingDate", Types.TIMESTAMP },
			{ "ReceiverIdentify", Types.VARCHAR },
			{ "Remarks", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table HISTORY_INTERFACE_REQUEST (ID LONG not null primary key,RequestCode VARCHAR(75) null,OrganizationCode VARCHAR(75) null,LocCode VARCHAR(75) null,RequestDate DATE null,RequestedDate DATE null,RequestDirection VARCHAR(75) null,RequestState INTEGER,RequestResponseTime DATE null,DocumentType VARCHAR(75) null,BusinessType VARCHAR(75) null,FunctionType VARCHAR(75) null,RequestContent VARCHAR(75) null,SenderName VARCHAR(75) null,RequestVersion VARCHAR(75) null,SenderIdentify VARCHAR(75) null,ReceiverName VARCHAR(75) null,SendingDate DATE null,ReceiverIdentify VARCHAR(75) null,Remarks VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table HISTORY_INTERFACE_REQUEST";
	public static final String ORDER_BY_JPQL = " ORDER BY historyInterfaceRequest.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY HISTORY_INTERFACE_REQUEST.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.HistoryInterfaceRequest"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.HistoryInterfaceRequest"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.HistoryInterfaceRequest"),
			true);
	public static long LOCCODE_COLUMN_BITMASK = 1L;
	public static long ORGANIZATIONCODE_COLUMN_BITMASK = 2L;
	public static long REQUESTCODE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static HistoryInterfaceRequest toModel(
		HistoryInterfaceRequestSoap soapModel) {
		HistoryInterfaceRequest model = new HistoryInterfaceRequestImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setOrganizationCode(soapModel.getOrganizationCode());
		model.setLocCode(soapModel.getLocCode());
		model.setRequestDate(soapModel.getRequestDate());
		model.setRequestedDate(soapModel.getRequestedDate());
		model.setRequestDirection(soapModel.getRequestDirection());
		model.setRequestState(soapModel.getRequestState());
		model.setRequestResponseTime(soapModel.getRequestResponseTime());
		model.setDocumentType(soapModel.getDocumentType());
		model.setBusinessType(soapModel.getBusinessType());
		model.setFunctionType(soapModel.getFunctionType());
		model.setRequestContent(soapModel.getRequestContent());
		model.setSenderName(soapModel.getSenderName());
		model.setRequestVersion(soapModel.getRequestVersion());
		model.setSenderIdentify(soapModel.getSenderIdentify());
		model.setReceiverName(soapModel.getReceiverName());
		model.setSendingDate(soapModel.getSendingDate());
		model.setReceiverIdentify(soapModel.getReceiverIdentify());
		model.setRemarks(soapModel.getRemarks());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<HistoryInterfaceRequest> toModels(
		HistoryInterfaceRequestSoap[] soapModels) {
		List<HistoryInterfaceRequest> models = new ArrayList<HistoryInterfaceRequest>(soapModels.length);

		for (HistoryInterfaceRequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.HistoryInterfaceRequest"));

	public HistoryInterfaceRequestModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return HistoryInterfaceRequest.class;
	}

	public String getModelClassName() {
		return HistoryInterfaceRequest.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	public String getOrganizationCode() {
		if (_organizationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _organizationCode;
		}
	}

	public void setOrganizationCode(String organizationCode) {
		_columnBitmask |= ORGANIZATIONCODE_COLUMN_BITMASK;

		if (_originalOrganizationCode == null) {
			_originalOrganizationCode = _organizationCode;
		}

		_organizationCode = organizationCode;
	}

	public String getOriginalOrganizationCode() {
		return GetterUtil.getString(_originalOrganizationCode);
	}

	@JSON
	public String getLocCode() {
		if (_locCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _locCode;
		}
	}

	public void setLocCode(String locCode) {
		_columnBitmask |= LOCCODE_COLUMN_BITMASK;

		if (_originalLocCode == null) {
			_originalLocCode = _locCode;
		}

		_locCode = locCode;
	}

	public String getOriginalLocCode() {
		return GetterUtil.getString(_originalLocCode);
	}

	@JSON
	public Date getRequestDate() {
		return _requestDate;
	}

	public void setRequestDate(Date requestDate) {
		_requestDate = requestDate;
	}

	@JSON
	public Date getRequestedDate() {
		return _requestedDate;
	}

	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	@JSON
	public String getRequestDirection() {
		if (_requestDirection == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestDirection;
		}
	}

	public void setRequestDirection(String requestDirection) {
		_requestDirection = requestDirection;
	}

	@JSON
	public int getRequestState() {
		return _requestState;
	}

	public void setRequestState(int requestState) {
		_requestState = requestState;
	}

	@JSON
	public Date getRequestResponseTime() {
		return _requestResponseTime;
	}

	public void setRequestResponseTime(Date requestResponseTime) {
		_requestResponseTime = requestResponseTime;
	}

	@JSON
	public String getDocumentType() {
		if (_documentType == null) {
			return StringPool.BLANK;
		}
		else {
			return _documentType;
		}
	}

	public void setDocumentType(String documentType) {
		_documentType = documentType;
	}

	@JSON
	public String getBusinessType() {
		if (_businessType == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessType;
		}
	}

	public void setBusinessType(String businessType) {
		_businessType = businessType;
	}

	@JSON
	public String getFunctionType() {
		if (_functionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _functionType;
		}
	}

	public void setFunctionType(String functionType) {
		_functionType = functionType;
	}

	@JSON
	public String getRequestContent() {
		if (_requestContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestContent;
		}
	}

	public void setRequestContent(String requestContent) {
		_requestContent = requestContent;
	}

	@JSON
	public String getSenderName() {
		if (_senderName == null) {
			return StringPool.BLANK;
		}
		else {
			return _senderName;
		}
	}

	public void setSenderName(String senderName) {
		_senderName = senderName;
	}

	@JSON
	public String getRequestVersion() {
		if (_requestVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestVersion;
		}
	}

	public void setRequestVersion(String requestVersion) {
		_requestVersion = requestVersion;
	}

	@JSON
	public String getSenderIdentify() {
		if (_senderIdentify == null) {
			return StringPool.BLANK;
		}
		else {
			return _senderIdentify;
		}
	}

	public void setSenderIdentify(String senderIdentify) {
		_senderIdentify = senderIdentify;
	}

	@JSON
	public String getReceiverName() {
		if (_receiverName == null) {
			return StringPool.BLANK;
		}
		else {
			return _receiverName;
		}
	}

	public void setReceiverName(String receiverName) {
		_receiverName = receiverName;
	}

	@JSON
	public Date getSendingDate() {
		return _sendingDate;
	}

	public void setSendingDate(Date sendingDate) {
		_sendingDate = sendingDate;
	}

	@JSON
	public String getReceiverIdentify() {
		if (_receiverIdentify == null) {
			return StringPool.BLANK;
		}
		else {
			return _receiverIdentify;
		}
	}

	public void setReceiverIdentify(String receiverIdentify) {
		_receiverIdentify = receiverIdentify;
	}

	@JSON
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public HistoryInterfaceRequest toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (HistoryInterfaceRequest)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					HistoryInterfaceRequest.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		HistoryInterfaceRequestImpl historyInterfaceRequestImpl = new HistoryInterfaceRequestImpl();

		historyInterfaceRequestImpl.setId(getId());
		historyInterfaceRequestImpl.setRequestCode(getRequestCode());
		historyInterfaceRequestImpl.setOrganizationCode(getOrganizationCode());
		historyInterfaceRequestImpl.setLocCode(getLocCode());
		historyInterfaceRequestImpl.setRequestDate(getRequestDate());
		historyInterfaceRequestImpl.setRequestedDate(getRequestedDate());
		historyInterfaceRequestImpl.setRequestDirection(getRequestDirection());
		historyInterfaceRequestImpl.setRequestState(getRequestState());
		historyInterfaceRequestImpl.setRequestResponseTime(getRequestResponseTime());
		historyInterfaceRequestImpl.setDocumentType(getDocumentType());
		historyInterfaceRequestImpl.setBusinessType(getBusinessType());
		historyInterfaceRequestImpl.setFunctionType(getFunctionType());
		historyInterfaceRequestImpl.setRequestContent(getRequestContent());
		historyInterfaceRequestImpl.setSenderName(getSenderName());
		historyInterfaceRequestImpl.setRequestVersion(getRequestVersion());
		historyInterfaceRequestImpl.setSenderIdentify(getSenderIdentify());
		historyInterfaceRequestImpl.setReceiverName(getReceiverName());
		historyInterfaceRequestImpl.setSendingDate(getSendingDate());
		historyInterfaceRequestImpl.setReceiverIdentify(getReceiverIdentify());
		historyInterfaceRequestImpl.setRemarks(getRemarks());

		historyInterfaceRequestImpl.resetOriginalValues();

		return historyInterfaceRequestImpl;
	}

	public int compareTo(HistoryInterfaceRequest historyInterfaceRequest) {
		int value = 0;

		if (getId() < historyInterfaceRequest.getId()) {
			value = -1;
		}
		else if (getId() > historyInterfaceRequest.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		HistoryInterfaceRequest historyInterfaceRequest = null;

		try {
			historyInterfaceRequest = (HistoryInterfaceRequest)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = historyInterfaceRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		HistoryInterfaceRequestModelImpl historyInterfaceRequestModelImpl = this;

		historyInterfaceRequestModelImpl._originalRequestCode = historyInterfaceRequestModelImpl._requestCode;

		historyInterfaceRequestModelImpl._originalOrganizationCode = historyInterfaceRequestModelImpl._organizationCode;

		historyInterfaceRequestModelImpl._originalLocCode = historyInterfaceRequestModelImpl._locCode;

		historyInterfaceRequestModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<HistoryInterfaceRequest> toCacheModel() {
		HistoryInterfaceRequestCacheModel historyInterfaceRequestCacheModel = new HistoryInterfaceRequestCacheModel();

		historyInterfaceRequestCacheModel.id = getId();

		historyInterfaceRequestCacheModel.requestCode = getRequestCode();

		String requestCode = historyInterfaceRequestCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			historyInterfaceRequestCacheModel.requestCode = null;
		}

		historyInterfaceRequestCacheModel.organizationCode = getOrganizationCode();

		String organizationCode = historyInterfaceRequestCacheModel.organizationCode;

		if ((organizationCode != null) && (organizationCode.length() == 0)) {
			historyInterfaceRequestCacheModel.organizationCode = null;
		}

		historyInterfaceRequestCacheModel.locCode = getLocCode();

		String locCode = historyInterfaceRequestCacheModel.locCode;

		if ((locCode != null) && (locCode.length() == 0)) {
			historyInterfaceRequestCacheModel.locCode = null;
		}

		Date requestDate = getRequestDate();

		if (requestDate != null) {
			historyInterfaceRequestCacheModel.requestDate = requestDate.getTime();
		}
		else {
			historyInterfaceRequestCacheModel.requestDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			historyInterfaceRequestCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			historyInterfaceRequestCacheModel.requestedDate = Long.MIN_VALUE;
		}

		historyInterfaceRequestCacheModel.requestDirection = getRequestDirection();

		String requestDirection = historyInterfaceRequestCacheModel.requestDirection;

		if ((requestDirection != null) && (requestDirection.length() == 0)) {
			historyInterfaceRequestCacheModel.requestDirection = null;
		}

		historyInterfaceRequestCacheModel.requestState = getRequestState();

		Date requestResponseTime = getRequestResponseTime();

		if (requestResponseTime != null) {
			historyInterfaceRequestCacheModel.requestResponseTime = requestResponseTime.getTime();
		}
		else {
			historyInterfaceRequestCacheModel.requestResponseTime = Long.MIN_VALUE;
		}

		historyInterfaceRequestCacheModel.documentType = getDocumentType();

		String documentType = historyInterfaceRequestCacheModel.documentType;

		if ((documentType != null) && (documentType.length() == 0)) {
			historyInterfaceRequestCacheModel.documentType = null;
		}

		historyInterfaceRequestCacheModel.businessType = getBusinessType();

		String businessType = historyInterfaceRequestCacheModel.businessType;

		if ((businessType != null) && (businessType.length() == 0)) {
			historyInterfaceRequestCacheModel.businessType = null;
		}

		historyInterfaceRequestCacheModel.functionType = getFunctionType();

		String functionType = historyInterfaceRequestCacheModel.functionType;

		if ((functionType != null) && (functionType.length() == 0)) {
			historyInterfaceRequestCacheModel.functionType = null;
		}

		historyInterfaceRequestCacheModel.requestContent = getRequestContent();

		String requestContent = historyInterfaceRequestCacheModel.requestContent;

		if ((requestContent != null) && (requestContent.length() == 0)) {
			historyInterfaceRequestCacheModel.requestContent = null;
		}

		historyInterfaceRequestCacheModel.senderName = getSenderName();

		String senderName = historyInterfaceRequestCacheModel.senderName;

		if ((senderName != null) && (senderName.length() == 0)) {
			historyInterfaceRequestCacheModel.senderName = null;
		}

		historyInterfaceRequestCacheModel.requestVersion = getRequestVersion();

		String requestVersion = historyInterfaceRequestCacheModel.requestVersion;

		if ((requestVersion != null) && (requestVersion.length() == 0)) {
			historyInterfaceRequestCacheModel.requestVersion = null;
		}

		historyInterfaceRequestCacheModel.senderIdentify = getSenderIdentify();

		String senderIdentify = historyInterfaceRequestCacheModel.senderIdentify;

		if ((senderIdentify != null) && (senderIdentify.length() == 0)) {
			historyInterfaceRequestCacheModel.senderIdentify = null;
		}

		historyInterfaceRequestCacheModel.receiverName = getReceiverName();

		String receiverName = historyInterfaceRequestCacheModel.receiverName;

		if ((receiverName != null) && (receiverName.length() == 0)) {
			historyInterfaceRequestCacheModel.receiverName = null;
		}

		Date sendingDate = getSendingDate();

		if (sendingDate != null) {
			historyInterfaceRequestCacheModel.sendingDate = sendingDate.getTime();
		}
		else {
			historyInterfaceRequestCacheModel.sendingDate = Long.MIN_VALUE;
		}

		historyInterfaceRequestCacheModel.receiverIdentify = getReceiverIdentify();

		String receiverIdentify = historyInterfaceRequestCacheModel.receiverIdentify;

		if ((receiverIdentify != null) && (receiverIdentify.length() == 0)) {
			historyInterfaceRequestCacheModel.receiverIdentify = null;
		}

		historyInterfaceRequestCacheModel.remarks = getRemarks();

		String remarks = historyInterfaceRequestCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			historyInterfaceRequestCacheModel.remarks = null;
		}

		return historyInterfaceRequestCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", organizationCode=");
		sb.append(getOrganizationCode());
		sb.append(", locCode=");
		sb.append(getLocCode());
		sb.append(", requestDate=");
		sb.append(getRequestDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", requestDirection=");
		sb.append(getRequestDirection());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append(", requestResponseTime=");
		sb.append(getRequestResponseTime());
		sb.append(", documentType=");
		sb.append(getDocumentType());
		sb.append(", businessType=");
		sb.append(getBusinessType());
		sb.append(", functionType=");
		sb.append(getFunctionType());
		sb.append(", requestContent=");
		sb.append(getRequestContent());
		sb.append(", senderName=");
		sb.append(getSenderName());
		sb.append(", requestVersion=");
		sb.append(getRequestVersion());
		sb.append(", senderIdentify=");
		sb.append(getSenderIdentify());
		sb.append(", receiverName=");
		sb.append(getReceiverName());
		sb.append(", sendingDate=");
		sb.append(getSendingDate());
		sb.append(", receiverIdentify=");
		sb.append(getReceiverIdentify());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.HistoryInterfaceRequest");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationCode</column-name><column-value><![CDATA[");
		sb.append(getOrganizationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locCode</column-name><column-value><![CDATA[");
		sb.append(getLocCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestDate</column-name><column-value><![CDATA[");
		sb.append(getRequestDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestDirection</column-name><column-value><![CDATA[");
		sb.append(getRequestDirection());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestResponseTime</column-name><column-value><![CDATA[");
		sb.append(getRequestResponseTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentType</column-name><column-value><![CDATA[");
		sb.append(getDocumentType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessType</column-name><column-value><![CDATA[");
		sb.append(getBusinessType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>functionType</column-name><column-value><![CDATA[");
		sb.append(getFunctionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestContent</column-name><column-value><![CDATA[");
		sb.append(getRequestContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>senderName</column-name><column-value><![CDATA[");
		sb.append(getSenderName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestVersion</column-name><column-value><![CDATA[");
		sb.append(getRequestVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>senderIdentify</column-name><column-value><![CDATA[");
		sb.append(getSenderIdentify());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receiverName</column-name><column-value><![CDATA[");
		sb.append(getReceiverName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendingDate</column-name><column-value><![CDATA[");
		sb.append(getSendingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receiverIdentify</column-name><column-value><![CDATA[");
		sb.append(getReceiverIdentify());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = HistoryInterfaceRequest.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			HistoryInterfaceRequest.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private String _organizationCode;
	private String _originalOrganizationCode;
	private String _locCode;
	private String _originalLocCode;
	private Date _requestDate;
	private Date _requestedDate;
	private String _requestDirection;
	private int _requestState;
	private Date _requestResponseTime;
	private String _documentType;
	private String _businessType;
	private String _functionType;
	private String _requestContent;
	private String _senderName;
	private String _requestVersion;
	private String _senderIdentify;
	private String _receiverName;
	private Date _sendingDate;
	private String _receiverIdentify;
	private String _remarks;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private HistoryInterfaceRequest _escapedModelProxy;
}