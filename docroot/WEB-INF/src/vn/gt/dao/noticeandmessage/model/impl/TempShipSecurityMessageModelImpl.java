/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.TempShipSecurityMessage;
import vn.gt.dao.noticeandmessage.model.TempShipSecurityMessageModel;
import vn.gt.dao.noticeandmessage.model.TempShipSecurityMessageSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the TempShipSecurityMessage service. Represents a row in the &quot;TEMP_SHIP_SECURITY_MESSAGE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.TempShipSecurityMessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempShipSecurityMessageImpl}.
 * </p>
 *
 * @author win_64
 * @see TempShipSecurityMessageImpl
 * @see vn.gt.dao.noticeandmessage.model.TempShipSecurityMessage
 * @see vn.gt.dao.noticeandmessage.model.TempShipSecurityMessageModel
 * @generated
 */
@JSON(strict = true)
public class TempShipSecurityMessageModelImpl extends BaseModelImpl<TempShipSecurityMessage>
	implements TempShipSecurityMessageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp ship security message model instance should use the {@link vn.gt.dao.noticeandmessage.model.TempShipSecurityMessage} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_SHIP_SECURITY_MESSAGE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "RequestState", Types.INTEGER },
			{ "DocumentYear", Types.INTEGER },
			{ "ShipSecurityCode", Types.VARCHAR },
			{ "DocumentName", Types.BIGINT },
			{ "UserCreated", Types.VARCHAR },
			{ "ShipAgencyCode", Types.VARCHAR },
			{ "NameOfShipAgent", Types.VARCHAR },
			{ "ShipName", Types.VARCHAR },
			{ "ShipTypeCode", Types.VARCHAR },
			{ "StateCode", Types.VARCHAR },
			{ "ShipCaptain", Types.VARCHAR },
			{ "IMO", Types.VARCHAR },
			{ "GRT", Types.DOUBLE },
			{ "UnitGRT", Types.VARCHAR },
			{ "CrewNumber", Types.BIGINT },
			{ "ArrivalDate", Types.TIMESTAMP },
			{ "PurposeCode", Types.VARCHAR },
			{ "PurposeSpecified", Types.VARCHAR },
			{ "PortRegionCode", Types.VARCHAR },
			{ "PortWharfCode", Types.VARCHAR },
			{ "ShipAgencyPhone", Types.VARCHAR },
			{ "ShipAgencyFax", Types.VARCHAR },
			{ "IsShipSecurity", Types.INTEGER },
			{ "NameOfISSC", Types.VARCHAR },
			{ "DateOfISSC", Types.TIMESTAMP },
			{ "DateOfExpiryISSC", Types.TIMESTAMP },
			{ "SecurityLevelCode", Types.VARCHAR },
			{ "SecurityFromDate", Types.TIMESTAMP },
			{ "IsAdditionalSecurityMeasures", Types.INTEGER },
			{ "AdditionalSecurityDetail", Types.VARCHAR },
			{ "IsMaintainSecurity", Types.INTEGER },
			{ "MaintainSecurityDetail", Types.VARCHAR },
			{ "Latitude", Types.VARCHAR },
			{ "Longitude", Types.VARCHAR },
			{ "HasShipSecurityPortItems", Types.INTEGER },
			{ "SignPlace", Types.VARCHAR },
			{ "SignDate", Types.TIMESTAMP },
			{ "MasterSigned", Types.INTEGER },
			{ "MasterSignedImage", Types.INTEGER },
			{ "CallSign", Types.VARCHAR },
			{ "ArrivalPortCode", Types.VARCHAR },
			{ "PortHarbourCode", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_SHIP_SECURITY_MESSAGE (ID LONG not null primary key,RequestCode VARCHAR(75) null,RequestState INTEGER,DocumentYear INTEGER,ShipSecurityCode VARCHAR(75) null,DocumentName LONG,UserCreated VARCHAR(75) null,ShipAgencyCode VARCHAR(75) null,NameOfShipAgent VARCHAR(75) null,ShipName VARCHAR(75) null,ShipTypeCode VARCHAR(75) null,StateCode VARCHAR(75) null,ShipCaptain VARCHAR(75) null,IMO VARCHAR(75) null,GRT DOUBLE,UnitGRT VARCHAR(75) null,CrewNumber LONG,ArrivalDate DATE null,PurposeCode VARCHAR(75) null,PurposeSpecified VARCHAR(75) null,PortRegionCode VARCHAR(75) null,PortWharfCode VARCHAR(75) null,ShipAgencyPhone VARCHAR(75) null,ShipAgencyFax VARCHAR(75) null,IsShipSecurity INTEGER,NameOfISSC VARCHAR(75) null,DateOfISSC DATE null,DateOfExpiryISSC DATE null,SecurityLevelCode VARCHAR(75) null,SecurityFromDate DATE null,IsAdditionalSecurityMeasures INTEGER,AdditionalSecurityDetail VARCHAR(75) null,IsMaintainSecurity INTEGER,MaintainSecurityDetail VARCHAR(75) null,Latitude VARCHAR(75) null,Longitude VARCHAR(75) null,HasShipSecurityPortItems INTEGER,SignPlace VARCHAR(75) null,SignDate DATE null,MasterSigned INTEGER,MasterSignedImage INTEGER,CallSign VARCHAR(75) null,ArrivalPortCode VARCHAR(75) null,PortHarbourCode VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_SHIP_SECURITY_MESSAGE";
	public static final String ORDER_BY_JPQL = " ORDER BY tempShipSecurityMessage.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_SHIP_SECURITY_MESSAGE.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.TempShipSecurityMessage"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.TempShipSecurityMessage"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.TempShipSecurityMessage"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long REQUESTCODE_COLUMN_BITMASK = 4L;
	public static long REQUESTSTATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempShipSecurityMessage toModel(
		TempShipSecurityMessageSoap soapModel) {
		TempShipSecurityMessage model = new TempShipSecurityMessageImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setRequestState(soapModel.getRequestState());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setShipSecurityCode(soapModel.getShipSecurityCode());
		model.setDocumentName(soapModel.getDocumentName());
		model.setUserCreated(soapModel.getUserCreated());
		model.setShipAgencyCode(soapModel.getShipAgencyCode());
		model.setNameOfShipAgent(soapModel.getNameOfShipAgent());
		model.setShipName(soapModel.getShipName());
		model.setShipTypeCode(soapModel.getShipTypeCode());
		model.setStateCode(soapModel.getStateCode());
		model.setShipCaptain(soapModel.getShipCaptain());
		model.setImo(soapModel.getImo());
		model.setGrt(soapModel.getGrt());
		model.setUnitGRT(soapModel.getUnitGRT());
		model.setCrewNumber(soapModel.getCrewNumber());
		model.setArrivalDate(soapModel.getArrivalDate());
		model.setPurposeCode(soapModel.getPurposeCode());
		model.setPurposeSpecified(soapModel.getPurposeSpecified());
		model.setPortRegionCode(soapModel.getPortRegionCode());
		model.setPortWharfCode(soapModel.getPortWharfCode());
		model.setShipAgencyPhone(soapModel.getShipAgencyPhone());
		model.setShipAgencyFax(soapModel.getShipAgencyFax());
		model.setIsInternationalShipSecurity(soapModel.getIsInternationalShipSecurity());
		model.setNameOfISSC(soapModel.getNameOfISSC());
		model.setDateOfISSC(soapModel.getDateOfISSC());
		model.setDateOfExpiryISSC(soapModel.getDateOfExpiryISSC());
		model.setSecurityLevelCode(soapModel.getSecurityLevelCode());
		model.setSecurityFromDate(soapModel.getSecurityFromDate());
		model.setIsAdditionalSecurityMeasures(soapModel.getIsAdditionalSecurityMeasures());
		model.setAdditionalSecurityDetail(soapModel.getAdditionalSecurityDetail());
		model.setIsMaintainSecurity(soapModel.getIsMaintainSecurity());
		model.setMaintainSecurityDetail(soapModel.getMaintainSecurityDetail());
		model.setLatitude(soapModel.getLatitude());
		model.setLongitude(soapModel.getLongitude());
		model.setHasShipSecurityPortItems(soapModel.getHasShipSecurityPortItems());
		model.setSignPlace(soapModel.getSignPlace());
		model.setSignDate(soapModel.getSignDate());
		model.setMasterSigned(soapModel.getMasterSigned());
		model.setMasterSignedImage(soapModel.getMasterSignedImage());
		model.setCallSign(soapModel.getCallSign());
		model.setArrivalPortCode(soapModel.getArrivalPortCode());
		model.setPortHarbourCode(soapModel.getPortHarbourCode());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempShipSecurityMessage> toModels(
		TempShipSecurityMessageSoap[] soapModels) {
		List<TempShipSecurityMessage> models = new ArrayList<TempShipSecurityMessage>(soapModels.length);

		for (TempShipSecurityMessageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.TempShipSecurityMessage"));

	public TempShipSecurityMessageModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TempShipSecurityMessage.class;
	}

	public String getModelClassName() {
		return TempShipSecurityMessage.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	public int getRequestState() {
		return _requestState;
	}

	public void setRequestState(int requestState) {
		_columnBitmask |= REQUESTSTATE_COLUMN_BITMASK;

		if (!_setOriginalRequestState) {
			_setOriginalRequestState = true;

			_originalRequestState = _requestState;
		}

		_requestState = requestState;
	}

	public int getOriginalRequestState() {
		return _originalRequestState;
	}

	@JSON
	public int getDocumentYear() {
		return _documentYear;
	}

	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	public String getShipSecurityCode() {
		if (_shipSecurityCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipSecurityCode;
		}
	}

	public void setShipSecurityCode(String shipSecurityCode) {
		_shipSecurityCode = shipSecurityCode;
	}

	@JSON
	public long getDocumentName() {
		return _documentName;
	}

	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	public String getUserCreated() {
		if (_userCreated == null) {
			return StringPool.BLANK;
		}
		else {
			return _userCreated;
		}
	}

	public void setUserCreated(String userCreated) {
		_userCreated = userCreated;
	}

	@JSON
	public String getShipAgencyCode() {
		if (_shipAgencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyCode;
		}
	}

	public void setShipAgencyCode(String shipAgencyCode) {
		_shipAgencyCode = shipAgencyCode;
	}

	@JSON
	public String getNameOfShipAgent() {
		if (_nameOfShipAgent == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShipAgent;
		}
	}

	public void setNameOfShipAgent(String nameOfShipAgent) {
		_nameOfShipAgent = nameOfShipAgent;
	}

	@JSON
	public String getShipName() {
		if (_shipName == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipName;
		}
	}

	public void setShipName(String shipName) {
		_shipName = shipName;
	}

	@JSON
	public String getShipTypeCode() {
		if (_shipTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipTypeCode;
		}
	}

	public void setShipTypeCode(String shipTypeCode) {
		_shipTypeCode = shipTypeCode;
	}

	@JSON
	public String getStateCode() {
		if (_stateCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateCode;
		}
	}

	public void setStateCode(String stateCode) {
		_stateCode = stateCode;
	}

	@JSON
	public String getShipCaptain() {
		if (_shipCaptain == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipCaptain;
		}
	}

	public void setShipCaptain(String shipCaptain) {
		_shipCaptain = shipCaptain;
	}

	@JSON
	public String getImo() {
		if (_imo == null) {
			return StringPool.BLANK;
		}
		else {
			return _imo;
		}
	}

	public void setImo(String imo) {
		_imo = imo;
	}

	@JSON
	public double getGrt() {
		return _grt;
	}

	public void setGrt(double grt) {
		_grt = grt;
	}

	@JSON
	public String getUnitGRT() {
		if (_unitGRT == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitGRT;
		}
	}

	public void setUnitGRT(String unitGRT) {
		_unitGRT = unitGRT;
	}

	@JSON
	public long getCrewNumber() {
		return _crewNumber;
	}

	public void setCrewNumber(long crewNumber) {
		_crewNumber = crewNumber;
	}

	@JSON
	public Date getArrivalDate() {
		return _arrivalDate;
	}

	public void setArrivalDate(Date arrivalDate) {
		_arrivalDate = arrivalDate;
	}

	@JSON
	public String getPurposeCode() {
		if (_purposeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _purposeCode;
		}
	}

	public void setPurposeCode(String purposeCode) {
		_purposeCode = purposeCode;
	}

	@JSON
	public String getPurposeSpecified() {
		if (_purposeSpecified == null) {
			return StringPool.BLANK;
		}
		else {
			return _purposeSpecified;
		}
	}

	public void setPurposeSpecified(String purposeSpecified) {
		_purposeSpecified = purposeSpecified;
	}

	@JSON
	public String getPortRegionCode() {
		if (_portRegionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portRegionCode;
		}
	}

	public void setPortRegionCode(String portRegionCode) {
		_portRegionCode = portRegionCode;
	}

	@JSON
	public String getPortWharfCode() {
		if (_portWharfCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portWharfCode;
		}
	}

	public void setPortWharfCode(String portWharfCode) {
		_portWharfCode = portWharfCode;
	}

	@JSON
	public String getShipAgencyPhone() {
		if (_shipAgencyPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyPhone;
		}
	}

	public void setShipAgencyPhone(String shipAgencyPhone) {
		_shipAgencyPhone = shipAgencyPhone;
	}

	@JSON
	public String getShipAgencyFax() {
		if (_shipAgencyFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyFax;
		}
	}

	public void setShipAgencyFax(String shipAgencyFax) {
		_shipAgencyFax = shipAgencyFax;
	}

	@JSON
	public int getIsInternationalShipSecurity() {
		return _isInternationalShipSecurity;
	}

	public void setIsInternationalShipSecurity(int isInternationalShipSecurity) {
		_isInternationalShipSecurity = isInternationalShipSecurity;
	}

	@JSON
	public String getNameOfISSC() {
		if (_nameOfISSC == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfISSC;
		}
	}

	public void setNameOfISSC(String nameOfISSC) {
		_nameOfISSC = nameOfISSC;
	}

	@JSON
	public Date getDateOfISSC() {
		return _dateOfISSC;
	}

	public void setDateOfISSC(Date dateOfISSC) {
		_dateOfISSC = dateOfISSC;
	}

	@JSON
	public Date getDateOfExpiryISSC() {
		return _dateOfExpiryISSC;
	}

	public void setDateOfExpiryISSC(Date dateOfExpiryISSC) {
		_dateOfExpiryISSC = dateOfExpiryISSC;
	}

	@JSON
	public String getSecurityLevelCode() {
		if (_securityLevelCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _securityLevelCode;
		}
	}

	public void setSecurityLevelCode(String securityLevelCode) {
		_securityLevelCode = securityLevelCode;
	}

	@JSON
	public Date getSecurityFromDate() {
		return _securityFromDate;
	}

	public void setSecurityFromDate(Date securityFromDate) {
		_securityFromDate = securityFromDate;
	}

	@JSON
	public int getIsAdditionalSecurityMeasures() {
		return _isAdditionalSecurityMeasures;
	}

	public void setIsAdditionalSecurityMeasures(
		int isAdditionalSecurityMeasures) {
		_isAdditionalSecurityMeasures = isAdditionalSecurityMeasures;
	}

	@JSON
	public String getAdditionalSecurityDetail() {
		if (_additionalSecurityDetail == null) {
			return StringPool.BLANK;
		}
		else {
			return _additionalSecurityDetail;
		}
	}

	public void setAdditionalSecurityDetail(String additionalSecurityDetail) {
		_additionalSecurityDetail = additionalSecurityDetail;
	}

	@JSON
	public int getIsMaintainSecurity() {
		return _isMaintainSecurity;
	}

	public void setIsMaintainSecurity(int isMaintainSecurity) {
		_isMaintainSecurity = isMaintainSecurity;
	}

	@JSON
	public String getMaintainSecurityDetail() {
		if (_maintainSecurityDetail == null) {
			return StringPool.BLANK;
		}
		else {
			return _maintainSecurityDetail;
		}
	}

	public void setMaintainSecurityDetail(String maintainSecurityDetail) {
		_maintainSecurityDetail = maintainSecurityDetail;
	}

	@JSON
	public String getLatitude() {
		if (_latitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _latitude;
		}
	}

	public void setLatitude(String latitude) {
		_latitude = latitude;
	}

	@JSON
	public String getLongitude() {
		if (_longitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _longitude;
		}
	}

	public void setLongitude(String longitude) {
		_longitude = longitude;
	}

	@JSON
	public int getHasShipSecurityPortItems() {
		return _hasShipSecurityPortItems;
	}

	public void setHasShipSecurityPortItems(int hasShipSecurityPortItems) {
		_hasShipSecurityPortItems = hasShipSecurityPortItems;
	}

	@JSON
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@JSON
	public Date getSignDate() {
		return _signDate;
	}

	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	public int getMasterSigned() {
		return _masterSigned;
	}

	public void setMasterSigned(int masterSigned) {
		_masterSigned = masterSigned;
	}

	@JSON
	public int getMasterSignedImage() {
		return _masterSignedImage;
	}

	public void setMasterSignedImage(int masterSignedImage) {
		_masterSignedImage = masterSignedImage;
	}

	@JSON
	public String getCallSign() {
		if (_callSign == null) {
			return StringPool.BLANK;
		}
		else {
			return _callSign;
		}
	}

	public void setCallSign(String callSign) {
		_callSign = callSign;
	}

	@JSON
	public String getArrivalPortCode() {
		if (_arrivalPortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _arrivalPortCode;
		}
	}

	public void setArrivalPortCode(String arrivalPortCode) {
		_arrivalPortCode = arrivalPortCode;
	}

	@JSON
	public String getPortHarbourCode() {
		if (_portHarbourCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portHarbourCode;
		}
	}

	public void setPortHarbourCode(String portHarbourCode) {
		_portHarbourCode = portHarbourCode;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public TempShipSecurityMessage toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TempShipSecurityMessage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					TempShipSecurityMessage.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TempShipSecurityMessageImpl tempShipSecurityMessageImpl = new TempShipSecurityMessageImpl();

		tempShipSecurityMessageImpl.setId(getId());
		tempShipSecurityMessageImpl.setRequestCode(getRequestCode());
		tempShipSecurityMessageImpl.setRequestState(getRequestState());
		tempShipSecurityMessageImpl.setDocumentYear(getDocumentYear());
		tempShipSecurityMessageImpl.setShipSecurityCode(getShipSecurityCode());
		tempShipSecurityMessageImpl.setDocumentName(getDocumentName());
		tempShipSecurityMessageImpl.setUserCreated(getUserCreated());
		tempShipSecurityMessageImpl.setShipAgencyCode(getShipAgencyCode());
		tempShipSecurityMessageImpl.setNameOfShipAgent(getNameOfShipAgent());
		tempShipSecurityMessageImpl.setShipName(getShipName());
		tempShipSecurityMessageImpl.setShipTypeCode(getShipTypeCode());
		tempShipSecurityMessageImpl.setStateCode(getStateCode());
		tempShipSecurityMessageImpl.setShipCaptain(getShipCaptain());
		tempShipSecurityMessageImpl.setImo(getImo());
		tempShipSecurityMessageImpl.setGrt(getGrt());
		tempShipSecurityMessageImpl.setUnitGRT(getUnitGRT());
		tempShipSecurityMessageImpl.setCrewNumber(getCrewNumber());
		tempShipSecurityMessageImpl.setArrivalDate(getArrivalDate());
		tempShipSecurityMessageImpl.setPurposeCode(getPurposeCode());
		tempShipSecurityMessageImpl.setPurposeSpecified(getPurposeSpecified());
		tempShipSecurityMessageImpl.setPortRegionCode(getPortRegionCode());
		tempShipSecurityMessageImpl.setPortWharfCode(getPortWharfCode());
		tempShipSecurityMessageImpl.setShipAgencyPhone(getShipAgencyPhone());
		tempShipSecurityMessageImpl.setShipAgencyFax(getShipAgencyFax());
		tempShipSecurityMessageImpl.setIsInternationalShipSecurity(getIsInternationalShipSecurity());
		tempShipSecurityMessageImpl.setNameOfISSC(getNameOfISSC());
		tempShipSecurityMessageImpl.setDateOfISSC(getDateOfISSC());
		tempShipSecurityMessageImpl.setDateOfExpiryISSC(getDateOfExpiryISSC());
		tempShipSecurityMessageImpl.setSecurityLevelCode(getSecurityLevelCode());
		tempShipSecurityMessageImpl.setSecurityFromDate(getSecurityFromDate());
		tempShipSecurityMessageImpl.setIsAdditionalSecurityMeasures(getIsAdditionalSecurityMeasures());
		tempShipSecurityMessageImpl.setAdditionalSecurityDetail(getAdditionalSecurityDetail());
		tempShipSecurityMessageImpl.setIsMaintainSecurity(getIsMaintainSecurity());
		tempShipSecurityMessageImpl.setMaintainSecurityDetail(getMaintainSecurityDetail());
		tempShipSecurityMessageImpl.setLatitude(getLatitude());
		tempShipSecurityMessageImpl.setLongitude(getLongitude());
		tempShipSecurityMessageImpl.setHasShipSecurityPortItems(getHasShipSecurityPortItems());
		tempShipSecurityMessageImpl.setSignPlace(getSignPlace());
		tempShipSecurityMessageImpl.setSignDate(getSignDate());
		tempShipSecurityMessageImpl.setMasterSigned(getMasterSigned());
		tempShipSecurityMessageImpl.setMasterSignedImage(getMasterSignedImage());
		tempShipSecurityMessageImpl.setCallSign(getCallSign());
		tempShipSecurityMessageImpl.setArrivalPortCode(getArrivalPortCode());
		tempShipSecurityMessageImpl.setPortHarbourCode(getPortHarbourCode());

		tempShipSecurityMessageImpl.resetOriginalValues();

		return tempShipSecurityMessageImpl;
	}

	public int compareTo(TempShipSecurityMessage tempShipSecurityMessage) {
		int value = 0;

		if (getId() < tempShipSecurityMessage.getId()) {
			value = -1;
		}
		else if (getId() > tempShipSecurityMessage.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TempShipSecurityMessage tempShipSecurityMessage = null;

		try {
			tempShipSecurityMessage = (TempShipSecurityMessage)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tempShipSecurityMessage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempShipSecurityMessageModelImpl tempShipSecurityMessageModelImpl = this;

		tempShipSecurityMessageModelImpl._originalRequestCode = tempShipSecurityMessageModelImpl._requestCode;

		tempShipSecurityMessageModelImpl._originalRequestState = tempShipSecurityMessageModelImpl._requestState;

		tempShipSecurityMessageModelImpl._setOriginalRequestState = false;

		tempShipSecurityMessageModelImpl._originalDocumentYear = tempShipSecurityMessageModelImpl._documentYear;

		tempShipSecurityMessageModelImpl._setOriginalDocumentYear = false;

		tempShipSecurityMessageModelImpl._originalDocumentName = tempShipSecurityMessageModelImpl._documentName;

		tempShipSecurityMessageModelImpl._setOriginalDocumentName = false;

		tempShipSecurityMessageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempShipSecurityMessage> toCacheModel() {
		TempShipSecurityMessageCacheModel tempShipSecurityMessageCacheModel = new TempShipSecurityMessageCacheModel();

		tempShipSecurityMessageCacheModel.id = getId();

		tempShipSecurityMessageCacheModel.requestCode = getRequestCode();

		String requestCode = tempShipSecurityMessageCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempShipSecurityMessageCacheModel.requestCode = null;
		}

		tempShipSecurityMessageCacheModel.requestState = getRequestState();

		tempShipSecurityMessageCacheModel.documentYear = getDocumentYear();

		tempShipSecurityMessageCacheModel.shipSecurityCode = getShipSecurityCode();

		String shipSecurityCode = tempShipSecurityMessageCacheModel.shipSecurityCode;

		if ((shipSecurityCode != null) && (shipSecurityCode.length() == 0)) {
			tempShipSecurityMessageCacheModel.shipSecurityCode = null;
		}

		tempShipSecurityMessageCacheModel.documentName = getDocumentName();

		tempShipSecurityMessageCacheModel.userCreated = getUserCreated();

		String userCreated = tempShipSecurityMessageCacheModel.userCreated;

		if ((userCreated != null) && (userCreated.length() == 0)) {
			tempShipSecurityMessageCacheModel.userCreated = null;
		}

		tempShipSecurityMessageCacheModel.shipAgencyCode = getShipAgencyCode();

		String shipAgencyCode = tempShipSecurityMessageCacheModel.shipAgencyCode;

		if ((shipAgencyCode != null) && (shipAgencyCode.length() == 0)) {
			tempShipSecurityMessageCacheModel.shipAgencyCode = null;
		}

		tempShipSecurityMessageCacheModel.nameOfShipAgent = getNameOfShipAgent();

		String nameOfShipAgent = tempShipSecurityMessageCacheModel.nameOfShipAgent;

		if ((nameOfShipAgent != null) && (nameOfShipAgent.length() == 0)) {
			tempShipSecurityMessageCacheModel.nameOfShipAgent = null;
		}

		tempShipSecurityMessageCacheModel.shipName = getShipName();

		String shipName = tempShipSecurityMessageCacheModel.shipName;

		if ((shipName != null) && (shipName.length() == 0)) {
			tempShipSecurityMessageCacheModel.shipName = null;
		}

		tempShipSecurityMessageCacheModel.shipTypeCode = getShipTypeCode();

		String shipTypeCode = tempShipSecurityMessageCacheModel.shipTypeCode;

		if ((shipTypeCode != null) && (shipTypeCode.length() == 0)) {
			tempShipSecurityMessageCacheModel.shipTypeCode = null;
		}

		tempShipSecurityMessageCacheModel.stateCode = getStateCode();

		String stateCode = tempShipSecurityMessageCacheModel.stateCode;

		if ((stateCode != null) && (stateCode.length() == 0)) {
			tempShipSecurityMessageCacheModel.stateCode = null;
		}

		tempShipSecurityMessageCacheModel.shipCaptain = getShipCaptain();

		String shipCaptain = tempShipSecurityMessageCacheModel.shipCaptain;

		if ((shipCaptain != null) && (shipCaptain.length() == 0)) {
			tempShipSecurityMessageCacheModel.shipCaptain = null;
		}

		tempShipSecurityMessageCacheModel.imo = getImo();

		String imo = tempShipSecurityMessageCacheModel.imo;

		if ((imo != null) && (imo.length() == 0)) {
			tempShipSecurityMessageCacheModel.imo = null;
		}

		tempShipSecurityMessageCacheModel.grt = getGrt();

		tempShipSecurityMessageCacheModel.unitGRT = getUnitGRT();

		String unitGRT = tempShipSecurityMessageCacheModel.unitGRT;

		if ((unitGRT != null) && (unitGRT.length() == 0)) {
			tempShipSecurityMessageCacheModel.unitGRT = null;
		}

		tempShipSecurityMessageCacheModel.crewNumber = getCrewNumber();

		Date arrivalDate = getArrivalDate();

		if (arrivalDate != null) {
			tempShipSecurityMessageCacheModel.arrivalDate = arrivalDate.getTime();
		}
		else {
			tempShipSecurityMessageCacheModel.arrivalDate = Long.MIN_VALUE;
		}

		tempShipSecurityMessageCacheModel.purposeCode = getPurposeCode();

		String purposeCode = tempShipSecurityMessageCacheModel.purposeCode;

		if ((purposeCode != null) && (purposeCode.length() == 0)) {
			tempShipSecurityMessageCacheModel.purposeCode = null;
		}

		tempShipSecurityMessageCacheModel.purposeSpecified = getPurposeSpecified();

		String purposeSpecified = tempShipSecurityMessageCacheModel.purposeSpecified;

		if ((purposeSpecified != null) && (purposeSpecified.length() == 0)) {
			tempShipSecurityMessageCacheModel.purposeSpecified = null;
		}

		tempShipSecurityMessageCacheModel.portRegionCode = getPortRegionCode();

		String portRegionCode = tempShipSecurityMessageCacheModel.portRegionCode;

		if ((portRegionCode != null) && (portRegionCode.length() == 0)) {
			tempShipSecurityMessageCacheModel.portRegionCode = null;
		}

		tempShipSecurityMessageCacheModel.portWharfCode = getPortWharfCode();

		String portWharfCode = tempShipSecurityMessageCacheModel.portWharfCode;

		if ((portWharfCode != null) && (portWharfCode.length() == 0)) {
			tempShipSecurityMessageCacheModel.portWharfCode = null;
		}

		tempShipSecurityMessageCacheModel.shipAgencyPhone = getShipAgencyPhone();

		String shipAgencyPhone = tempShipSecurityMessageCacheModel.shipAgencyPhone;

		if ((shipAgencyPhone != null) && (shipAgencyPhone.length() == 0)) {
			tempShipSecurityMessageCacheModel.shipAgencyPhone = null;
		}

		tempShipSecurityMessageCacheModel.shipAgencyFax = getShipAgencyFax();

		String shipAgencyFax = tempShipSecurityMessageCacheModel.shipAgencyFax;

		if ((shipAgencyFax != null) && (shipAgencyFax.length() == 0)) {
			tempShipSecurityMessageCacheModel.shipAgencyFax = null;
		}

		tempShipSecurityMessageCacheModel.isInternationalShipSecurity = getIsInternationalShipSecurity();

		tempShipSecurityMessageCacheModel.nameOfISSC = getNameOfISSC();

		String nameOfISSC = tempShipSecurityMessageCacheModel.nameOfISSC;

		if ((nameOfISSC != null) && (nameOfISSC.length() == 0)) {
			tempShipSecurityMessageCacheModel.nameOfISSC = null;
		}

		Date dateOfISSC = getDateOfISSC();

		if (dateOfISSC != null) {
			tempShipSecurityMessageCacheModel.dateOfISSC = dateOfISSC.getTime();
		}
		else {
			tempShipSecurityMessageCacheModel.dateOfISSC = Long.MIN_VALUE;
		}

		Date dateOfExpiryISSC = getDateOfExpiryISSC();

		if (dateOfExpiryISSC != null) {
			tempShipSecurityMessageCacheModel.dateOfExpiryISSC = dateOfExpiryISSC.getTime();
		}
		else {
			tempShipSecurityMessageCacheModel.dateOfExpiryISSC = Long.MIN_VALUE;
		}

		tempShipSecurityMessageCacheModel.securityLevelCode = getSecurityLevelCode();

		String securityLevelCode = tempShipSecurityMessageCacheModel.securityLevelCode;

		if ((securityLevelCode != null) && (securityLevelCode.length() == 0)) {
			tempShipSecurityMessageCacheModel.securityLevelCode = null;
		}

		Date securityFromDate = getSecurityFromDate();

		if (securityFromDate != null) {
			tempShipSecurityMessageCacheModel.securityFromDate = securityFromDate.getTime();
		}
		else {
			tempShipSecurityMessageCacheModel.securityFromDate = Long.MIN_VALUE;
		}

		tempShipSecurityMessageCacheModel.isAdditionalSecurityMeasures = getIsAdditionalSecurityMeasures();

		tempShipSecurityMessageCacheModel.additionalSecurityDetail = getAdditionalSecurityDetail();

		String additionalSecurityDetail = tempShipSecurityMessageCacheModel.additionalSecurityDetail;

		if ((additionalSecurityDetail != null) &&
				(additionalSecurityDetail.length() == 0)) {
			tempShipSecurityMessageCacheModel.additionalSecurityDetail = null;
		}

		tempShipSecurityMessageCacheModel.isMaintainSecurity = getIsMaintainSecurity();

		tempShipSecurityMessageCacheModel.maintainSecurityDetail = getMaintainSecurityDetail();

		String maintainSecurityDetail = tempShipSecurityMessageCacheModel.maintainSecurityDetail;

		if ((maintainSecurityDetail != null) &&
				(maintainSecurityDetail.length() == 0)) {
			tempShipSecurityMessageCacheModel.maintainSecurityDetail = null;
		}

		tempShipSecurityMessageCacheModel.latitude = getLatitude();

		String latitude = tempShipSecurityMessageCacheModel.latitude;

		if ((latitude != null) && (latitude.length() == 0)) {
			tempShipSecurityMessageCacheModel.latitude = null;
		}

		tempShipSecurityMessageCacheModel.longitude = getLongitude();

		String longitude = tempShipSecurityMessageCacheModel.longitude;

		if ((longitude != null) && (longitude.length() == 0)) {
			tempShipSecurityMessageCacheModel.longitude = null;
		}

		tempShipSecurityMessageCacheModel.hasShipSecurityPortItems = getHasShipSecurityPortItems();

		tempShipSecurityMessageCacheModel.signPlace = getSignPlace();

		String signPlace = tempShipSecurityMessageCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			tempShipSecurityMessageCacheModel.signPlace = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			tempShipSecurityMessageCacheModel.signDate = signDate.getTime();
		}
		else {
			tempShipSecurityMessageCacheModel.signDate = Long.MIN_VALUE;
		}

		tempShipSecurityMessageCacheModel.masterSigned = getMasterSigned();

		tempShipSecurityMessageCacheModel.masterSignedImage = getMasterSignedImage();

		tempShipSecurityMessageCacheModel.callSign = getCallSign();

		String callSign = tempShipSecurityMessageCacheModel.callSign;

		if ((callSign != null) && (callSign.length() == 0)) {
			tempShipSecurityMessageCacheModel.callSign = null;
		}

		tempShipSecurityMessageCacheModel.arrivalPortCode = getArrivalPortCode();

		String arrivalPortCode = tempShipSecurityMessageCacheModel.arrivalPortCode;

		if ((arrivalPortCode != null) && (arrivalPortCode.length() == 0)) {
			tempShipSecurityMessageCacheModel.arrivalPortCode = null;
		}

		tempShipSecurityMessageCacheModel.portHarbourCode = getPortHarbourCode();

		String portHarbourCode = tempShipSecurityMessageCacheModel.portHarbourCode;

		if ((portHarbourCode != null) && (portHarbourCode.length() == 0)) {
			tempShipSecurityMessageCacheModel.portHarbourCode = null;
		}

		return tempShipSecurityMessageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(89);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", shipSecurityCode=");
		sb.append(getShipSecurityCode());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", userCreated=");
		sb.append(getUserCreated());
		sb.append(", shipAgencyCode=");
		sb.append(getShipAgencyCode());
		sb.append(", nameOfShipAgent=");
		sb.append(getNameOfShipAgent());
		sb.append(", shipName=");
		sb.append(getShipName());
		sb.append(", shipTypeCode=");
		sb.append(getShipTypeCode());
		sb.append(", stateCode=");
		sb.append(getStateCode());
		sb.append(", shipCaptain=");
		sb.append(getShipCaptain());
		sb.append(", imo=");
		sb.append(getImo());
		sb.append(", grt=");
		sb.append(getGrt());
		sb.append(", unitGRT=");
		sb.append(getUnitGRT());
		sb.append(", crewNumber=");
		sb.append(getCrewNumber());
		sb.append(", arrivalDate=");
		sb.append(getArrivalDate());
		sb.append(", purposeCode=");
		sb.append(getPurposeCode());
		sb.append(", purposeSpecified=");
		sb.append(getPurposeSpecified());
		sb.append(", portRegionCode=");
		sb.append(getPortRegionCode());
		sb.append(", portWharfCode=");
		sb.append(getPortWharfCode());
		sb.append(", shipAgencyPhone=");
		sb.append(getShipAgencyPhone());
		sb.append(", shipAgencyFax=");
		sb.append(getShipAgencyFax());
		sb.append(", isInternationalShipSecurity=");
		sb.append(getIsInternationalShipSecurity());
		sb.append(", nameOfISSC=");
		sb.append(getNameOfISSC());
		sb.append(", dateOfISSC=");
		sb.append(getDateOfISSC());
		sb.append(", dateOfExpiryISSC=");
		sb.append(getDateOfExpiryISSC());
		sb.append(", securityLevelCode=");
		sb.append(getSecurityLevelCode());
		sb.append(", securityFromDate=");
		sb.append(getSecurityFromDate());
		sb.append(", isAdditionalSecurityMeasures=");
		sb.append(getIsAdditionalSecurityMeasures());
		sb.append(", additionalSecurityDetail=");
		sb.append(getAdditionalSecurityDetail());
		sb.append(", isMaintainSecurity=");
		sb.append(getIsMaintainSecurity());
		sb.append(", maintainSecurityDetail=");
		sb.append(getMaintainSecurityDetail());
		sb.append(", latitude=");
		sb.append(getLatitude());
		sb.append(", longitude=");
		sb.append(getLongitude());
		sb.append(", hasShipSecurityPortItems=");
		sb.append(getHasShipSecurityPortItems());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", masterSigned=");
		sb.append(getMasterSigned());
		sb.append(", masterSignedImage=");
		sb.append(getMasterSignedImage());
		sb.append(", callSign=");
		sb.append(getCallSign());
		sb.append(", arrivalPortCode=");
		sb.append(getArrivalPortCode());
		sb.append(", portHarbourCode=");
		sb.append(getPortHarbourCode());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(136);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.TempShipSecurityMessage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipSecurityCode</column-name><column-value><![CDATA[");
		sb.append(getShipSecurityCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userCreated</column-name><column-value><![CDATA[");
		sb.append(getUserCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyCode</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShipAgent</column-name><column-value><![CDATA[");
		sb.append(getNameOfShipAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipName</column-name><column-value><![CDATA[");
		sb.append(getShipName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipTypeCode</column-name><column-value><![CDATA[");
		sb.append(getShipTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateCode</column-name><column-value><![CDATA[");
		sb.append(getStateCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipCaptain</column-name><column-value><![CDATA[");
		sb.append(getShipCaptain());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imo</column-name><column-value><![CDATA[");
		sb.append(getImo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grt</column-name><column-value><![CDATA[");
		sb.append(getGrt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitGRT</column-name><column-value><![CDATA[");
		sb.append(getUnitGRT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>crewNumber</column-name><column-value><![CDATA[");
		sb.append(getCrewNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arrivalDate</column-name><column-value><![CDATA[");
		sb.append(getArrivalDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purposeCode</column-name><column-value><![CDATA[");
		sb.append(getPurposeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purposeSpecified</column-name><column-value><![CDATA[");
		sb.append(getPurposeSpecified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portRegionCode</column-name><column-value><![CDATA[");
		sb.append(getPortRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portWharfCode</column-name><column-value><![CDATA[");
		sb.append(getPortWharfCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyPhone</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyFax</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isInternationalShipSecurity</column-name><column-value><![CDATA[");
		sb.append(getIsInternationalShipSecurity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfISSC</column-name><column-value><![CDATA[");
		sb.append(getNameOfISSC());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfISSC</column-name><column-value><![CDATA[");
		sb.append(getDateOfISSC());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfExpiryISSC</column-name><column-value><![CDATA[");
		sb.append(getDateOfExpiryISSC());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>securityLevelCode</column-name><column-value><![CDATA[");
		sb.append(getSecurityLevelCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>securityFromDate</column-name><column-value><![CDATA[");
		sb.append(getSecurityFromDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isAdditionalSecurityMeasures</column-name><column-value><![CDATA[");
		sb.append(getIsAdditionalSecurityMeasures());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>additionalSecurityDetail</column-name><column-value><![CDATA[");
		sb.append(getAdditionalSecurityDetail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isMaintainSecurity</column-name><column-value><![CDATA[");
		sb.append(getIsMaintainSecurity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maintainSecurityDetail</column-name><column-value><![CDATA[");
		sb.append(getMaintainSecurityDetail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latitude</column-name><column-value><![CDATA[");
		sb.append(getLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longitude</column-name><column-value><![CDATA[");
		sb.append(getLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasShipSecurityPortItems</column-name><column-value><![CDATA[");
		sb.append(getHasShipSecurityPortItems());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterSigned</column-name><column-value><![CDATA[");
		sb.append(getMasterSigned());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterSignedImage</column-name><column-value><![CDATA[");
		sb.append(getMasterSignedImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callSign</column-name><column-value><![CDATA[");
		sb.append(getCallSign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arrivalPortCode</column-name><column-value><![CDATA[");
		sb.append(getArrivalPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portHarbourCode</column-name><column-value><![CDATA[");
		sb.append(getPortHarbourCode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempShipSecurityMessage.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TempShipSecurityMessage.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private int _requestState;
	private int _originalRequestState;
	private boolean _setOriginalRequestState;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _shipSecurityCode;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private String _userCreated;
	private String _shipAgencyCode;
	private String _nameOfShipAgent;
	private String _shipName;
	private String _shipTypeCode;
	private String _stateCode;
	private String _shipCaptain;
	private String _imo;
	private double _grt;
	private String _unitGRT;
	private long _crewNumber;
	private Date _arrivalDate;
	private String _purposeCode;
	private String _purposeSpecified;
	private String _portRegionCode;
	private String _portWharfCode;
	private String _shipAgencyPhone;
	private String _shipAgencyFax;
	private int _isInternationalShipSecurity;
	private String _nameOfISSC;
	private Date _dateOfISSC;
	private Date _dateOfExpiryISSC;
	private String _securityLevelCode;
	private Date _securityFromDate;
	private int _isAdditionalSecurityMeasures;
	private String _additionalSecurityDetail;
	private int _isMaintainSecurity;
	private String _maintainSecurityDetail;
	private String _latitude;
	private String _longitude;
	private int _hasShipSecurityPortItems;
	private String _signPlace;
	private Date _signDate;
	private int _masterSigned;
	private int _masterSignedImage;
	private String _callSign;
	private String _arrivalPortCode;
	private String _portHarbourCode;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private TempShipSecurityMessage _escapedModelProxy;
}