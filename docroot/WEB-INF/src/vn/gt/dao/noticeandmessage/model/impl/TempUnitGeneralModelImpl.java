/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.TempUnitGeneral;
import vn.gt.dao.noticeandmessage.model.TempUnitGeneralModel;
import vn.gt.dao.noticeandmessage.model.TempUnitGeneralSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the TempUnitGeneral service. Represents a row in the &quot;TEMP_UNIT_GENERAL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.TempUnitGeneralModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempUnitGeneralImpl}.
 * </p>
 *
 * @author win_64
 * @see TempUnitGeneralImpl
 * @see vn.gt.dao.noticeandmessage.model.TempUnitGeneral
 * @see vn.gt.dao.noticeandmessage.model.TempUnitGeneralModel
 * @generated
 */
@JSON(strict = true)
public class TempUnitGeneralModelImpl extends BaseModelImpl<TempUnitGeneral>
	implements TempUnitGeneralModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp unit general model instance should use the {@link vn.gt.dao.noticeandmessage.model.TempUnitGeneral} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_UNIT_GENERAL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "GrossTonnageUnit", Types.VARCHAR },
			{ "NetTonnageUnit", Types.VARCHAR },
			{ "UnitDWT", Types.VARCHAR },
			{ "UnitLOA", Types.VARCHAR },
			{ "UnitBreadth", Types.VARCHAR },
			{ "UnitClearanceHeight", Types.VARCHAR },
			{ "UnitShownDraft", Types.VARCHAR },
			{ "UnitShownDraftxF", Types.VARCHAR },
			{ "UnitShownDraftxA", Types.VARCHAR },
			{ "UnitHorsePower", Types.VARCHAR },
			{ "UnitRemainingOnBoardxB", Types.VARCHAR },
			{ "UnitRemainingOnBoardxS", Types.VARCHAR },
			{ "UnitFO", Types.VARCHAR },
			{ "UnitLO", Types.VARCHAR },
			{ "UnitFW", Types.VARCHAR },
			{ "UnitDO", Types.VARCHAR },
			{ "UnitSludgeOil", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_UNIT_GENERAL (ID LONG not null primary key,RequestCode VARCHAR(75) null,DocumentName LONG,DocumentYear INTEGER,GrossTonnageUnit VARCHAR(75) null,NetTonnageUnit VARCHAR(75) null,UnitDWT VARCHAR(75) null,UnitLOA VARCHAR(75) null,UnitBreadth VARCHAR(75) null,UnitClearanceHeight VARCHAR(75) null,UnitShownDraft VARCHAR(75) null,UnitShownDraftxF VARCHAR(75) null,UnitShownDraftxA VARCHAR(75) null,UnitHorsePower VARCHAR(75) null,UnitRemainingOnBoardxB VARCHAR(75) null,UnitRemainingOnBoardxS VARCHAR(75) null,UnitFO VARCHAR(75) null,UnitLO VARCHAR(75) null,UnitFW VARCHAR(75) null,UnitDO VARCHAR(75) null,UnitSludgeOil VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_UNIT_GENERAL";
	public static final String ORDER_BY_JPQL = " ORDER BY tempUnitGeneral.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_UNIT_GENERAL.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.TempUnitGeneral"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.TempUnitGeneral"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.TempUnitGeneral"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempUnitGeneral toModel(TempUnitGeneralSoap soapModel) {
		TempUnitGeneral model = new TempUnitGeneralImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setGrossTonnageUnit(soapModel.getGrossTonnageUnit());
		model.setNetTonnageUnit(soapModel.getNetTonnageUnit());
		model.setUnitDWT(soapModel.getUnitDWT());
		model.setUnitLOA(soapModel.getUnitLOA());
		model.setUnitBreadth(soapModel.getUnitBreadth());
		model.setUnitClearanceHeight(soapModel.getUnitClearanceHeight());
		model.setUnitShownDraft(soapModel.getUnitShownDraft());
		model.setUnitShownDraftxF(soapModel.getUnitShownDraftxF());
		model.setUnitShownDraftxA(soapModel.getUnitShownDraftxA());
		model.setUnitHorsePower(soapModel.getUnitHorsePower());
		model.setUnitRemainingOnBoardxB(soapModel.getUnitRemainingOnBoardxB());
		model.setUnitRemainingOnBoardxS(soapModel.getUnitRemainingOnBoardxS());
		model.setUnitFO(soapModel.getUnitFO());
		model.setUnitLO(soapModel.getUnitLO());
		model.setUnitFW(soapModel.getUnitFW());
		model.setUnitDO(soapModel.getUnitDO());
		model.setUnitSludgeOil(soapModel.getUnitSludgeOil());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempUnitGeneral> toModels(
		TempUnitGeneralSoap[] soapModels) {
		List<TempUnitGeneral> models = new ArrayList<TempUnitGeneral>(soapModels.length);

		for (TempUnitGeneralSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.TempUnitGeneral"));

	public TempUnitGeneralModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TempUnitGeneral.class;
	}

	public String getModelClassName() {
		return TempUnitGeneral.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_requestCode = requestCode;
	}

	@JSON
	public long getDocumentName() {
		return _documentName;
	}

	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	public int getDocumentYear() {
		return _documentYear;
	}

	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	public String getGrossTonnageUnit() {
		if (_grossTonnageUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _grossTonnageUnit;
		}
	}

	public void setGrossTonnageUnit(String grossTonnageUnit) {
		_grossTonnageUnit = grossTonnageUnit;
	}

	@JSON
	public String getNetTonnageUnit() {
		if (_netTonnageUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _netTonnageUnit;
		}
	}

	public void setNetTonnageUnit(String netTonnageUnit) {
		_netTonnageUnit = netTonnageUnit;
	}

	@JSON
	public String getUnitDWT() {
		if (_unitDWT == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitDWT;
		}
	}

	public void setUnitDWT(String unitDWT) {
		_unitDWT = unitDWT;
	}

	@JSON
	public String getUnitLOA() {
		if (_unitLOA == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitLOA;
		}
	}

	public void setUnitLOA(String unitLOA) {
		_unitLOA = unitLOA;
	}

	@JSON
	public String getUnitBreadth() {
		if (_unitBreadth == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitBreadth;
		}
	}

	public void setUnitBreadth(String unitBreadth) {
		_unitBreadth = unitBreadth;
	}

	@JSON
	public String getUnitClearanceHeight() {
		if (_unitClearanceHeight == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitClearanceHeight;
		}
	}

	public void setUnitClearanceHeight(String unitClearanceHeight) {
		_unitClearanceHeight = unitClearanceHeight;
	}

	@JSON
	public String getUnitShownDraft() {
		if (_unitShownDraft == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitShownDraft;
		}
	}

	public void setUnitShownDraft(String unitShownDraft) {
		_unitShownDraft = unitShownDraft;
	}

	@JSON
	public String getUnitShownDraftxF() {
		if (_unitShownDraftxF == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitShownDraftxF;
		}
	}

	public void setUnitShownDraftxF(String unitShownDraftxF) {
		_unitShownDraftxF = unitShownDraftxF;
	}

	@JSON
	public String getUnitShownDraftxA() {
		if (_unitShownDraftxA == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitShownDraftxA;
		}
	}

	public void setUnitShownDraftxA(String unitShownDraftxA) {
		_unitShownDraftxA = unitShownDraftxA;
	}

	@JSON
	public String getUnitHorsePower() {
		if (_unitHorsePower == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitHorsePower;
		}
	}

	public void setUnitHorsePower(String unitHorsePower) {
		_unitHorsePower = unitHorsePower;
	}

	@JSON
	public String getUnitRemainingOnBoardxB() {
		if (_unitRemainingOnBoardxB == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitRemainingOnBoardxB;
		}
	}

	public void setUnitRemainingOnBoardxB(String unitRemainingOnBoardxB) {
		_unitRemainingOnBoardxB = unitRemainingOnBoardxB;
	}

	@JSON
	public String getUnitRemainingOnBoardxS() {
		if (_unitRemainingOnBoardxS == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitRemainingOnBoardxS;
		}
	}

	public void setUnitRemainingOnBoardxS(String unitRemainingOnBoardxS) {
		_unitRemainingOnBoardxS = unitRemainingOnBoardxS;
	}

	@JSON
	public String getUnitFO() {
		if (_unitFO == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitFO;
		}
	}

	public void setUnitFO(String unitFO) {
		_unitFO = unitFO;
	}

	@JSON
	public String getUnitLO() {
		if (_unitLO == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitLO;
		}
	}

	public void setUnitLO(String unitLO) {
		_unitLO = unitLO;
	}

	@JSON
	public String getUnitFW() {
		if (_unitFW == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitFW;
		}
	}

	public void setUnitFW(String unitFW) {
		_unitFW = unitFW;
	}

	@JSON
	public String getUnitDO() {
		if (_unitDO == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitDO;
		}
	}

	public void setUnitDO(String unitDO) {
		_unitDO = unitDO;
	}

	@JSON
	public String getUnitSludgeOil() {
		if (_unitSludgeOil == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitSludgeOil;
		}
	}

	public void setUnitSludgeOil(String unitSludgeOil) {
		_unitSludgeOil = unitSludgeOil;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public TempUnitGeneral toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TempUnitGeneral)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					TempUnitGeneral.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TempUnitGeneralImpl tempUnitGeneralImpl = new TempUnitGeneralImpl();

		tempUnitGeneralImpl.setId(getId());
		tempUnitGeneralImpl.setRequestCode(getRequestCode());
		tempUnitGeneralImpl.setDocumentName(getDocumentName());
		tempUnitGeneralImpl.setDocumentYear(getDocumentYear());
		tempUnitGeneralImpl.setGrossTonnageUnit(getGrossTonnageUnit());
		tempUnitGeneralImpl.setNetTonnageUnit(getNetTonnageUnit());
		tempUnitGeneralImpl.setUnitDWT(getUnitDWT());
		tempUnitGeneralImpl.setUnitLOA(getUnitLOA());
		tempUnitGeneralImpl.setUnitBreadth(getUnitBreadth());
		tempUnitGeneralImpl.setUnitClearanceHeight(getUnitClearanceHeight());
		tempUnitGeneralImpl.setUnitShownDraft(getUnitShownDraft());
		tempUnitGeneralImpl.setUnitShownDraftxF(getUnitShownDraftxF());
		tempUnitGeneralImpl.setUnitShownDraftxA(getUnitShownDraftxA());
		tempUnitGeneralImpl.setUnitHorsePower(getUnitHorsePower());
		tempUnitGeneralImpl.setUnitRemainingOnBoardxB(getUnitRemainingOnBoardxB());
		tempUnitGeneralImpl.setUnitRemainingOnBoardxS(getUnitRemainingOnBoardxS());
		tempUnitGeneralImpl.setUnitFO(getUnitFO());
		tempUnitGeneralImpl.setUnitLO(getUnitLO());
		tempUnitGeneralImpl.setUnitFW(getUnitFW());
		tempUnitGeneralImpl.setUnitDO(getUnitDO());
		tempUnitGeneralImpl.setUnitSludgeOil(getUnitSludgeOil());

		tempUnitGeneralImpl.resetOriginalValues();

		return tempUnitGeneralImpl;
	}

	public int compareTo(TempUnitGeneral tempUnitGeneral) {
		int value = 0;

		if (getId() < tempUnitGeneral.getId()) {
			value = -1;
		}
		else if (getId() > tempUnitGeneral.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TempUnitGeneral tempUnitGeneral = null;

		try {
			tempUnitGeneral = (TempUnitGeneral)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tempUnitGeneral.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempUnitGeneralModelImpl tempUnitGeneralModelImpl = this;

		tempUnitGeneralModelImpl._originalDocumentName = tempUnitGeneralModelImpl._documentName;

		tempUnitGeneralModelImpl._setOriginalDocumentName = false;

		tempUnitGeneralModelImpl._originalDocumentYear = tempUnitGeneralModelImpl._documentYear;

		tempUnitGeneralModelImpl._setOriginalDocumentYear = false;

		tempUnitGeneralModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempUnitGeneral> toCacheModel() {
		TempUnitGeneralCacheModel tempUnitGeneralCacheModel = new TempUnitGeneralCacheModel();

		tempUnitGeneralCacheModel.id = getId();

		tempUnitGeneralCacheModel.requestCode = getRequestCode();

		String requestCode = tempUnitGeneralCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempUnitGeneralCacheModel.requestCode = null;
		}

		tempUnitGeneralCacheModel.documentName = getDocumentName();

		tempUnitGeneralCacheModel.documentYear = getDocumentYear();

		tempUnitGeneralCacheModel.grossTonnageUnit = getGrossTonnageUnit();

		String grossTonnageUnit = tempUnitGeneralCacheModel.grossTonnageUnit;

		if ((grossTonnageUnit != null) && (grossTonnageUnit.length() == 0)) {
			tempUnitGeneralCacheModel.grossTonnageUnit = null;
		}

		tempUnitGeneralCacheModel.netTonnageUnit = getNetTonnageUnit();

		String netTonnageUnit = tempUnitGeneralCacheModel.netTonnageUnit;

		if ((netTonnageUnit != null) && (netTonnageUnit.length() == 0)) {
			tempUnitGeneralCacheModel.netTonnageUnit = null;
		}

		tempUnitGeneralCacheModel.unitDWT = getUnitDWT();

		String unitDWT = tempUnitGeneralCacheModel.unitDWT;

		if ((unitDWT != null) && (unitDWT.length() == 0)) {
			tempUnitGeneralCacheModel.unitDWT = null;
		}

		tempUnitGeneralCacheModel.unitLOA = getUnitLOA();

		String unitLOA = tempUnitGeneralCacheModel.unitLOA;

		if ((unitLOA != null) && (unitLOA.length() == 0)) {
			tempUnitGeneralCacheModel.unitLOA = null;
		}

		tempUnitGeneralCacheModel.unitBreadth = getUnitBreadth();

		String unitBreadth = tempUnitGeneralCacheModel.unitBreadth;

		if ((unitBreadth != null) && (unitBreadth.length() == 0)) {
			tempUnitGeneralCacheModel.unitBreadth = null;
		}

		tempUnitGeneralCacheModel.unitClearanceHeight = getUnitClearanceHeight();

		String unitClearanceHeight = tempUnitGeneralCacheModel.unitClearanceHeight;

		if ((unitClearanceHeight != null) &&
				(unitClearanceHeight.length() == 0)) {
			tempUnitGeneralCacheModel.unitClearanceHeight = null;
		}

		tempUnitGeneralCacheModel.unitShownDraft = getUnitShownDraft();

		String unitShownDraft = tempUnitGeneralCacheModel.unitShownDraft;

		if ((unitShownDraft != null) && (unitShownDraft.length() == 0)) {
			tempUnitGeneralCacheModel.unitShownDraft = null;
		}

		tempUnitGeneralCacheModel.unitShownDraftxF = getUnitShownDraftxF();

		String unitShownDraftxF = tempUnitGeneralCacheModel.unitShownDraftxF;

		if ((unitShownDraftxF != null) && (unitShownDraftxF.length() == 0)) {
			tempUnitGeneralCacheModel.unitShownDraftxF = null;
		}

		tempUnitGeneralCacheModel.unitShownDraftxA = getUnitShownDraftxA();

		String unitShownDraftxA = tempUnitGeneralCacheModel.unitShownDraftxA;

		if ((unitShownDraftxA != null) && (unitShownDraftxA.length() == 0)) {
			tempUnitGeneralCacheModel.unitShownDraftxA = null;
		}

		tempUnitGeneralCacheModel.unitHorsePower = getUnitHorsePower();

		String unitHorsePower = tempUnitGeneralCacheModel.unitHorsePower;

		if ((unitHorsePower != null) && (unitHorsePower.length() == 0)) {
			tempUnitGeneralCacheModel.unitHorsePower = null;
		}

		tempUnitGeneralCacheModel.unitRemainingOnBoardxB = getUnitRemainingOnBoardxB();

		String unitRemainingOnBoardxB = tempUnitGeneralCacheModel.unitRemainingOnBoardxB;

		if ((unitRemainingOnBoardxB != null) &&
				(unitRemainingOnBoardxB.length() == 0)) {
			tempUnitGeneralCacheModel.unitRemainingOnBoardxB = null;
		}

		tempUnitGeneralCacheModel.unitRemainingOnBoardxS = getUnitRemainingOnBoardxS();

		String unitRemainingOnBoardxS = tempUnitGeneralCacheModel.unitRemainingOnBoardxS;

		if ((unitRemainingOnBoardxS != null) &&
				(unitRemainingOnBoardxS.length() == 0)) {
			tempUnitGeneralCacheModel.unitRemainingOnBoardxS = null;
		}

		tempUnitGeneralCacheModel.unitFO = getUnitFO();

		String unitFO = tempUnitGeneralCacheModel.unitFO;

		if ((unitFO != null) && (unitFO.length() == 0)) {
			tempUnitGeneralCacheModel.unitFO = null;
		}

		tempUnitGeneralCacheModel.unitLO = getUnitLO();

		String unitLO = tempUnitGeneralCacheModel.unitLO;

		if ((unitLO != null) && (unitLO.length() == 0)) {
			tempUnitGeneralCacheModel.unitLO = null;
		}

		tempUnitGeneralCacheModel.unitFW = getUnitFW();

		String unitFW = tempUnitGeneralCacheModel.unitFW;

		if ((unitFW != null) && (unitFW.length() == 0)) {
			tempUnitGeneralCacheModel.unitFW = null;
		}

		tempUnitGeneralCacheModel.unitDO = getUnitDO();

		String unitDO = tempUnitGeneralCacheModel.unitDO;

		if ((unitDO != null) && (unitDO.length() == 0)) {
			tempUnitGeneralCacheModel.unitDO = null;
		}

		tempUnitGeneralCacheModel.unitSludgeOil = getUnitSludgeOil();

		String unitSludgeOil = tempUnitGeneralCacheModel.unitSludgeOil;

		if ((unitSludgeOil != null) && (unitSludgeOil.length() == 0)) {
			tempUnitGeneralCacheModel.unitSludgeOil = null;
		}

		return tempUnitGeneralCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(43);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", grossTonnageUnit=");
		sb.append(getGrossTonnageUnit());
		sb.append(", netTonnageUnit=");
		sb.append(getNetTonnageUnit());
		sb.append(", unitDWT=");
		sb.append(getUnitDWT());
		sb.append(", unitLOA=");
		sb.append(getUnitLOA());
		sb.append(", unitBreadth=");
		sb.append(getUnitBreadth());
		sb.append(", unitClearanceHeight=");
		sb.append(getUnitClearanceHeight());
		sb.append(", unitShownDraft=");
		sb.append(getUnitShownDraft());
		sb.append(", unitShownDraftxF=");
		sb.append(getUnitShownDraftxF());
		sb.append(", unitShownDraftxA=");
		sb.append(getUnitShownDraftxA());
		sb.append(", unitHorsePower=");
		sb.append(getUnitHorsePower());
		sb.append(", unitRemainingOnBoardxB=");
		sb.append(getUnitRemainingOnBoardxB());
		sb.append(", unitRemainingOnBoardxS=");
		sb.append(getUnitRemainingOnBoardxS());
		sb.append(", unitFO=");
		sb.append(getUnitFO());
		sb.append(", unitLO=");
		sb.append(getUnitLO());
		sb.append(", unitFW=");
		sb.append(getUnitFW());
		sb.append(", unitDO=");
		sb.append(getUnitDO());
		sb.append(", unitSludgeOil=");
		sb.append(getUnitSludgeOil());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(67);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.TempUnitGeneral");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossTonnageUnit</column-name><column-value><![CDATA[");
		sb.append(getGrossTonnageUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netTonnageUnit</column-name><column-value><![CDATA[");
		sb.append(getNetTonnageUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitDWT</column-name><column-value><![CDATA[");
		sb.append(getUnitDWT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitLOA</column-name><column-value><![CDATA[");
		sb.append(getUnitLOA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitBreadth</column-name><column-value><![CDATA[");
		sb.append(getUnitBreadth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitClearanceHeight</column-name><column-value><![CDATA[");
		sb.append(getUnitClearanceHeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitShownDraft</column-name><column-value><![CDATA[");
		sb.append(getUnitShownDraft());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitShownDraftxF</column-name><column-value><![CDATA[");
		sb.append(getUnitShownDraftxF());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitShownDraftxA</column-name><column-value><![CDATA[");
		sb.append(getUnitShownDraftxA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitHorsePower</column-name><column-value><![CDATA[");
		sb.append(getUnitHorsePower());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitRemainingOnBoardxB</column-name><column-value><![CDATA[");
		sb.append(getUnitRemainingOnBoardxB());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitRemainingOnBoardxS</column-name><column-value><![CDATA[");
		sb.append(getUnitRemainingOnBoardxS());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitFO</column-name><column-value><![CDATA[");
		sb.append(getUnitFO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitLO</column-name><column-value><![CDATA[");
		sb.append(getUnitLO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitFW</column-name><column-value><![CDATA[");
		sb.append(getUnitFW());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitDO</column-name><column-value><![CDATA[");
		sb.append(getUnitDO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitSludgeOil</column-name><column-value><![CDATA[");
		sb.append(getUnitSludgeOil());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempUnitGeneral.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TempUnitGeneral.class
		};
	private long _id;
	private String _requestCode;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _grossTonnageUnit;
	private String _netTonnageUnit;
	private String _unitDWT;
	private String _unitLOA;
	private String _unitBreadth;
	private String _unitClearanceHeight;
	private String _unitShownDraft;
	private String _unitShownDraftxF;
	private String _unitShownDraftxA;
	private String _unitHorsePower;
	private String _unitRemainingOnBoardxB;
	private String _unitRemainingOnBoardxS;
	private String _unitFO;
	private String _unitLO;
	private String _unitFW;
	private String _unitDO;
	private String _unitSludgeOil;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private TempUnitGeneral _escapedModelProxy;
}