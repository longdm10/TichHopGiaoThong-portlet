/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.TempAttachmentDeclarationHealth;
import vn.gt.dao.noticeandmessage.model.TempAttachmentDeclarationHealthModel;
import vn.gt.dao.noticeandmessage.model.TempAttachmentDeclarationHealthSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the TempAttachmentDeclarationHealth service. Represents a row in the &quot;TEMP_ATT_DECLARATION_HEALTH&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.TempAttachmentDeclarationHealthModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempAttachmentDeclarationHealthImpl}.
 * </p>
 *
 * @author win_64
 * @see TempAttachmentDeclarationHealthImpl
 * @see vn.gt.dao.noticeandmessage.model.TempAttachmentDeclarationHealth
 * @see vn.gt.dao.noticeandmessage.model.TempAttachmentDeclarationHealthModel
 * @generated
 */
@JSON(strict = true)
public class TempAttachmentDeclarationHealthModelImpl extends BaseModelImpl<TempAttachmentDeclarationHealth>
	implements TempAttachmentDeclarationHealthModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp attachment declaration health model instance should use the {@link vn.gt.dao.noticeandmessage.model.TempAttachmentDeclarationHealth} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_ATT_DECLARATION_HEALTH";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "AttachmentCode", Types.VARCHAR },
			{ "PassengerOrCrewCode", Types.VARCHAR },
			{ "Name", Types.VARCHAR },
			{ "Age", Types.INTEGER },
			{ "Sex", Types.INTEGER },
			{ "Nationality", Types.VARCHAR },
			{ "PortJoinVesselCode", Types.VARCHAR },
			{ "DateJoinVessel", Types.TIMESTAMP },
			{ "ClassOrRating", Types.INTEGER },
			{ "NatureOfIllness", Types.VARCHAR },
			{ "DateOfOnsetOfSymptom", Types.TIMESTAMP },
			{ "ReportedMedicalOfficer", Types.INTEGER },
			{ "DisposalOfCase", Types.VARCHAR },
			{ "MedicinesOrOther", Types.VARCHAR },
			{ "Comments", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_ATT_DECLARATION_HEALTH (ID LONG not null primary key,RequestCode VARCHAR(75) null,AttachmentCode VARCHAR(75) null,PassengerOrCrewCode VARCHAR(75) null,Name VARCHAR(75) null,Age INTEGER,Sex INTEGER,Nationality VARCHAR(75) null,PortJoinVesselCode VARCHAR(75) null,DateJoinVessel DATE null,ClassOrRating INTEGER,NatureOfIllness VARCHAR(75) null,DateOfOnsetOfSymptom DATE null,ReportedMedicalOfficer INTEGER,DisposalOfCase VARCHAR(75) null,MedicinesOrOther VARCHAR(75) null,Comments VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_ATT_DECLARATION_HEALTH";
	public static final String ORDER_BY_JPQL = " ORDER BY tempAttachmentDeclarationHealth.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_ATT_DECLARATION_HEALTH.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.TempAttachmentDeclarationHealth"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.TempAttachmentDeclarationHealth"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.TempAttachmentDeclarationHealth"),
			true);
	public static long REQUESTCODE_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempAttachmentDeclarationHealth toModel(
		TempAttachmentDeclarationHealthSoap soapModel) {
		TempAttachmentDeclarationHealth model = new TempAttachmentDeclarationHealthImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setAttachmentCode(soapModel.getAttachmentCode());
		model.setPassengerOrCrewCode(soapModel.getPassengerOrCrewCode());
		model.setName(soapModel.getName());
		model.setAge(soapModel.getAge());
		model.setSex(soapModel.getSex());
		model.setNationality(soapModel.getNationality());
		model.setPortJoinVesselCode(soapModel.getPortJoinVesselCode());
		model.setDateJoinVessel(soapModel.getDateJoinVessel());
		model.setClassOrRating(soapModel.getClassOrRating());
		model.setNatureOfIllness(soapModel.getNatureOfIllness());
		model.setDateOfOnsetOfSymptom(soapModel.getDateOfOnsetOfSymptom());
		model.setReportedMedicalOfficer(soapModel.getReportedMedicalOfficer());
		model.setDisposalOfCase(soapModel.getDisposalOfCase());
		model.setMedicinesOrOther(soapModel.getMedicinesOrOther());
		model.setComments(soapModel.getComments());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempAttachmentDeclarationHealth> toModels(
		TempAttachmentDeclarationHealthSoap[] soapModels) {
		List<TempAttachmentDeclarationHealth> models = new ArrayList<TempAttachmentDeclarationHealth>(soapModels.length);

		for (TempAttachmentDeclarationHealthSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.TempAttachmentDeclarationHealth"));

	public TempAttachmentDeclarationHealthModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TempAttachmentDeclarationHealth.class;
	}

	public String getModelClassName() {
		return TempAttachmentDeclarationHealth.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	public String getAttachmentCode() {
		if (_attachmentCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _attachmentCode;
		}
	}

	public void setAttachmentCode(String attachmentCode) {
		_attachmentCode = attachmentCode;
	}

	@JSON
	public String getPassengerOrCrewCode() {
		if (_passengerOrCrewCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _passengerOrCrewCode;
		}
	}

	public void setPassengerOrCrewCode(String passengerOrCrewCode) {
		_passengerOrCrewCode = passengerOrCrewCode;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	@JSON
	public int getAge() {
		return _age;
	}

	public void setAge(int age) {
		_age = age;
	}

	@JSON
	public int getSex() {
		return _sex;
	}

	public void setSex(int sex) {
		_sex = sex;
	}

	@JSON
	public String getNationality() {
		if (_nationality == null) {
			return StringPool.BLANK;
		}
		else {
			return _nationality;
		}
	}

	public void setNationality(String nationality) {
		_nationality = nationality;
	}

	@JSON
	public String getPortJoinVesselCode() {
		if (_portJoinVesselCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portJoinVesselCode;
		}
	}

	public void setPortJoinVesselCode(String portJoinVesselCode) {
		_portJoinVesselCode = portJoinVesselCode;
	}

	@JSON
	public Date getDateJoinVessel() {
		return _dateJoinVessel;
	}

	public void setDateJoinVessel(Date dateJoinVessel) {
		_dateJoinVessel = dateJoinVessel;
	}

	@JSON
	public int getClassOrRating() {
		return _classOrRating;
	}

	public void setClassOrRating(int classOrRating) {
		_classOrRating = classOrRating;
	}

	@JSON
	public String getNatureOfIllness() {
		if (_natureOfIllness == null) {
			return StringPool.BLANK;
		}
		else {
			return _natureOfIllness;
		}
	}

	public void setNatureOfIllness(String natureOfIllness) {
		_natureOfIllness = natureOfIllness;
	}

	@JSON
	public Date getDateOfOnsetOfSymptom() {
		return _dateOfOnsetOfSymptom;
	}

	public void setDateOfOnsetOfSymptom(Date dateOfOnsetOfSymptom) {
		_dateOfOnsetOfSymptom = dateOfOnsetOfSymptom;
	}

	@JSON
	public int getReportedMedicalOfficer() {
		return _reportedMedicalOfficer;
	}

	public void setReportedMedicalOfficer(int reportedMedicalOfficer) {
		_reportedMedicalOfficer = reportedMedicalOfficer;
	}

	@JSON
	public String getDisposalOfCase() {
		if (_disposalOfCase == null) {
			return StringPool.BLANK;
		}
		else {
			return _disposalOfCase;
		}
	}

	public void setDisposalOfCase(String disposalOfCase) {
		_disposalOfCase = disposalOfCase;
	}

	@JSON
	public String getMedicinesOrOther() {
		if (_medicinesOrOther == null) {
			return StringPool.BLANK;
		}
		else {
			return _medicinesOrOther;
		}
	}

	public void setMedicinesOrOther(String medicinesOrOther) {
		_medicinesOrOther = medicinesOrOther;
	}

	@JSON
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	public void setComments(String comments) {
		_comments = comments;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public TempAttachmentDeclarationHealth toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TempAttachmentDeclarationHealth)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					TempAttachmentDeclarationHealth.class.getName(),
					getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TempAttachmentDeclarationHealthImpl tempAttachmentDeclarationHealthImpl = new TempAttachmentDeclarationHealthImpl();

		tempAttachmentDeclarationHealthImpl.setId(getId());
		tempAttachmentDeclarationHealthImpl.setRequestCode(getRequestCode());
		tempAttachmentDeclarationHealthImpl.setAttachmentCode(getAttachmentCode());
		tempAttachmentDeclarationHealthImpl.setPassengerOrCrewCode(getPassengerOrCrewCode());
		tempAttachmentDeclarationHealthImpl.setName(getName());
		tempAttachmentDeclarationHealthImpl.setAge(getAge());
		tempAttachmentDeclarationHealthImpl.setSex(getSex());
		tempAttachmentDeclarationHealthImpl.setNationality(getNationality());
		tempAttachmentDeclarationHealthImpl.setPortJoinVesselCode(getPortJoinVesselCode());
		tempAttachmentDeclarationHealthImpl.setDateJoinVessel(getDateJoinVessel());
		tempAttachmentDeclarationHealthImpl.setClassOrRating(getClassOrRating());
		tempAttachmentDeclarationHealthImpl.setNatureOfIllness(getNatureOfIllness());
		tempAttachmentDeclarationHealthImpl.setDateOfOnsetOfSymptom(getDateOfOnsetOfSymptom());
		tempAttachmentDeclarationHealthImpl.setReportedMedicalOfficer(getReportedMedicalOfficer());
		tempAttachmentDeclarationHealthImpl.setDisposalOfCase(getDisposalOfCase());
		tempAttachmentDeclarationHealthImpl.setMedicinesOrOther(getMedicinesOrOther());
		tempAttachmentDeclarationHealthImpl.setComments(getComments());

		tempAttachmentDeclarationHealthImpl.resetOriginalValues();

		return tempAttachmentDeclarationHealthImpl;
	}

	public int compareTo(
		TempAttachmentDeclarationHealth tempAttachmentDeclarationHealth) {
		int value = 0;

		if (getId() < tempAttachmentDeclarationHealth.getId()) {
			value = -1;
		}
		else if (getId() > tempAttachmentDeclarationHealth.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TempAttachmentDeclarationHealth tempAttachmentDeclarationHealth = null;

		try {
			tempAttachmentDeclarationHealth = (TempAttachmentDeclarationHealth)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tempAttachmentDeclarationHealth.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempAttachmentDeclarationHealthModelImpl tempAttachmentDeclarationHealthModelImpl =
			this;

		tempAttachmentDeclarationHealthModelImpl._originalRequestCode = tempAttachmentDeclarationHealthModelImpl._requestCode;

		tempAttachmentDeclarationHealthModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempAttachmentDeclarationHealth> toCacheModel() {
		TempAttachmentDeclarationHealthCacheModel tempAttachmentDeclarationHealthCacheModel =
			new TempAttachmentDeclarationHealthCacheModel();

		tempAttachmentDeclarationHealthCacheModel.id = getId();

		tempAttachmentDeclarationHealthCacheModel.requestCode = getRequestCode();

		String requestCode = tempAttachmentDeclarationHealthCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.requestCode = null;
		}

		tempAttachmentDeclarationHealthCacheModel.attachmentCode = getAttachmentCode();

		String attachmentCode = tempAttachmentDeclarationHealthCacheModel.attachmentCode;

		if ((attachmentCode != null) && (attachmentCode.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.attachmentCode = null;
		}

		tempAttachmentDeclarationHealthCacheModel.passengerOrCrewCode = getPassengerOrCrewCode();

		String passengerOrCrewCode = tempAttachmentDeclarationHealthCacheModel.passengerOrCrewCode;

		if ((passengerOrCrewCode != null) &&
				(passengerOrCrewCode.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.passengerOrCrewCode = null;
		}

		tempAttachmentDeclarationHealthCacheModel.name = getName();

		String name = tempAttachmentDeclarationHealthCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.name = null;
		}

		tempAttachmentDeclarationHealthCacheModel.age = getAge();

		tempAttachmentDeclarationHealthCacheModel.sex = getSex();

		tempAttachmentDeclarationHealthCacheModel.nationality = getNationality();

		String nationality = tempAttachmentDeclarationHealthCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.nationality = null;
		}

		tempAttachmentDeclarationHealthCacheModel.portJoinVesselCode = getPortJoinVesselCode();

		String portJoinVesselCode = tempAttachmentDeclarationHealthCacheModel.portJoinVesselCode;

		if ((portJoinVesselCode != null) && (portJoinVesselCode.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.portJoinVesselCode = null;
		}

		Date dateJoinVessel = getDateJoinVessel();

		if (dateJoinVessel != null) {
			tempAttachmentDeclarationHealthCacheModel.dateJoinVessel = dateJoinVessel.getTime();
		}
		else {
			tempAttachmentDeclarationHealthCacheModel.dateJoinVessel = Long.MIN_VALUE;
		}

		tempAttachmentDeclarationHealthCacheModel.classOrRating = getClassOrRating();

		tempAttachmentDeclarationHealthCacheModel.natureOfIllness = getNatureOfIllness();

		String natureOfIllness = tempAttachmentDeclarationHealthCacheModel.natureOfIllness;

		if ((natureOfIllness != null) && (natureOfIllness.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.natureOfIllness = null;
		}

		Date dateOfOnsetOfSymptom = getDateOfOnsetOfSymptom();

		if (dateOfOnsetOfSymptom != null) {
			tempAttachmentDeclarationHealthCacheModel.dateOfOnsetOfSymptom = dateOfOnsetOfSymptom.getTime();
		}
		else {
			tempAttachmentDeclarationHealthCacheModel.dateOfOnsetOfSymptom = Long.MIN_VALUE;
		}

		tempAttachmentDeclarationHealthCacheModel.reportedMedicalOfficer = getReportedMedicalOfficer();

		tempAttachmentDeclarationHealthCacheModel.disposalOfCase = getDisposalOfCase();

		String disposalOfCase = tempAttachmentDeclarationHealthCacheModel.disposalOfCase;

		if ((disposalOfCase != null) && (disposalOfCase.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.disposalOfCase = null;
		}

		tempAttachmentDeclarationHealthCacheModel.medicinesOrOther = getMedicinesOrOther();

		String medicinesOrOther = tempAttachmentDeclarationHealthCacheModel.medicinesOrOther;

		if ((medicinesOrOther != null) && (medicinesOrOther.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.medicinesOrOther = null;
		}

		tempAttachmentDeclarationHealthCacheModel.comments = getComments();

		String comments = tempAttachmentDeclarationHealthCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.comments = null;
		}

		return tempAttachmentDeclarationHealthCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", attachmentCode=");
		sb.append(getAttachmentCode());
		sb.append(", passengerOrCrewCode=");
		sb.append(getPassengerOrCrewCode());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", age=");
		sb.append(getAge());
		sb.append(", sex=");
		sb.append(getSex());
		sb.append(", nationality=");
		sb.append(getNationality());
		sb.append(", portJoinVesselCode=");
		sb.append(getPortJoinVesselCode());
		sb.append(", dateJoinVessel=");
		sb.append(getDateJoinVessel());
		sb.append(", classOrRating=");
		sb.append(getClassOrRating());
		sb.append(", natureOfIllness=");
		sb.append(getNatureOfIllness());
		sb.append(", dateOfOnsetOfSymptom=");
		sb.append(getDateOfOnsetOfSymptom());
		sb.append(", reportedMedicalOfficer=");
		sb.append(getReportedMedicalOfficer());
		sb.append(", disposalOfCase=");
		sb.append(getDisposalOfCase());
		sb.append(", medicinesOrOther=");
		sb.append(getMedicinesOrOther());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append(
			"vn.gt.dao.noticeandmessage.model.TempAttachmentDeclarationHealth");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachmentCode</column-name><column-value><![CDATA[");
		sb.append(getAttachmentCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passengerOrCrewCode</column-name><column-value><![CDATA[");
		sb.append(getPassengerOrCrewCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>age</column-name><column-value><![CDATA[");
		sb.append(getAge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sex</column-name><column-value><![CDATA[");
		sb.append(getSex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationality</column-name><column-value><![CDATA[");
		sb.append(getNationality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portJoinVesselCode</column-name><column-value><![CDATA[");
		sb.append(getPortJoinVesselCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateJoinVessel</column-name><column-value><![CDATA[");
		sb.append(getDateJoinVessel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classOrRating</column-name><column-value><![CDATA[");
		sb.append(getClassOrRating());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>natureOfIllness</column-name><column-value><![CDATA[");
		sb.append(getNatureOfIllness());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfOnsetOfSymptom</column-name><column-value><![CDATA[");
		sb.append(getDateOfOnsetOfSymptom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportedMedicalOfficer</column-name><column-value><![CDATA[");
		sb.append(getReportedMedicalOfficer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disposalOfCase</column-name><column-value><![CDATA[");
		sb.append(getDisposalOfCase());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>medicinesOrOther</column-name><column-value><![CDATA[");
		sb.append(getMedicinesOrOther());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempAttachmentDeclarationHealth.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TempAttachmentDeclarationHealth.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private String _attachmentCode;
	private String _passengerOrCrewCode;
	private String _name;
	private int _age;
	private int _sex;
	private String _nationality;
	private String _portJoinVesselCode;
	private Date _dateJoinVessel;
	private int _classOrRating;
	private String _natureOfIllness;
	private Date _dateOfOnsetOfSymptom;
	private int _reportedMedicalOfficer;
	private String _disposalOfCase;
	private String _medicinesOrOther;
	private String _comments;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private TempAttachmentDeclarationHealth _escapedModelProxy;
}