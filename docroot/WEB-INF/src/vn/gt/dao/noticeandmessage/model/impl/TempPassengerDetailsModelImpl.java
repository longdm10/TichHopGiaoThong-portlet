/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.TempPassengerDetails;
import vn.gt.dao.noticeandmessage.model.TempPassengerDetailsModel;
import vn.gt.dao.noticeandmessage.model.TempPassengerDetailsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the TempPassengerDetails service. Represents a row in the &quot;TEMP_PASSENGER_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.TempPassengerDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempPassengerDetailsImpl}.
 * </p>
 *
 * @author win_64
 * @see TempPassengerDetailsImpl
 * @see vn.gt.dao.noticeandmessage.model.TempPassengerDetails
 * @see vn.gt.dao.noticeandmessage.model.TempPassengerDetailsModel
 * @generated
 */
@JSON(strict = true)
public class TempPassengerDetailsModelImpl extends BaseModelImpl<TempPassengerDetails>
	implements TempPassengerDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp passenger details model instance should use the {@link vn.gt.dao.noticeandmessage.model.TempPassengerDetails} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_PASSENGER_DETAILS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "PassengerCode", Types.VARCHAR },
			{ "FamilyName", Types.VARCHAR },
			{ "GivenName", Types.VARCHAR },
			{ "Nationality", Types.VARCHAR },
			{ "BirthDay", Types.TIMESTAMP },
			{ "BirthPlace", Types.VARCHAR },
			{ "TypeOfIdentity", Types.VARCHAR },
			{ "PassportExpiredDate", Types.TIMESTAMP },
			{ "SerialNumberOfIdentity", Types.VARCHAR },
			{ "PortOfEmbarkation", Types.VARCHAR },
			{ "PortOfDisembarkation", Types.VARCHAR },
			{ "IsTransit", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_PASSENGER_DETAILS (ID LONG not null primary key,RequestCode VARCHAR(75) null,PassengerCode VARCHAR(75) null,FamilyName VARCHAR(75) null,GivenName VARCHAR(75) null,Nationality VARCHAR(75) null,BirthDay DATE null,BirthPlace VARCHAR(75) null,TypeOfIdentity VARCHAR(75) null,PassportExpiredDate DATE null,SerialNumberOfIdentity VARCHAR(75) null,PortOfEmbarkation VARCHAR(75) null,PortOfDisembarkation VARCHAR(75) null,IsTransit INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_PASSENGER_DETAILS";
	public static final String ORDER_BY_JPQL = " ORDER BY tempPassengerDetails.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_PASSENGER_DETAILS.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.TempPassengerDetails"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.TempPassengerDetails"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.TempPassengerDetails"),
			true);
	public static long PASSENGERCODE_COLUMN_BITMASK = 1L;
	public static long REQUESTCODE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempPassengerDetails toModel(
		TempPassengerDetailsSoap soapModel) {
		TempPassengerDetails model = new TempPassengerDetailsImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setPassengerCode(soapModel.getPassengerCode());
		model.setFamilyName(soapModel.getFamilyName());
		model.setGivenName(soapModel.getGivenName());
		model.setNationality(soapModel.getNationality());
		model.setBirthDay(soapModel.getBirthDay());
		model.setBirthPlace(soapModel.getBirthPlace());
		model.setTypeOfIdentity(soapModel.getTypeOfIdentity());
		model.setPassportExpiredDate(soapModel.getPassportExpiredDate());
		model.setSerialNumberOfIdentity(soapModel.getSerialNumberOfIdentity());
		model.setPortOfEmbarkation(soapModel.getPortOfEmbarkation());
		model.setPortOfDisembarkation(soapModel.getPortOfDisembarkation());
		model.setIsTransit(soapModel.getIsTransit());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempPassengerDetails> toModels(
		TempPassengerDetailsSoap[] soapModels) {
		List<TempPassengerDetails> models = new ArrayList<TempPassengerDetails>(soapModels.length);

		for (TempPassengerDetailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.TempPassengerDetails"));

	public TempPassengerDetailsModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TempPassengerDetails.class;
	}

	public String getModelClassName() {
		return TempPassengerDetails.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	public String getPassengerCode() {
		if (_passengerCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _passengerCode;
		}
	}

	public void setPassengerCode(String passengerCode) {
		_columnBitmask |= PASSENGERCODE_COLUMN_BITMASK;

		if (_originalPassengerCode == null) {
			_originalPassengerCode = _passengerCode;
		}

		_passengerCode = passengerCode;
	}

	public String getOriginalPassengerCode() {
		return GetterUtil.getString(_originalPassengerCode);
	}

	@JSON
	public String getFamilyName() {
		if (_familyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _familyName;
		}
	}

	public void setFamilyName(String familyName) {
		_familyName = familyName;
	}

	@JSON
	public String getGivenName() {
		if (_givenName == null) {
			return StringPool.BLANK;
		}
		else {
			return _givenName;
		}
	}

	public void setGivenName(String givenName) {
		_givenName = givenName;
	}

	@JSON
	public String getNationality() {
		if (_nationality == null) {
			return StringPool.BLANK;
		}
		else {
			return _nationality;
		}
	}

	public void setNationality(String nationality) {
		_nationality = nationality;
	}

	@JSON
	public Date getBirthDay() {
		return _birthDay;
	}

	public void setBirthDay(Date birthDay) {
		_birthDay = birthDay;
	}

	@JSON
	public String getBirthPlace() {
		if (_birthPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _birthPlace;
		}
	}

	public void setBirthPlace(String birthPlace) {
		_birthPlace = birthPlace;
	}

	@JSON
	public String getTypeOfIdentity() {
		if (_typeOfIdentity == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeOfIdentity;
		}
	}

	public void setTypeOfIdentity(String typeOfIdentity) {
		_typeOfIdentity = typeOfIdentity;
	}

	@JSON
	public Date getPassportExpiredDate() {
		return _passportExpiredDate;
	}

	public void setPassportExpiredDate(Date passportExpiredDate) {
		_passportExpiredDate = passportExpiredDate;
	}

	@JSON
	public String getSerialNumberOfIdentity() {
		if (_serialNumberOfIdentity == null) {
			return StringPool.BLANK;
		}
		else {
			return _serialNumberOfIdentity;
		}
	}

	public void setSerialNumberOfIdentity(String serialNumberOfIdentity) {
		_serialNumberOfIdentity = serialNumberOfIdentity;
	}

	@JSON
	public String getPortOfEmbarkation() {
		if (_portOfEmbarkation == null) {
			return StringPool.BLANK;
		}
		else {
			return _portOfEmbarkation;
		}
	}

	public void setPortOfEmbarkation(String portOfEmbarkation) {
		_portOfEmbarkation = portOfEmbarkation;
	}

	@JSON
	public String getPortOfDisembarkation() {
		if (_portOfDisembarkation == null) {
			return StringPool.BLANK;
		}
		else {
			return _portOfDisembarkation;
		}
	}

	public void setPortOfDisembarkation(String portOfDisembarkation) {
		_portOfDisembarkation = portOfDisembarkation;
	}

	@JSON
	public int getIsTransit() {
		return _isTransit;
	}

	public void setIsTransit(int isTransit) {
		_isTransit = isTransit;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public TempPassengerDetails toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TempPassengerDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					TempPassengerDetails.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TempPassengerDetailsImpl tempPassengerDetailsImpl = new TempPassengerDetailsImpl();

		tempPassengerDetailsImpl.setId(getId());
		tempPassengerDetailsImpl.setRequestCode(getRequestCode());
		tempPassengerDetailsImpl.setPassengerCode(getPassengerCode());
		tempPassengerDetailsImpl.setFamilyName(getFamilyName());
		tempPassengerDetailsImpl.setGivenName(getGivenName());
		tempPassengerDetailsImpl.setNationality(getNationality());
		tempPassengerDetailsImpl.setBirthDay(getBirthDay());
		tempPassengerDetailsImpl.setBirthPlace(getBirthPlace());
		tempPassengerDetailsImpl.setTypeOfIdentity(getTypeOfIdentity());
		tempPassengerDetailsImpl.setPassportExpiredDate(getPassportExpiredDate());
		tempPassengerDetailsImpl.setSerialNumberOfIdentity(getSerialNumberOfIdentity());
		tempPassengerDetailsImpl.setPortOfEmbarkation(getPortOfEmbarkation());
		tempPassengerDetailsImpl.setPortOfDisembarkation(getPortOfDisembarkation());
		tempPassengerDetailsImpl.setIsTransit(getIsTransit());

		tempPassengerDetailsImpl.resetOriginalValues();

		return tempPassengerDetailsImpl;
	}

	public int compareTo(TempPassengerDetails tempPassengerDetails) {
		int value = 0;

		if (getId() < tempPassengerDetails.getId()) {
			value = -1;
		}
		else if (getId() > tempPassengerDetails.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TempPassengerDetails tempPassengerDetails = null;

		try {
			tempPassengerDetails = (TempPassengerDetails)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tempPassengerDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempPassengerDetailsModelImpl tempPassengerDetailsModelImpl = this;

		tempPassengerDetailsModelImpl._originalRequestCode = tempPassengerDetailsModelImpl._requestCode;

		tempPassengerDetailsModelImpl._originalPassengerCode = tempPassengerDetailsModelImpl._passengerCode;

		tempPassengerDetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempPassengerDetails> toCacheModel() {
		TempPassengerDetailsCacheModel tempPassengerDetailsCacheModel = new TempPassengerDetailsCacheModel();

		tempPassengerDetailsCacheModel.id = getId();

		tempPassengerDetailsCacheModel.requestCode = getRequestCode();

		String requestCode = tempPassengerDetailsCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempPassengerDetailsCacheModel.requestCode = null;
		}

		tempPassengerDetailsCacheModel.passengerCode = getPassengerCode();

		String passengerCode = tempPassengerDetailsCacheModel.passengerCode;

		if ((passengerCode != null) && (passengerCode.length() == 0)) {
			tempPassengerDetailsCacheModel.passengerCode = null;
		}

		tempPassengerDetailsCacheModel.familyName = getFamilyName();

		String familyName = tempPassengerDetailsCacheModel.familyName;

		if ((familyName != null) && (familyName.length() == 0)) {
			tempPassengerDetailsCacheModel.familyName = null;
		}

		tempPassengerDetailsCacheModel.givenName = getGivenName();

		String givenName = tempPassengerDetailsCacheModel.givenName;

		if ((givenName != null) && (givenName.length() == 0)) {
			tempPassengerDetailsCacheModel.givenName = null;
		}

		tempPassengerDetailsCacheModel.nationality = getNationality();

		String nationality = tempPassengerDetailsCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			tempPassengerDetailsCacheModel.nationality = null;
		}

		Date birthDay = getBirthDay();

		if (birthDay != null) {
			tempPassengerDetailsCacheModel.birthDay = birthDay.getTime();
		}
		else {
			tempPassengerDetailsCacheModel.birthDay = Long.MIN_VALUE;
		}

		tempPassengerDetailsCacheModel.birthPlace = getBirthPlace();

		String birthPlace = tempPassengerDetailsCacheModel.birthPlace;

		if ((birthPlace != null) && (birthPlace.length() == 0)) {
			tempPassengerDetailsCacheModel.birthPlace = null;
		}

		tempPassengerDetailsCacheModel.typeOfIdentity = getTypeOfIdentity();

		String typeOfIdentity = tempPassengerDetailsCacheModel.typeOfIdentity;

		if ((typeOfIdentity != null) && (typeOfIdentity.length() == 0)) {
			tempPassengerDetailsCacheModel.typeOfIdentity = null;
		}

		Date passportExpiredDate = getPassportExpiredDate();

		if (passportExpiredDate != null) {
			tempPassengerDetailsCacheModel.passportExpiredDate = passportExpiredDate.getTime();
		}
		else {
			tempPassengerDetailsCacheModel.passportExpiredDate = Long.MIN_VALUE;
		}

		tempPassengerDetailsCacheModel.serialNumberOfIdentity = getSerialNumberOfIdentity();

		String serialNumberOfIdentity = tempPassengerDetailsCacheModel.serialNumberOfIdentity;

		if ((serialNumberOfIdentity != null) &&
				(serialNumberOfIdentity.length() == 0)) {
			tempPassengerDetailsCacheModel.serialNumberOfIdentity = null;
		}

		tempPassengerDetailsCacheModel.portOfEmbarkation = getPortOfEmbarkation();

		String portOfEmbarkation = tempPassengerDetailsCacheModel.portOfEmbarkation;

		if ((portOfEmbarkation != null) && (portOfEmbarkation.length() == 0)) {
			tempPassengerDetailsCacheModel.portOfEmbarkation = null;
		}

		tempPassengerDetailsCacheModel.portOfDisembarkation = getPortOfDisembarkation();

		String portOfDisembarkation = tempPassengerDetailsCacheModel.portOfDisembarkation;

		if ((portOfDisembarkation != null) &&
				(portOfDisembarkation.length() == 0)) {
			tempPassengerDetailsCacheModel.portOfDisembarkation = null;
		}

		tempPassengerDetailsCacheModel.isTransit = getIsTransit();

		return tempPassengerDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", passengerCode=");
		sb.append(getPassengerCode());
		sb.append(", familyName=");
		sb.append(getFamilyName());
		sb.append(", givenName=");
		sb.append(getGivenName());
		sb.append(", nationality=");
		sb.append(getNationality());
		sb.append(", birthDay=");
		sb.append(getBirthDay());
		sb.append(", birthPlace=");
		sb.append(getBirthPlace());
		sb.append(", typeOfIdentity=");
		sb.append(getTypeOfIdentity());
		sb.append(", passportExpiredDate=");
		sb.append(getPassportExpiredDate());
		sb.append(", serialNumberOfIdentity=");
		sb.append(getSerialNumberOfIdentity());
		sb.append(", portOfEmbarkation=");
		sb.append(getPortOfEmbarkation());
		sb.append(", portOfDisembarkation=");
		sb.append(getPortOfDisembarkation());
		sb.append(", isTransit=");
		sb.append(getIsTransit());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.TempPassengerDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passengerCode</column-name><column-value><![CDATA[");
		sb.append(getPassengerCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>familyName</column-name><column-value><![CDATA[");
		sb.append(getFamilyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>givenName</column-name><column-value><![CDATA[");
		sb.append(getGivenName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationality</column-name><column-value><![CDATA[");
		sb.append(getNationality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthDay</column-name><column-value><![CDATA[");
		sb.append(getBirthDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthPlace</column-name><column-value><![CDATA[");
		sb.append(getBirthPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeOfIdentity</column-name><column-value><![CDATA[");
		sb.append(getTypeOfIdentity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passportExpiredDate</column-name><column-value><![CDATA[");
		sb.append(getPassportExpiredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serialNumberOfIdentity</column-name><column-value><![CDATA[");
		sb.append(getSerialNumberOfIdentity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portOfEmbarkation</column-name><column-value><![CDATA[");
		sb.append(getPortOfEmbarkation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portOfDisembarkation</column-name><column-value><![CDATA[");
		sb.append(getPortOfDisembarkation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isTransit</column-name><column-value><![CDATA[");
		sb.append(getIsTransit());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempPassengerDetails.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TempPassengerDetails.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private String _passengerCode;
	private String _originalPassengerCode;
	private String _familyName;
	private String _givenName;
	private String _nationality;
	private Date _birthDay;
	private String _birthPlace;
	private String _typeOfIdentity;
	private Date _passportExpiredDate;
	private String _serialNumberOfIdentity;
	private String _portOfEmbarkation;
	private String _portOfDisembarkation;
	private int _isTransit;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private TempPassengerDetails _escapedModelProxy;
}