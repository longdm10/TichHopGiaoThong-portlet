/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.TempNoTiceShipMessage;
import vn.gt.dao.noticeandmessage.model.TempNoTiceShipMessageModel;
import vn.gt.dao.noticeandmessage.model.TempNoTiceShipMessageSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the TempNoTiceShipMessage service. Represents a row in the &quot;TEMP_NOTICE_SHIP_MESSAGE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.TempNoTiceShipMessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempNoTiceShipMessageImpl}.
 * </p>
 *
 * @author win_64
 * @see TempNoTiceShipMessageImpl
 * @see vn.gt.dao.noticeandmessage.model.TempNoTiceShipMessage
 * @see vn.gt.dao.noticeandmessage.model.TempNoTiceShipMessageModel
 * @generated
 */
@JSON(strict = true)
public class TempNoTiceShipMessageModelImpl extends BaseModelImpl<TempNoTiceShipMessage>
	implements TempNoTiceShipMessageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp no tice ship message model instance should use the {@link vn.gt.dao.noticeandmessage.model.TempNoTiceShipMessage} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_NOTICE_SHIP_MESSAGE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "RequestState", Types.INTEGER },
			{ "NoticeShipType", Types.VARCHAR },
			{ "NoticeShipCode", Types.VARCHAR },
			{ "DocumentName", Types.BIGINT },
			{ "UserCreated", Types.VARCHAR },
			{ "ConfirmTime", Types.INTEGER },
			{ "ShipName", Types.VARCHAR },
			{ "ShipTypeCode", Types.VARCHAR },
			{ "StateCode", Types.VARCHAR },
			{ "ShipCaptain", Types.VARCHAR },
			{ "IMO", Types.VARCHAR },
			{ "GRT", Types.DOUBLE },
			{ "DWT", Types.DOUBLE },
			{ "UnitGRT", Types.VARCHAR },
			{ "UnitDWT", Types.VARCHAR },
			{ "CallSign", Types.VARCHAR },
			{ "ArrivalDate", Types.TIMESTAMP },
			{ "ArrivalPortCode", Types.VARCHAR },
			{ "PortHarbourCode", Types.VARCHAR },
			{ "PortRegionCode", Types.VARCHAR },
			{ "PortWharfCode", Types.VARCHAR },
			{ "PortGoingToStateName", Types.VARCHAR },
			{ "PortGoingToCode", Types.VARCHAR },
			{ "NameOfShipOwners", Types.VARCHAR },
			{ "AddressOfShipOwners", Types.VARCHAR },
			{ "ShipOwnerStateCode", Types.VARCHAR },
			{ "ShipOwnerPhone", Types.VARCHAR },
			{ "ShipOwnerFax", Types.VARCHAR },
			{ "ShipOwnerEmail", Types.VARCHAR },
			{ "LOA", Types.DOUBLE },
			{ "Breadth", Types.DOUBLE },
			{ "ClearanceHeight", Types.DOUBLE },
			{ "ShownDraftxF", Types.DOUBLE },
			{ "ShownDraftxA", Types.DOUBLE },
			{ "UnitLOA", Types.VARCHAR },
			{ "UnitBreadth", Types.VARCHAR },
			{ "UnitClearanceHeight", Types.VARCHAR },
			{ "UnitShownDraftxF", Types.VARCHAR },
			{ "UnitShownDraftxA", Types.VARCHAR },
			{ "CertificateOfRegistryNumber", Types.VARCHAR },
			{ "CertificateOfRegistryDate", Types.TIMESTAMP },
			{ "CertificateOfRegistryPortName", Types.VARCHAR },
			{ "ShipAgencyCode", Types.VARCHAR },
			{ "ShipAgencyAddress", Types.VARCHAR },
			{ "ShipAgencyPhone", Types.VARCHAR },
			{ "ShipAgencyFax", Types.VARCHAR },
			{ "ShipAgencyEmail", Types.VARCHAR },
			{ "PurposeCode", Types.VARCHAR },
			{ "PurposeSpecified", Types.VARCHAR },
			{ "CrewNumber", Types.BIGINT },
			{ "UnitCrew", Types.VARCHAR },
			{ "PassengerNumber", Types.BIGINT },
			{ "UnitPassenger", Types.VARCHAR },
			{ "QuantityOfCargo", Types.VARCHAR },
			{ "UnitQuantityofCargo", Types.VARCHAR },
			{ "TypeOfCargo", Types.VARCHAR },
			{ "OtherPersons", Types.INTEGER },
			{ "Remarks", Types.VARCHAR },
			{ "SignPlace", Types.VARCHAR },
			{ "SignDate", Types.TIMESTAMP },
			{ "MasterSigned", Types.INTEGER },
			{ "MasterSignedImage", Types.INTEGER },
			{ "DocumentYear", Types.INTEGER },
			{ "NameOfShipAgent", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_NOTICE_SHIP_MESSAGE (ID LONG not null primary key,RequestCode VARCHAR(75) null,RequestState INTEGER,NoticeShipType VARCHAR(75) null,NoticeShipCode VARCHAR(75) null,DocumentName LONG,UserCreated VARCHAR(75) null,ConfirmTime INTEGER,ShipName VARCHAR(75) null,ShipTypeCode VARCHAR(75) null,StateCode VARCHAR(75) null,ShipCaptain VARCHAR(75) null,IMO VARCHAR(75) null,GRT DOUBLE,DWT DOUBLE,UnitGRT VARCHAR(75) null,UnitDWT VARCHAR(75) null,CallSign VARCHAR(75) null,ArrivalDate DATE null,ArrivalPortCode VARCHAR(75) null,PortHarbourCode VARCHAR(75) null,PortRegionCode VARCHAR(75) null,PortWharfCode VARCHAR(75) null,PortGoingToStateName VARCHAR(75) null,PortGoingToCode VARCHAR(75) null,NameOfShipOwners VARCHAR(75) null,AddressOfShipOwners VARCHAR(75) null,ShipOwnerStateCode VARCHAR(75) null,ShipOwnerPhone VARCHAR(75) null,ShipOwnerFax VARCHAR(75) null,ShipOwnerEmail VARCHAR(75) null,LOA DOUBLE,Breadth DOUBLE,ClearanceHeight DOUBLE,ShownDraftxF DOUBLE,ShownDraftxA DOUBLE,UnitLOA VARCHAR(75) null,UnitBreadth VARCHAR(75) null,UnitClearanceHeight VARCHAR(75) null,UnitShownDraftxF VARCHAR(75) null,UnitShownDraftxA VARCHAR(75) null,CertificateOfRegistryNumber VARCHAR(75) null,CertificateOfRegistryDate DATE null,CertificateOfRegistryPortName VARCHAR(75) null,ShipAgencyCode VARCHAR(75) null,ShipAgencyAddress VARCHAR(75) null,ShipAgencyPhone VARCHAR(75) null,ShipAgencyFax VARCHAR(75) null,ShipAgencyEmail VARCHAR(75) null,PurposeCode VARCHAR(75) null,PurposeSpecified VARCHAR(75) null,CrewNumber LONG,UnitCrew VARCHAR(75) null,PassengerNumber LONG,UnitPassenger VARCHAR(75) null,QuantityOfCargo VARCHAR(75) null,UnitQuantityofCargo VARCHAR(75) null,TypeOfCargo VARCHAR(75) null,OtherPersons INTEGER,Remarks VARCHAR(75) null,SignPlace VARCHAR(75) null,SignDate DATE null,MasterSigned INTEGER,MasterSignedImage INTEGER,DocumentYear INTEGER,NameOfShipAgent VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_NOTICE_SHIP_MESSAGE";
	public static final String ORDER_BY_JPQL = " ORDER BY tempNoTiceShipMessage.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_NOTICE_SHIP_MESSAGE.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.TempNoTiceShipMessage"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.TempNoTiceShipMessage"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.TempNoTiceShipMessage"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long NOTICESHIPTYPE_COLUMN_BITMASK = 4L;
	public static long REQUESTCODE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempNoTiceShipMessage toModel(
		TempNoTiceShipMessageSoap soapModel) {
		TempNoTiceShipMessage model = new TempNoTiceShipMessageImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setRequestState(soapModel.getRequestState());
		model.setNoticeShipType(soapModel.getNoticeShipType());
		model.setNoticeShipCode(soapModel.getNoticeShipCode());
		model.setDocumentName(soapModel.getDocumentName());
		model.setUserCreated(soapModel.getUserCreated());
		model.setConfirmTime(soapModel.getConfirmTime());
		model.setShipName(soapModel.getShipName());
		model.setShipTypeCode(soapModel.getShipTypeCode());
		model.setStateCode(soapModel.getStateCode());
		model.setShipCaptain(soapModel.getShipCaptain());
		model.setImo(soapModel.getImo());
		model.setGrt(soapModel.getGrt());
		model.setDwt(soapModel.getDwt());
		model.setUnitGRT(soapModel.getUnitGRT());
		model.setUnitDWT(soapModel.getUnitDWT());
		model.setCallSign(soapModel.getCallSign());
		model.setArrivalDate(soapModel.getArrivalDate());
		model.setArrivalPortCode(soapModel.getArrivalPortCode());
		model.setPortHarbourCode(soapModel.getPortHarbourCode());
		model.setPortRegionCode(soapModel.getPortRegionCode());
		model.setPortWharfCode(soapModel.getPortWharfCode());
		model.setPortGoingToStateName(soapModel.getPortGoingToStateName());
		model.setPortGoingToCode(soapModel.getPortGoingToCode());
		model.setNameOfShipOwners(soapModel.getNameOfShipOwners());
		model.setAddressOfShipOwners(soapModel.getAddressOfShipOwners());
		model.setShipOwnerstateCode(soapModel.getShipOwnerstateCode());
		model.setShipOwnerPhone(soapModel.getShipOwnerPhone());
		model.setShipOwnerFax(soapModel.getShipOwnerFax());
		model.setShipOwnerEmail(soapModel.getShipOwnerEmail());
		model.setLoa(soapModel.getLoa());
		model.setBreadth(soapModel.getBreadth());
		model.setClearanceHeight(soapModel.getClearanceHeight());
		model.setShownDraftxF(soapModel.getShownDraftxF());
		model.setShownDraftxA(soapModel.getShownDraftxA());
		model.setUnitLOA(soapModel.getUnitLOA());
		model.setUnitBreadth(soapModel.getUnitBreadth());
		model.setUnitClearanceHeight(soapModel.getUnitClearanceHeight());
		model.setUnitShownDraftxF(soapModel.getUnitShownDraftxF());
		model.setUnitShownDraftxA(soapModel.getUnitShownDraftxA());
		model.setCertificateOfRegistryNumber(soapModel.getCertificateOfRegistryNumber());
		model.setCertificateOfRegistryDate(soapModel.getCertificateOfRegistryDate());
		model.setCertificateOfRegistryPortName(soapModel.getCertificateOfRegistryPortName());
		model.setShipAgencyCode(soapModel.getShipAgencyCode());
		model.setShipAgencyAddress(soapModel.getShipAgencyAddress());
		model.setShipAgencyPhone(soapModel.getShipAgencyPhone());
		model.setShipAgencyFax(soapModel.getShipAgencyFax());
		model.setShipAgencyEmail(soapModel.getShipAgencyEmail());
		model.setPurposeCode(soapModel.getPurposeCode());
		model.setPurposeSpecified(soapModel.getPurposeSpecified());
		model.setCrewNumber(soapModel.getCrewNumber());
		model.setUnitCrew(soapModel.getUnitCrew());
		model.setPassengerNumber(soapModel.getPassengerNumber());
		model.setUnitPassenger(soapModel.getUnitPassenger());
		model.setQuantityAndTypeOfCargo(soapModel.getQuantityAndTypeOfCargo());
		model.setUnitQuantityofCargo(soapModel.getUnitQuantityofCargo());
		model.setTypeOfCargo(soapModel.getTypeOfCargo());
		model.setOtherPersons(soapModel.getOtherPersons());
		model.setRemarks(soapModel.getRemarks());
		model.setSignPlace(soapModel.getSignPlace());
		model.setSignDate(soapModel.getSignDate());
		model.setMasterSigned(soapModel.getMasterSigned());
		model.setMasterSignedImage(soapModel.getMasterSignedImage());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setNameOfShipAgent(soapModel.getNameOfShipAgent());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempNoTiceShipMessage> toModels(
		TempNoTiceShipMessageSoap[] soapModels) {
		List<TempNoTiceShipMessage> models = new ArrayList<TempNoTiceShipMessage>(soapModels.length);

		for (TempNoTiceShipMessageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.TempNoTiceShipMessage"));

	public TempNoTiceShipMessageModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TempNoTiceShipMessage.class;
	}

	public String getModelClassName() {
		return TempNoTiceShipMessage.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	public int getRequestState() {
		return _requestState;
	}

	public void setRequestState(int requestState) {
		_requestState = requestState;
	}

	@JSON
	public String getNoticeShipType() {
		if (_noticeShipType == null) {
			return StringPool.BLANK;
		}
		else {
			return _noticeShipType;
		}
	}

	public void setNoticeShipType(String noticeShipType) {
		_columnBitmask |= NOTICESHIPTYPE_COLUMN_BITMASK;

		if (_originalNoticeShipType == null) {
			_originalNoticeShipType = _noticeShipType;
		}

		_noticeShipType = noticeShipType;
	}

	public String getOriginalNoticeShipType() {
		return GetterUtil.getString(_originalNoticeShipType);
	}

	@JSON
	public String getNoticeShipCode() {
		if (_noticeShipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _noticeShipCode;
		}
	}

	public void setNoticeShipCode(String noticeShipCode) {
		_noticeShipCode = noticeShipCode;
	}

	@JSON
	public long getDocumentName() {
		return _documentName;
	}

	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	public String getUserCreated() {
		if (_userCreated == null) {
			return StringPool.BLANK;
		}
		else {
			return _userCreated;
		}
	}

	public void setUserCreated(String userCreated) {
		_userCreated = userCreated;
	}

	@JSON
	public int getConfirmTime() {
		return _confirmTime;
	}

	public void setConfirmTime(int confirmTime) {
		_confirmTime = confirmTime;
	}

	@JSON
	public String getShipName() {
		if (_shipName == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipName;
		}
	}

	public void setShipName(String shipName) {
		_shipName = shipName;
	}

	@JSON
	public String getShipTypeCode() {
		if (_shipTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipTypeCode;
		}
	}

	public void setShipTypeCode(String shipTypeCode) {
		_shipTypeCode = shipTypeCode;
	}

	@JSON
	public String getStateCode() {
		if (_stateCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateCode;
		}
	}

	public void setStateCode(String stateCode) {
		_stateCode = stateCode;
	}

	@JSON
	public String getShipCaptain() {
		if (_shipCaptain == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipCaptain;
		}
	}

	public void setShipCaptain(String shipCaptain) {
		_shipCaptain = shipCaptain;
	}

	@JSON
	public String getImo() {
		if (_imo == null) {
			return StringPool.BLANK;
		}
		else {
			return _imo;
		}
	}

	public void setImo(String imo) {
		_imo = imo;
	}

	@JSON
	public double getGrt() {
		return _grt;
	}

	public void setGrt(double grt) {
		_grt = grt;
	}

	@JSON
	public double getDwt() {
		return _dwt;
	}

	public void setDwt(double dwt) {
		_dwt = dwt;
	}

	@JSON
	public String getUnitGRT() {
		if (_unitGRT == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitGRT;
		}
	}

	public void setUnitGRT(String unitGRT) {
		_unitGRT = unitGRT;
	}

	@JSON
	public String getUnitDWT() {
		if (_unitDWT == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitDWT;
		}
	}

	public void setUnitDWT(String unitDWT) {
		_unitDWT = unitDWT;
	}

	@JSON
	public String getCallSign() {
		if (_callSign == null) {
			return StringPool.BLANK;
		}
		else {
			return _callSign;
		}
	}

	public void setCallSign(String callSign) {
		_callSign = callSign;
	}

	@JSON
	public Date getArrivalDate() {
		return _arrivalDate;
	}

	public void setArrivalDate(Date arrivalDate) {
		_arrivalDate = arrivalDate;
	}

	@JSON
	public String getArrivalPortCode() {
		if (_arrivalPortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _arrivalPortCode;
		}
	}

	public void setArrivalPortCode(String arrivalPortCode) {
		_arrivalPortCode = arrivalPortCode;
	}

	@JSON
	public String getPortHarbourCode() {
		if (_portHarbourCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portHarbourCode;
		}
	}

	public void setPortHarbourCode(String portHarbourCode) {
		_portHarbourCode = portHarbourCode;
	}

	@JSON
	public String getPortRegionCode() {
		if (_portRegionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portRegionCode;
		}
	}

	public void setPortRegionCode(String portRegionCode) {
		_portRegionCode = portRegionCode;
	}

	@JSON
	public String getPortWharfCode() {
		if (_portWharfCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portWharfCode;
		}
	}

	public void setPortWharfCode(String portWharfCode) {
		_portWharfCode = portWharfCode;
	}

	@JSON
	public String getPortGoingToStateName() {
		if (_portGoingToStateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _portGoingToStateName;
		}
	}

	public void setPortGoingToStateName(String portGoingToStateName) {
		_portGoingToStateName = portGoingToStateName;
	}

	@JSON
	public String getPortGoingToCode() {
		if (_portGoingToCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portGoingToCode;
		}
	}

	public void setPortGoingToCode(String portGoingToCode) {
		_portGoingToCode = portGoingToCode;
	}

	@JSON
	public String getNameOfShipOwners() {
		if (_nameOfShipOwners == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShipOwners;
		}
	}

	public void setNameOfShipOwners(String nameOfShipOwners) {
		_nameOfShipOwners = nameOfShipOwners;
	}

	@JSON
	public String getAddressOfShipOwners() {
		if (_addressOfShipOwners == null) {
			return StringPool.BLANK;
		}
		else {
			return _addressOfShipOwners;
		}
	}

	public void setAddressOfShipOwners(String addressOfShipOwners) {
		_addressOfShipOwners = addressOfShipOwners;
	}

	@JSON
	public String getShipOwnerstateCode() {
		if (_shipOwnerstateCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipOwnerstateCode;
		}
	}

	public void setShipOwnerstateCode(String shipOwnerstateCode) {
		_shipOwnerstateCode = shipOwnerstateCode;
	}

	@JSON
	public String getShipOwnerPhone() {
		if (_shipOwnerPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipOwnerPhone;
		}
	}

	public void setShipOwnerPhone(String shipOwnerPhone) {
		_shipOwnerPhone = shipOwnerPhone;
	}

	@JSON
	public String getShipOwnerFax() {
		if (_shipOwnerFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipOwnerFax;
		}
	}

	public void setShipOwnerFax(String shipOwnerFax) {
		_shipOwnerFax = shipOwnerFax;
	}

	@JSON
	public String getShipOwnerEmail() {
		if (_shipOwnerEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipOwnerEmail;
		}
	}

	public void setShipOwnerEmail(String shipOwnerEmail) {
		_shipOwnerEmail = shipOwnerEmail;
	}

	@JSON
	public double getLoa() {
		return _loa;
	}

	public void setLoa(double loa) {
		_loa = loa;
	}

	@JSON
	public double getBreadth() {
		return _breadth;
	}

	public void setBreadth(double breadth) {
		_breadth = breadth;
	}

	@JSON
	public double getClearanceHeight() {
		return _clearanceHeight;
	}

	public void setClearanceHeight(double clearanceHeight) {
		_clearanceHeight = clearanceHeight;
	}

	@JSON
	public double getShownDraftxF() {
		return _shownDraftxF;
	}

	public void setShownDraftxF(double shownDraftxF) {
		_shownDraftxF = shownDraftxF;
	}

	@JSON
	public double getShownDraftxA() {
		return _shownDraftxA;
	}

	public void setShownDraftxA(double shownDraftxA) {
		_shownDraftxA = shownDraftxA;
	}

	@JSON
	public String getUnitLOA() {
		if (_unitLOA == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitLOA;
		}
	}

	public void setUnitLOA(String unitLOA) {
		_unitLOA = unitLOA;
	}

	@JSON
	public String getUnitBreadth() {
		if (_unitBreadth == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitBreadth;
		}
	}

	public void setUnitBreadth(String unitBreadth) {
		_unitBreadth = unitBreadth;
	}

	@JSON
	public String getUnitClearanceHeight() {
		if (_unitClearanceHeight == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitClearanceHeight;
		}
	}

	public void setUnitClearanceHeight(String unitClearanceHeight) {
		_unitClearanceHeight = unitClearanceHeight;
	}

	@JSON
	public String getUnitShownDraftxF() {
		if (_unitShownDraftxF == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitShownDraftxF;
		}
	}

	public void setUnitShownDraftxF(String unitShownDraftxF) {
		_unitShownDraftxF = unitShownDraftxF;
	}

	@JSON
	public String getUnitShownDraftxA() {
		if (_unitShownDraftxA == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitShownDraftxA;
		}
	}

	public void setUnitShownDraftxA(String unitShownDraftxA) {
		_unitShownDraftxA = unitShownDraftxA;
	}

	@JSON
	public String getCertificateOfRegistryNumber() {
		if (_certificateOfRegistryNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateOfRegistryNumber;
		}
	}

	public void setCertificateOfRegistryNumber(
		String certificateOfRegistryNumber) {
		_certificateOfRegistryNumber = certificateOfRegistryNumber;
	}

	@JSON
	public Date getCertificateOfRegistryDate() {
		return _certificateOfRegistryDate;
	}

	public void setCertificateOfRegistryDate(Date certificateOfRegistryDate) {
		_certificateOfRegistryDate = certificateOfRegistryDate;
	}

	@JSON
	public String getCertificateOfRegistryPortName() {
		if (_certificateOfRegistryPortName == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateOfRegistryPortName;
		}
	}

	public void setCertificateOfRegistryPortName(
		String certificateOfRegistryPortName) {
		_certificateOfRegistryPortName = certificateOfRegistryPortName;
	}

	@JSON
	public String getShipAgencyCode() {
		if (_shipAgencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyCode;
		}
	}

	public void setShipAgencyCode(String shipAgencyCode) {
		_shipAgencyCode = shipAgencyCode;
	}

	@JSON
	public String getShipAgencyAddress() {
		if (_shipAgencyAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyAddress;
		}
	}

	public void setShipAgencyAddress(String shipAgencyAddress) {
		_shipAgencyAddress = shipAgencyAddress;
	}

	@JSON
	public String getShipAgencyPhone() {
		if (_shipAgencyPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyPhone;
		}
	}

	public void setShipAgencyPhone(String shipAgencyPhone) {
		_shipAgencyPhone = shipAgencyPhone;
	}

	@JSON
	public String getShipAgencyFax() {
		if (_shipAgencyFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyFax;
		}
	}

	public void setShipAgencyFax(String shipAgencyFax) {
		_shipAgencyFax = shipAgencyFax;
	}

	@JSON
	public String getShipAgencyEmail() {
		if (_shipAgencyEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyEmail;
		}
	}

	public void setShipAgencyEmail(String shipAgencyEmail) {
		_shipAgencyEmail = shipAgencyEmail;
	}

	@JSON
	public String getPurposeCode() {
		if (_purposeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _purposeCode;
		}
	}

	public void setPurposeCode(String purposeCode) {
		_purposeCode = purposeCode;
	}

	@JSON
	public String getPurposeSpecified() {
		if (_purposeSpecified == null) {
			return StringPool.BLANK;
		}
		else {
			return _purposeSpecified;
		}
	}

	public void setPurposeSpecified(String purposeSpecified) {
		_purposeSpecified = purposeSpecified;
	}

	@JSON
	public long getCrewNumber() {
		return _crewNumber;
	}

	public void setCrewNumber(long crewNumber) {
		_crewNumber = crewNumber;
	}

	@JSON
	public String getUnitCrew() {
		if (_unitCrew == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitCrew;
		}
	}

	public void setUnitCrew(String unitCrew) {
		_unitCrew = unitCrew;
	}

	@JSON
	public long getPassengerNumber() {
		return _passengerNumber;
	}

	public void setPassengerNumber(long passengerNumber) {
		_passengerNumber = passengerNumber;
	}

	@JSON
	public String getUnitPassenger() {
		if (_unitPassenger == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitPassenger;
		}
	}

	public void setUnitPassenger(String unitPassenger) {
		_unitPassenger = unitPassenger;
	}

	@JSON
	public String getQuantityAndTypeOfCargo() {
		if (_quantityAndTypeOfCargo == null) {
			return StringPool.BLANK;
		}
		else {
			return _quantityAndTypeOfCargo;
		}
	}

	public void setQuantityAndTypeOfCargo(String quantityAndTypeOfCargo) {
		_quantityAndTypeOfCargo = quantityAndTypeOfCargo;
	}

	@JSON
	public String getUnitQuantityofCargo() {
		if (_unitQuantityofCargo == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitQuantityofCargo;
		}
	}

	public void setUnitQuantityofCargo(String unitQuantityofCargo) {
		_unitQuantityofCargo = unitQuantityofCargo;
	}

	@JSON
	public String getTypeOfCargo() {
		if (_typeOfCargo == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeOfCargo;
		}
	}

	public void setTypeOfCargo(String typeOfCargo) {
		_typeOfCargo = typeOfCargo;
	}

	@JSON
	public int getOtherPersons() {
		return _otherPersons;
	}

	public void setOtherPersons(int otherPersons) {
		_otherPersons = otherPersons;
	}

	@JSON
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@JSON
	public Date getSignDate() {
		return _signDate;
	}

	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	public int getMasterSigned() {
		return _masterSigned;
	}

	public void setMasterSigned(int masterSigned) {
		_masterSigned = masterSigned;
	}

	@JSON
	public int getMasterSignedImage() {
		return _masterSignedImage;
	}

	public void setMasterSignedImage(int masterSignedImage) {
		_masterSignedImage = masterSignedImage;
	}

	@JSON
	public int getDocumentYear() {
		return _documentYear;
	}

	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	public String getNameOfShipAgent() {
		if (_nameOfShipAgent == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShipAgent;
		}
	}

	public void setNameOfShipAgent(String nameOfShipAgent) {
		_nameOfShipAgent = nameOfShipAgent;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public TempNoTiceShipMessage toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TempNoTiceShipMessage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					TempNoTiceShipMessage.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TempNoTiceShipMessageImpl tempNoTiceShipMessageImpl = new TempNoTiceShipMessageImpl();

		tempNoTiceShipMessageImpl.setId(getId());
		tempNoTiceShipMessageImpl.setRequestCode(getRequestCode());
		tempNoTiceShipMessageImpl.setRequestState(getRequestState());
		tempNoTiceShipMessageImpl.setNoticeShipType(getNoticeShipType());
		tempNoTiceShipMessageImpl.setNoticeShipCode(getNoticeShipCode());
		tempNoTiceShipMessageImpl.setDocumentName(getDocumentName());
		tempNoTiceShipMessageImpl.setUserCreated(getUserCreated());
		tempNoTiceShipMessageImpl.setConfirmTime(getConfirmTime());
		tempNoTiceShipMessageImpl.setShipName(getShipName());
		tempNoTiceShipMessageImpl.setShipTypeCode(getShipTypeCode());
		tempNoTiceShipMessageImpl.setStateCode(getStateCode());
		tempNoTiceShipMessageImpl.setShipCaptain(getShipCaptain());
		tempNoTiceShipMessageImpl.setImo(getImo());
		tempNoTiceShipMessageImpl.setGrt(getGrt());
		tempNoTiceShipMessageImpl.setDwt(getDwt());
		tempNoTiceShipMessageImpl.setUnitGRT(getUnitGRT());
		tempNoTiceShipMessageImpl.setUnitDWT(getUnitDWT());
		tempNoTiceShipMessageImpl.setCallSign(getCallSign());
		tempNoTiceShipMessageImpl.setArrivalDate(getArrivalDate());
		tempNoTiceShipMessageImpl.setArrivalPortCode(getArrivalPortCode());
		tempNoTiceShipMessageImpl.setPortHarbourCode(getPortHarbourCode());
		tempNoTiceShipMessageImpl.setPortRegionCode(getPortRegionCode());
		tempNoTiceShipMessageImpl.setPortWharfCode(getPortWharfCode());
		tempNoTiceShipMessageImpl.setPortGoingToStateName(getPortGoingToStateName());
		tempNoTiceShipMessageImpl.setPortGoingToCode(getPortGoingToCode());
		tempNoTiceShipMessageImpl.setNameOfShipOwners(getNameOfShipOwners());
		tempNoTiceShipMessageImpl.setAddressOfShipOwners(getAddressOfShipOwners());
		tempNoTiceShipMessageImpl.setShipOwnerstateCode(getShipOwnerstateCode());
		tempNoTiceShipMessageImpl.setShipOwnerPhone(getShipOwnerPhone());
		tempNoTiceShipMessageImpl.setShipOwnerFax(getShipOwnerFax());
		tempNoTiceShipMessageImpl.setShipOwnerEmail(getShipOwnerEmail());
		tempNoTiceShipMessageImpl.setLoa(getLoa());
		tempNoTiceShipMessageImpl.setBreadth(getBreadth());
		tempNoTiceShipMessageImpl.setClearanceHeight(getClearanceHeight());
		tempNoTiceShipMessageImpl.setShownDraftxF(getShownDraftxF());
		tempNoTiceShipMessageImpl.setShownDraftxA(getShownDraftxA());
		tempNoTiceShipMessageImpl.setUnitLOA(getUnitLOA());
		tempNoTiceShipMessageImpl.setUnitBreadth(getUnitBreadth());
		tempNoTiceShipMessageImpl.setUnitClearanceHeight(getUnitClearanceHeight());
		tempNoTiceShipMessageImpl.setUnitShownDraftxF(getUnitShownDraftxF());
		tempNoTiceShipMessageImpl.setUnitShownDraftxA(getUnitShownDraftxA());
		tempNoTiceShipMessageImpl.setCertificateOfRegistryNumber(getCertificateOfRegistryNumber());
		tempNoTiceShipMessageImpl.setCertificateOfRegistryDate(getCertificateOfRegistryDate());
		tempNoTiceShipMessageImpl.setCertificateOfRegistryPortName(getCertificateOfRegistryPortName());
		tempNoTiceShipMessageImpl.setShipAgencyCode(getShipAgencyCode());
		tempNoTiceShipMessageImpl.setShipAgencyAddress(getShipAgencyAddress());
		tempNoTiceShipMessageImpl.setShipAgencyPhone(getShipAgencyPhone());
		tempNoTiceShipMessageImpl.setShipAgencyFax(getShipAgencyFax());
		tempNoTiceShipMessageImpl.setShipAgencyEmail(getShipAgencyEmail());
		tempNoTiceShipMessageImpl.setPurposeCode(getPurposeCode());
		tempNoTiceShipMessageImpl.setPurposeSpecified(getPurposeSpecified());
		tempNoTiceShipMessageImpl.setCrewNumber(getCrewNumber());
		tempNoTiceShipMessageImpl.setUnitCrew(getUnitCrew());
		tempNoTiceShipMessageImpl.setPassengerNumber(getPassengerNumber());
		tempNoTiceShipMessageImpl.setUnitPassenger(getUnitPassenger());
		tempNoTiceShipMessageImpl.setQuantityAndTypeOfCargo(getQuantityAndTypeOfCargo());
		tempNoTiceShipMessageImpl.setUnitQuantityofCargo(getUnitQuantityofCargo());
		tempNoTiceShipMessageImpl.setTypeOfCargo(getTypeOfCargo());
		tempNoTiceShipMessageImpl.setOtherPersons(getOtherPersons());
		tempNoTiceShipMessageImpl.setRemarks(getRemarks());
		tempNoTiceShipMessageImpl.setSignPlace(getSignPlace());
		tempNoTiceShipMessageImpl.setSignDate(getSignDate());
		tempNoTiceShipMessageImpl.setMasterSigned(getMasterSigned());
		tempNoTiceShipMessageImpl.setMasterSignedImage(getMasterSignedImage());
		tempNoTiceShipMessageImpl.setDocumentYear(getDocumentYear());
		tempNoTiceShipMessageImpl.setNameOfShipAgent(getNameOfShipAgent());

		tempNoTiceShipMessageImpl.resetOriginalValues();

		return tempNoTiceShipMessageImpl;
	}

	public int compareTo(TempNoTiceShipMessage tempNoTiceShipMessage) {
		int value = 0;

		if (getId() < tempNoTiceShipMessage.getId()) {
			value = -1;
		}
		else if (getId() > tempNoTiceShipMessage.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TempNoTiceShipMessage tempNoTiceShipMessage = null;

		try {
			tempNoTiceShipMessage = (TempNoTiceShipMessage)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tempNoTiceShipMessage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempNoTiceShipMessageModelImpl tempNoTiceShipMessageModelImpl = this;

		tempNoTiceShipMessageModelImpl._originalRequestCode = tempNoTiceShipMessageModelImpl._requestCode;

		tempNoTiceShipMessageModelImpl._originalNoticeShipType = tempNoTiceShipMessageModelImpl._noticeShipType;

		tempNoTiceShipMessageModelImpl._originalDocumentName = tempNoTiceShipMessageModelImpl._documentName;

		tempNoTiceShipMessageModelImpl._setOriginalDocumentName = false;

		tempNoTiceShipMessageModelImpl._originalDocumentYear = tempNoTiceShipMessageModelImpl._documentYear;

		tempNoTiceShipMessageModelImpl._setOriginalDocumentYear = false;

		tempNoTiceShipMessageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempNoTiceShipMessage> toCacheModel() {
		TempNoTiceShipMessageCacheModel tempNoTiceShipMessageCacheModel = new TempNoTiceShipMessageCacheModel();

		tempNoTiceShipMessageCacheModel.id = getId();

		tempNoTiceShipMessageCacheModel.requestCode = getRequestCode();

		String requestCode = tempNoTiceShipMessageCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempNoTiceShipMessageCacheModel.requestCode = null;
		}

		tempNoTiceShipMessageCacheModel.requestState = getRequestState();

		tempNoTiceShipMessageCacheModel.noticeShipType = getNoticeShipType();

		String noticeShipType = tempNoTiceShipMessageCacheModel.noticeShipType;

		if ((noticeShipType != null) && (noticeShipType.length() == 0)) {
			tempNoTiceShipMessageCacheModel.noticeShipType = null;
		}

		tempNoTiceShipMessageCacheModel.noticeShipCode = getNoticeShipCode();

		String noticeShipCode = tempNoTiceShipMessageCacheModel.noticeShipCode;

		if ((noticeShipCode != null) && (noticeShipCode.length() == 0)) {
			tempNoTiceShipMessageCacheModel.noticeShipCode = null;
		}

		tempNoTiceShipMessageCacheModel.documentName = getDocumentName();

		tempNoTiceShipMessageCacheModel.userCreated = getUserCreated();

		String userCreated = tempNoTiceShipMessageCacheModel.userCreated;

		if ((userCreated != null) && (userCreated.length() == 0)) {
			tempNoTiceShipMessageCacheModel.userCreated = null;
		}

		tempNoTiceShipMessageCacheModel.confirmTime = getConfirmTime();

		tempNoTiceShipMessageCacheModel.shipName = getShipName();

		String shipName = tempNoTiceShipMessageCacheModel.shipName;

		if ((shipName != null) && (shipName.length() == 0)) {
			tempNoTiceShipMessageCacheModel.shipName = null;
		}

		tempNoTiceShipMessageCacheModel.shipTypeCode = getShipTypeCode();

		String shipTypeCode = tempNoTiceShipMessageCacheModel.shipTypeCode;

		if ((shipTypeCode != null) && (shipTypeCode.length() == 0)) {
			tempNoTiceShipMessageCacheModel.shipTypeCode = null;
		}

		tempNoTiceShipMessageCacheModel.stateCode = getStateCode();

		String stateCode = tempNoTiceShipMessageCacheModel.stateCode;

		if ((stateCode != null) && (stateCode.length() == 0)) {
			tempNoTiceShipMessageCacheModel.stateCode = null;
		}

		tempNoTiceShipMessageCacheModel.shipCaptain = getShipCaptain();

		String shipCaptain = tempNoTiceShipMessageCacheModel.shipCaptain;

		if ((shipCaptain != null) && (shipCaptain.length() == 0)) {
			tempNoTiceShipMessageCacheModel.shipCaptain = null;
		}

		tempNoTiceShipMessageCacheModel.imo = getImo();

		String imo = tempNoTiceShipMessageCacheModel.imo;

		if ((imo != null) && (imo.length() == 0)) {
			tempNoTiceShipMessageCacheModel.imo = null;
		}

		tempNoTiceShipMessageCacheModel.grt = getGrt();

		tempNoTiceShipMessageCacheModel.dwt = getDwt();

		tempNoTiceShipMessageCacheModel.unitGRT = getUnitGRT();

		String unitGRT = tempNoTiceShipMessageCacheModel.unitGRT;

		if ((unitGRT != null) && (unitGRT.length() == 0)) {
			tempNoTiceShipMessageCacheModel.unitGRT = null;
		}

		tempNoTiceShipMessageCacheModel.unitDWT = getUnitDWT();

		String unitDWT = tempNoTiceShipMessageCacheModel.unitDWT;

		if ((unitDWT != null) && (unitDWT.length() == 0)) {
			tempNoTiceShipMessageCacheModel.unitDWT = null;
		}

		tempNoTiceShipMessageCacheModel.callSign = getCallSign();

		String callSign = tempNoTiceShipMessageCacheModel.callSign;

		if ((callSign != null) && (callSign.length() == 0)) {
			tempNoTiceShipMessageCacheModel.callSign = null;
		}

		Date arrivalDate = getArrivalDate();

		if (arrivalDate != null) {
			tempNoTiceShipMessageCacheModel.arrivalDate = arrivalDate.getTime();
		}
		else {
			tempNoTiceShipMessageCacheModel.arrivalDate = Long.MIN_VALUE;
		}

		tempNoTiceShipMessageCacheModel.arrivalPortCode = getArrivalPortCode();

		String arrivalPortCode = tempNoTiceShipMessageCacheModel.arrivalPortCode;

		if ((arrivalPortCode != null) && (arrivalPortCode.length() == 0)) {
			tempNoTiceShipMessageCacheModel.arrivalPortCode = null;
		}

		tempNoTiceShipMessageCacheModel.portHarbourCode = getPortHarbourCode();

		String portHarbourCode = tempNoTiceShipMessageCacheModel.portHarbourCode;

		if ((portHarbourCode != null) && (portHarbourCode.length() == 0)) {
			tempNoTiceShipMessageCacheModel.portHarbourCode = null;
		}

		tempNoTiceShipMessageCacheModel.portRegionCode = getPortRegionCode();

		String portRegionCode = tempNoTiceShipMessageCacheModel.portRegionCode;

		if ((portRegionCode != null) && (portRegionCode.length() == 0)) {
			tempNoTiceShipMessageCacheModel.portRegionCode = null;
		}

		tempNoTiceShipMessageCacheModel.portWharfCode = getPortWharfCode();

		String portWharfCode = tempNoTiceShipMessageCacheModel.portWharfCode;

		if ((portWharfCode != null) && (portWharfCode.length() == 0)) {
			tempNoTiceShipMessageCacheModel.portWharfCode = null;
		}

		tempNoTiceShipMessageCacheModel.portGoingToStateName = getPortGoingToStateName();

		String portGoingToStateName = tempNoTiceShipMessageCacheModel.portGoingToStateName;

		if ((portGoingToStateName != null) &&
				(portGoingToStateName.length() == 0)) {
			tempNoTiceShipMessageCacheModel.portGoingToStateName = null;
		}

		tempNoTiceShipMessageCacheModel.portGoingToCode = getPortGoingToCode();

		String portGoingToCode = tempNoTiceShipMessageCacheModel.portGoingToCode;

		if ((portGoingToCode != null) && (portGoingToCode.length() == 0)) {
			tempNoTiceShipMessageCacheModel.portGoingToCode = null;
		}

		tempNoTiceShipMessageCacheModel.nameOfShipOwners = getNameOfShipOwners();

		String nameOfShipOwners = tempNoTiceShipMessageCacheModel.nameOfShipOwners;

		if ((nameOfShipOwners != null) && (nameOfShipOwners.length() == 0)) {
			tempNoTiceShipMessageCacheModel.nameOfShipOwners = null;
		}

		tempNoTiceShipMessageCacheModel.addressOfShipOwners = getAddressOfShipOwners();

		String addressOfShipOwners = tempNoTiceShipMessageCacheModel.addressOfShipOwners;

		if ((addressOfShipOwners != null) &&
				(addressOfShipOwners.length() == 0)) {
			tempNoTiceShipMessageCacheModel.addressOfShipOwners = null;
		}

		tempNoTiceShipMessageCacheModel.shipOwnerstateCode = getShipOwnerstateCode();

		String shipOwnerstateCode = tempNoTiceShipMessageCacheModel.shipOwnerstateCode;

		if ((shipOwnerstateCode != null) && (shipOwnerstateCode.length() == 0)) {
			tempNoTiceShipMessageCacheModel.shipOwnerstateCode = null;
		}

		tempNoTiceShipMessageCacheModel.shipOwnerPhone = getShipOwnerPhone();

		String shipOwnerPhone = tempNoTiceShipMessageCacheModel.shipOwnerPhone;

		if ((shipOwnerPhone != null) && (shipOwnerPhone.length() == 0)) {
			tempNoTiceShipMessageCacheModel.shipOwnerPhone = null;
		}

		tempNoTiceShipMessageCacheModel.shipOwnerFax = getShipOwnerFax();

		String shipOwnerFax = tempNoTiceShipMessageCacheModel.shipOwnerFax;

		if ((shipOwnerFax != null) && (shipOwnerFax.length() == 0)) {
			tempNoTiceShipMessageCacheModel.shipOwnerFax = null;
		}

		tempNoTiceShipMessageCacheModel.shipOwnerEmail = getShipOwnerEmail();

		String shipOwnerEmail = tempNoTiceShipMessageCacheModel.shipOwnerEmail;

		if ((shipOwnerEmail != null) && (shipOwnerEmail.length() == 0)) {
			tempNoTiceShipMessageCacheModel.shipOwnerEmail = null;
		}

		tempNoTiceShipMessageCacheModel.loa = getLoa();

		tempNoTiceShipMessageCacheModel.breadth = getBreadth();

		tempNoTiceShipMessageCacheModel.clearanceHeight = getClearanceHeight();

		tempNoTiceShipMessageCacheModel.shownDraftxF = getShownDraftxF();

		tempNoTiceShipMessageCacheModel.shownDraftxA = getShownDraftxA();

		tempNoTiceShipMessageCacheModel.unitLOA = getUnitLOA();

		String unitLOA = tempNoTiceShipMessageCacheModel.unitLOA;

		if ((unitLOA != null) && (unitLOA.length() == 0)) {
			tempNoTiceShipMessageCacheModel.unitLOA = null;
		}

		tempNoTiceShipMessageCacheModel.unitBreadth = getUnitBreadth();

		String unitBreadth = tempNoTiceShipMessageCacheModel.unitBreadth;

		if ((unitBreadth != null) && (unitBreadth.length() == 0)) {
			tempNoTiceShipMessageCacheModel.unitBreadth = null;
		}

		tempNoTiceShipMessageCacheModel.unitClearanceHeight = getUnitClearanceHeight();

		String unitClearanceHeight = tempNoTiceShipMessageCacheModel.unitClearanceHeight;

		if ((unitClearanceHeight != null) &&
				(unitClearanceHeight.length() == 0)) {
			tempNoTiceShipMessageCacheModel.unitClearanceHeight = null;
		}

		tempNoTiceShipMessageCacheModel.unitShownDraftxF = getUnitShownDraftxF();

		String unitShownDraftxF = tempNoTiceShipMessageCacheModel.unitShownDraftxF;

		if ((unitShownDraftxF != null) && (unitShownDraftxF.length() == 0)) {
			tempNoTiceShipMessageCacheModel.unitShownDraftxF = null;
		}

		tempNoTiceShipMessageCacheModel.unitShownDraftxA = getUnitShownDraftxA();

		String unitShownDraftxA = tempNoTiceShipMessageCacheModel.unitShownDraftxA;

		if ((unitShownDraftxA != null) && (unitShownDraftxA.length() == 0)) {
			tempNoTiceShipMessageCacheModel.unitShownDraftxA = null;
		}

		tempNoTiceShipMessageCacheModel.certificateOfRegistryNumber = getCertificateOfRegistryNumber();

		String certificateOfRegistryNumber = tempNoTiceShipMessageCacheModel.certificateOfRegistryNumber;

		if ((certificateOfRegistryNumber != null) &&
				(certificateOfRegistryNumber.length() == 0)) {
			tempNoTiceShipMessageCacheModel.certificateOfRegistryNumber = null;
		}

		Date certificateOfRegistryDate = getCertificateOfRegistryDate();

		if (certificateOfRegistryDate != null) {
			tempNoTiceShipMessageCacheModel.certificateOfRegistryDate = certificateOfRegistryDate.getTime();
		}
		else {
			tempNoTiceShipMessageCacheModel.certificateOfRegistryDate = Long.MIN_VALUE;
		}

		tempNoTiceShipMessageCacheModel.certificateOfRegistryPortName = getCertificateOfRegistryPortName();

		String certificateOfRegistryPortName = tempNoTiceShipMessageCacheModel.certificateOfRegistryPortName;

		if ((certificateOfRegistryPortName != null) &&
				(certificateOfRegistryPortName.length() == 0)) {
			tempNoTiceShipMessageCacheModel.certificateOfRegistryPortName = null;
		}

		tempNoTiceShipMessageCacheModel.shipAgencyCode = getShipAgencyCode();

		String shipAgencyCode = tempNoTiceShipMessageCacheModel.shipAgencyCode;

		if ((shipAgencyCode != null) && (shipAgencyCode.length() == 0)) {
			tempNoTiceShipMessageCacheModel.shipAgencyCode = null;
		}

		tempNoTiceShipMessageCacheModel.shipAgencyAddress = getShipAgencyAddress();

		String shipAgencyAddress = tempNoTiceShipMessageCacheModel.shipAgencyAddress;

		if ((shipAgencyAddress != null) && (shipAgencyAddress.length() == 0)) {
			tempNoTiceShipMessageCacheModel.shipAgencyAddress = null;
		}

		tempNoTiceShipMessageCacheModel.shipAgencyPhone = getShipAgencyPhone();

		String shipAgencyPhone = tempNoTiceShipMessageCacheModel.shipAgencyPhone;

		if ((shipAgencyPhone != null) && (shipAgencyPhone.length() == 0)) {
			tempNoTiceShipMessageCacheModel.shipAgencyPhone = null;
		}

		tempNoTiceShipMessageCacheModel.shipAgencyFax = getShipAgencyFax();

		String shipAgencyFax = tempNoTiceShipMessageCacheModel.shipAgencyFax;

		if ((shipAgencyFax != null) && (shipAgencyFax.length() == 0)) {
			tempNoTiceShipMessageCacheModel.shipAgencyFax = null;
		}

		tempNoTiceShipMessageCacheModel.shipAgencyEmail = getShipAgencyEmail();

		String shipAgencyEmail = tempNoTiceShipMessageCacheModel.shipAgencyEmail;

		if ((shipAgencyEmail != null) && (shipAgencyEmail.length() == 0)) {
			tempNoTiceShipMessageCacheModel.shipAgencyEmail = null;
		}

		tempNoTiceShipMessageCacheModel.purposeCode = getPurposeCode();

		String purposeCode = tempNoTiceShipMessageCacheModel.purposeCode;

		if ((purposeCode != null) && (purposeCode.length() == 0)) {
			tempNoTiceShipMessageCacheModel.purposeCode = null;
		}

		tempNoTiceShipMessageCacheModel.purposeSpecified = getPurposeSpecified();

		String purposeSpecified = tempNoTiceShipMessageCacheModel.purposeSpecified;

		if ((purposeSpecified != null) && (purposeSpecified.length() == 0)) {
			tempNoTiceShipMessageCacheModel.purposeSpecified = null;
		}

		tempNoTiceShipMessageCacheModel.crewNumber = getCrewNumber();

		tempNoTiceShipMessageCacheModel.unitCrew = getUnitCrew();

		String unitCrew = tempNoTiceShipMessageCacheModel.unitCrew;

		if ((unitCrew != null) && (unitCrew.length() == 0)) {
			tempNoTiceShipMessageCacheModel.unitCrew = null;
		}

		tempNoTiceShipMessageCacheModel.passengerNumber = getPassengerNumber();

		tempNoTiceShipMessageCacheModel.unitPassenger = getUnitPassenger();

		String unitPassenger = tempNoTiceShipMessageCacheModel.unitPassenger;

		if ((unitPassenger != null) && (unitPassenger.length() == 0)) {
			tempNoTiceShipMessageCacheModel.unitPassenger = null;
		}

		tempNoTiceShipMessageCacheModel.quantityAndTypeOfCargo = getQuantityAndTypeOfCargo();

		String quantityAndTypeOfCargo = tempNoTiceShipMessageCacheModel.quantityAndTypeOfCargo;

		if ((quantityAndTypeOfCargo != null) &&
				(quantityAndTypeOfCargo.length() == 0)) {
			tempNoTiceShipMessageCacheModel.quantityAndTypeOfCargo = null;
		}

		tempNoTiceShipMessageCacheModel.unitQuantityofCargo = getUnitQuantityofCargo();

		String unitQuantityofCargo = tempNoTiceShipMessageCacheModel.unitQuantityofCargo;

		if ((unitQuantityofCargo != null) &&
				(unitQuantityofCargo.length() == 0)) {
			tempNoTiceShipMessageCacheModel.unitQuantityofCargo = null;
		}

		tempNoTiceShipMessageCacheModel.typeOfCargo = getTypeOfCargo();

		String typeOfCargo = tempNoTiceShipMessageCacheModel.typeOfCargo;

		if ((typeOfCargo != null) && (typeOfCargo.length() == 0)) {
			tempNoTiceShipMessageCacheModel.typeOfCargo = null;
		}

		tempNoTiceShipMessageCacheModel.otherPersons = getOtherPersons();

		tempNoTiceShipMessageCacheModel.remarks = getRemarks();

		String remarks = tempNoTiceShipMessageCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			tempNoTiceShipMessageCacheModel.remarks = null;
		}

		tempNoTiceShipMessageCacheModel.signPlace = getSignPlace();

		String signPlace = tempNoTiceShipMessageCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			tempNoTiceShipMessageCacheModel.signPlace = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			tempNoTiceShipMessageCacheModel.signDate = signDate.getTime();
		}
		else {
			tempNoTiceShipMessageCacheModel.signDate = Long.MIN_VALUE;
		}

		tempNoTiceShipMessageCacheModel.masterSigned = getMasterSigned();

		tempNoTiceShipMessageCacheModel.masterSignedImage = getMasterSignedImage();

		tempNoTiceShipMessageCacheModel.documentYear = getDocumentYear();

		tempNoTiceShipMessageCacheModel.nameOfShipAgent = getNameOfShipAgent();

		String nameOfShipAgent = tempNoTiceShipMessageCacheModel.nameOfShipAgent;

		if ((nameOfShipAgent != null) && (nameOfShipAgent.length() == 0)) {
			tempNoTiceShipMessageCacheModel.nameOfShipAgent = null;
		}

		return tempNoTiceShipMessageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(133);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append(", noticeShipType=");
		sb.append(getNoticeShipType());
		sb.append(", noticeShipCode=");
		sb.append(getNoticeShipCode());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", userCreated=");
		sb.append(getUserCreated());
		sb.append(", confirmTime=");
		sb.append(getConfirmTime());
		sb.append(", shipName=");
		sb.append(getShipName());
		sb.append(", shipTypeCode=");
		sb.append(getShipTypeCode());
		sb.append(", stateCode=");
		sb.append(getStateCode());
		sb.append(", shipCaptain=");
		sb.append(getShipCaptain());
		sb.append(", imo=");
		sb.append(getImo());
		sb.append(", grt=");
		sb.append(getGrt());
		sb.append(", dwt=");
		sb.append(getDwt());
		sb.append(", unitGRT=");
		sb.append(getUnitGRT());
		sb.append(", unitDWT=");
		sb.append(getUnitDWT());
		sb.append(", callSign=");
		sb.append(getCallSign());
		sb.append(", arrivalDate=");
		sb.append(getArrivalDate());
		sb.append(", arrivalPortCode=");
		sb.append(getArrivalPortCode());
		sb.append(", portHarbourCode=");
		sb.append(getPortHarbourCode());
		sb.append(", portRegionCode=");
		sb.append(getPortRegionCode());
		sb.append(", portWharfCode=");
		sb.append(getPortWharfCode());
		sb.append(", portGoingToStateName=");
		sb.append(getPortGoingToStateName());
		sb.append(", portGoingToCode=");
		sb.append(getPortGoingToCode());
		sb.append(", nameOfShipOwners=");
		sb.append(getNameOfShipOwners());
		sb.append(", addressOfShipOwners=");
		sb.append(getAddressOfShipOwners());
		sb.append(", shipOwnerstateCode=");
		sb.append(getShipOwnerstateCode());
		sb.append(", shipOwnerPhone=");
		sb.append(getShipOwnerPhone());
		sb.append(", shipOwnerFax=");
		sb.append(getShipOwnerFax());
		sb.append(", shipOwnerEmail=");
		sb.append(getShipOwnerEmail());
		sb.append(", loa=");
		sb.append(getLoa());
		sb.append(", breadth=");
		sb.append(getBreadth());
		sb.append(", clearanceHeight=");
		sb.append(getClearanceHeight());
		sb.append(", shownDraftxF=");
		sb.append(getShownDraftxF());
		sb.append(", shownDraftxA=");
		sb.append(getShownDraftxA());
		sb.append(", unitLOA=");
		sb.append(getUnitLOA());
		sb.append(", unitBreadth=");
		sb.append(getUnitBreadth());
		sb.append(", unitClearanceHeight=");
		sb.append(getUnitClearanceHeight());
		sb.append(", unitShownDraftxF=");
		sb.append(getUnitShownDraftxF());
		sb.append(", unitShownDraftxA=");
		sb.append(getUnitShownDraftxA());
		sb.append(", certificateOfRegistryNumber=");
		sb.append(getCertificateOfRegistryNumber());
		sb.append(", certificateOfRegistryDate=");
		sb.append(getCertificateOfRegistryDate());
		sb.append(", certificateOfRegistryPortName=");
		sb.append(getCertificateOfRegistryPortName());
		sb.append(", shipAgencyCode=");
		sb.append(getShipAgencyCode());
		sb.append(", shipAgencyAddress=");
		sb.append(getShipAgencyAddress());
		sb.append(", shipAgencyPhone=");
		sb.append(getShipAgencyPhone());
		sb.append(", shipAgencyFax=");
		sb.append(getShipAgencyFax());
		sb.append(", shipAgencyEmail=");
		sb.append(getShipAgencyEmail());
		sb.append(", purposeCode=");
		sb.append(getPurposeCode());
		sb.append(", purposeSpecified=");
		sb.append(getPurposeSpecified());
		sb.append(", crewNumber=");
		sb.append(getCrewNumber());
		sb.append(", unitCrew=");
		sb.append(getUnitCrew());
		sb.append(", passengerNumber=");
		sb.append(getPassengerNumber());
		sb.append(", unitPassenger=");
		sb.append(getUnitPassenger());
		sb.append(", quantityAndTypeOfCargo=");
		sb.append(getQuantityAndTypeOfCargo());
		sb.append(", unitQuantityofCargo=");
		sb.append(getUnitQuantityofCargo());
		sb.append(", typeOfCargo=");
		sb.append(getTypeOfCargo());
		sb.append(", otherPersons=");
		sb.append(getOtherPersons());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", masterSigned=");
		sb.append(getMasterSigned());
		sb.append(", masterSignedImage=");
		sb.append(getMasterSignedImage());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", nameOfShipAgent=");
		sb.append(getNameOfShipAgent());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(202);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.TempNoTiceShipMessage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noticeShipType</column-name><column-value><![CDATA[");
		sb.append(getNoticeShipType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noticeShipCode</column-name><column-value><![CDATA[");
		sb.append(getNoticeShipCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userCreated</column-name><column-value><![CDATA[");
		sb.append(getUserCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>confirmTime</column-name><column-value><![CDATA[");
		sb.append(getConfirmTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipName</column-name><column-value><![CDATA[");
		sb.append(getShipName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipTypeCode</column-name><column-value><![CDATA[");
		sb.append(getShipTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateCode</column-name><column-value><![CDATA[");
		sb.append(getStateCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipCaptain</column-name><column-value><![CDATA[");
		sb.append(getShipCaptain());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imo</column-name><column-value><![CDATA[");
		sb.append(getImo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grt</column-name><column-value><![CDATA[");
		sb.append(getGrt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dwt</column-name><column-value><![CDATA[");
		sb.append(getDwt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitGRT</column-name><column-value><![CDATA[");
		sb.append(getUnitGRT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitDWT</column-name><column-value><![CDATA[");
		sb.append(getUnitDWT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callSign</column-name><column-value><![CDATA[");
		sb.append(getCallSign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arrivalDate</column-name><column-value><![CDATA[");
		sb.append(getArrivalDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arrivalPortCode</column-name><column-value><![CDATA[");
		sb.append(getArrivalPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portHarbourCode</column-name><column-value><![CDATA[");
		sb.append(getPortHarbourCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portRegionCode</column-name><column-value><![CDATA[");
		sb.append(getPortRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portWharfCode</column-name><column-value><![CDATA[");
		sb.append(getPortWharfCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portGoingToStateName</column-name><column-value><![CDATA[");
		sb.append(getPortGoingToStateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portGoingToCode</column-name><column-value><![CDATA[");
		sb.append(getPortGoingToCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShipOwners</column-name><column-value><![CDATA[");
		sb.append(getNameOfShipOwners());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressOfShipOwners</column-name><column-value><![CDATA[");
		sb.append(getAddressOfShipOwners());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipOwnerstateCode</column-name><column-value><![CDATA[");
		sb.append(getShipOwnerstateCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipOwnerPhone</column-name><column-value><![CDATA[");
		sb.append(getShipOwnerPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipOwnerFax</column-name><column-value><![CDATA[");
		sb.append(getShipOwnerFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipOwnerEmail</column-name><column-value><![CDATA[");
		sb.append(getShipOwnerEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loa</column-name><column-value><![CDATA[");
		sb.append(getLoa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>breadth</column-name><column-value><![CDATA[");
		sb.append(getBreadth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clearanceHeight</column-name><column-value><![CDATA[");
		sb.append(getClearanceHeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shownDraftxF</column-name><column-value><![CDATA[");
		sb.append(getShownDraftxF());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shownDraftxA</column-name><column-value><![CDATA[");
		sb.append(getShownDraftxA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitLOA</column-name><column-value><![CDATA[");
		sb.append(getUnitLOA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitBreadth</column-name><column-value><![CDATA[");
		sb.append(getUnitBreadth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitClearanceHeight</column-name><column-value><![CDATA[");
		sb.append(getUnitClearanceHeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitShownDraftxF</column-name><column-value><![CDATA[");
		sb.append(getUnitShownDraftxF());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitShownDraftxA</column-name><column-value><![CDATA[");
		sb.append(getUnitShownDraftxA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateOfRegistryNumber</column-name><column-value><![CDATA[");
		sb.append(getCertificateOfRegistryNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateOfRegistryDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateOfRegistryDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateOfRegistryPortName</column-name><column-value><![CDATA[");
		sb.append(getCertificateOfRegistryPortName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyCode</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyAddress</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyPhone</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyFax</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyEmail</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purposeCode</column-name><column-value><![CDATA[");
		sb.append(getPurposeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purposeSpecified</column-name><column-value><![CDATA[");
		sb.append(getPurposeSpecified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>crewNumber</column-name><column-value><![CDATA[");
		sb.append(getCrewNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitCrew</column-name><column-value><![CDATA[");
		sb.append(getUnitCrew());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passengerNumber</column-name><column-value><![CDATA[");
		sb.append(getPassengerNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitPassenger</column-name><column-value><![CDATA[");
		sb.append(getUnitPassenger());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantityAndTypeOfCargo</column-name><column-value><![CDATA[");
		sb.append(getQuantityAndTypeOfCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitQuantityofCargo</column-name><column-value><![CDATA[");
		sb.append(getUnitQuantityofCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeOfCargo</column-name><column-value><![CDATA[");
		sb.append(getTypeOfCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherPersons</column-name><column-value><![CDATA[");
		sb.append(getOtherPersons());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterSigned</column-name><column-value><![CDATA[");
		sb.append(getMasterSigned());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterSignedImage</column-name><column-value><![CDATA[");
		sb.append(getMasterSignedImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShipAgent</column-name><column-value><![CDATA[");
		sb.append(getNameOfShipAgent());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempNoTiceShipMessage.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TempNoTiceShipMessage.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private int _requestState;
	private String _noticeShipType;
	private String _originalNoticeShipType;
	private String _noticeShipCode;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private String _userCreated;
	private int _confirmTime;
	private String _shipName;
	private String _shipTypeCode;
	private String _stateCode;
	private String _shipCaptain;
	private String _imo;
	private double _grt;
	private double _dwt;
	private String _unitGRT;
	private String _unitDWT;
	private String _callSign;
	private Date _arrivalDate;
	private String _arrivalPortCode;
	private String _portHarbourCode;
	private String _portRegionCode;
	private String _portWharfCode;
	private String _portGoingToStateName;
	private String _portGoingToCode;
	private String _nameOfShipOwners;
	private String _addressOfShipOwners;
	private String _shipOwnerstateCode;
	private String _shipOwnerPhone;
	private String _shipOwnerFax;
	private String _shipOwnerEmail;
	private double _loa;
	private double _breadth;
	private double _clearanceHeight;
	private double _shownDraftxF;
	private double _shownDraftxA;
	private String _unitLOA;
	private String _unitBreadth;
	private String _unitClearanceHeight;
	private String _unitShownDraftxF;
	private String _unitShownDraftxA;
	private String _certificateOfRegistryNumber;
	private Date _certificateOfRegistryDate;
	private String _certificateOfRegistryPortName;
	private String _shipAgencyCode;
	private String _shipAgencyAddress;
	private String _shipAgencyPhone;
	private String _shipAgencyFax;
	private String _shipAgencyEmail;
	private String _purposeCode;
	private String _purposeSpecified;
	private long _crewNumber;
	private String _unitCrew;
	private long _passengerNumber;
	private String _unitPassenger;
	private String _quantityAndTypeOfCargo;
	private String _unitQuantityofCargo;
	private String _typeOfCargo;
	private int _otherPersons;
	private String _remarks;
	private String _signPlace;
	private Date _signDate;
	private int _masterSigned;
	private int _masterSignedImage;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _nameOfShipAgent;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private TempNoTiceShipMessage _escapedModelProxy;
}