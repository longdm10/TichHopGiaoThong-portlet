/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.TempHealthCrewPassengerList;
import vn.gt.dao.noticeandmessage.model.TempHealthCrewPassengerListModel;
import vn.gt.dao.noticeandmessage.model.TempHealthCrewPassengerListSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the TempHealthCrewPassengerList service. Represents a row in the &quot;TEMP_HEALTH_CREW_PAX_LIST&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.TempHealthCrewPassengerListModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempHealthCrewPassengerListImpl}.
 * </p>
 *
 * @author win_64
 * @see TempHealthCrewPassengerListImpl
 * @see vn.gt.dao.noticeandmessage.model.TempHealthCrewPassengerList
 * @see vn.gt.dao.noticeandmessage.model.TempHealthCrewPassengerListModel
 * @generated
 */
@JSON(strict = true)
public class TempHealthCrewPassengerListModelImpl extends BaseModelImpl<TempHealthCrewPassengerList>
	implements TempHealthCrewPassengerListModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp health crew passenger list model instance should use the {@link vn.gt.dao.noticeandmessage.model.TempHealthCrewPassengerList} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_HEALTH_CREW_PAX_LIST";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "HealthCrewPassengerCode", Types.VARCHAR },
			{ "PassengerOrCrewCode", Types.VARCHAR },
			{ "PassengerOrCrewName", Types.VARCHAR },
			{ "ClassOrRating", Types.INTEGER },
			{ "StateVisitedCode", Types.VARCHAR },
			{ "PortVisitedCode", Types.VARCHAR },
			{ "FromDate", Types.TIMESTAMP },
			{ "ToDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_HEALTH_CREW_PAX_LIST (ID LONG not null primary key,RequestCode VARCHAR(75) null,HealthCrewPassengerCode VARCHAR(75) null,PassengerOrCrewCode VARCHAR(75) null,PassengerOrCrewName VARCHAR(75) null,ClassOrRating INTEGER,StateVisitedCode VARCHAR(75) null,PortVisitedCode VARCHAR(75) null,FromDate DATE null,ToDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_HEALTH_CREW_PAX_LIST";
	public static final String ORDER_BY_JPQL = " ORDER BY tempHealthCrewPassengerList.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_HEALTH_CREW_PAX_LIST.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.TempHealthCrewPassengerList"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.TempHealthCrewPassengerList"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.TempHealthCrewPassengerList"),
			true);
	public static long REQUESTCODE_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempHealthCrewPassengerList toModel(
		TempHealthCrewPassengerListSoap soapModel) {
		TempHealthCrewPassengerList model = new TempHealthCrewPassengerListImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setHealthCrewPassengerCode(soapModel.getHealthCrewPassengerCode());
		model.setPassengerOrCrewCode(soapModel.getPassengerOrCrewCode());
		model.setPassengerOrCrewName(soapModel.getPassengerOrCrewName());
		model.setClassOrRating(soapModel.getClassOrRating());
		model.setStateVisitedCode(soapModel.getStateVisitedCode());
		model.setPortVisitedCode(soapModel.getPortVisitedCode());
		model.setFromDate(soapModel.getFromDate());
		model.setToDate(soapModel.getToDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempHealthCrewPassengerList> toModels(
		TempHealthCrewPassengerListSoap[] soapModels) {
		List<TempHealthCrewPassengerList> models = new ArrayList<TempHealthCrewPassengerList>(soapModels.length);

		for (TempHealthCrewPassengerListSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.TempHealthCrewPassengerList"));

	public TempHealthCrewPassengerListModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TempHealthCrewPassengerList.class;
	}

	public String getModelClassName() {
		return TempHealthCrewPassengerList.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	public String getHealthCrewPassengerCode() {
		if (_healthCrewPassengerCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _healthCrewPassengerCode;
		}
	}

	public void setHealthCrewPassengerCode(String healthCrewPassengerCode) {
		_healthCrewPassengerCode = healthCrewPassengerCode;
	}

	@JSON
	public String getPassengerOrCrewCode() {
		if (_passengerOrCrewCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _passengerOrCrewCode;
		}
	}

	public void setPassengerOrCrewCode(String passengerOrCrewCode) {
		_passengerOrCrewCode = passengerOrCrewCode;
	}

	@JSON
	public String getPassengerOrCrewName() {
		if (_passengerOrCrewName == null) {
			return StringPool.BLANK;
		}
		else {
			return _passengerOrCrewName;
		}
	}

	public void setPassengerOrCrewName(String passengerOrCrewName) {
		_passengerOrCrewName = passengerOrCrewName;
	}

	@JSON
	public int getClassOrRating() {
		return _classOrRating;
	}

	public void setClassOrRating(int classOrRating) {
		_classOrRating = classOrRating;
	}

	@JSON
	public String getStateVisitedCode() {
		if (_stateVisitedCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateVisitedCode;
		}
	}

	public void setStateVisitedCode(String stateVisitedCode) {
		_stateVisitedCode = stateVisitedCode;
	}

	@JSON
	public String getPortVisitedCode() {
		if (_portVisitedCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portVisitedCode;
		}
	}

	public void setPortVisitedCode(String portVisitedCode) {
		_portVisitedCode = portVisitedCode;
	}

	@JSON
	public Date getFromDate() {
		return _fromDate;
	}

	public void setFromDate(Date fromDate) {
		_fromDate = fromDate;
	}

	@JSON
	public Date getToDate() {
		return _toDate;
	}

	public void setToDate(Date toDate) {
		_toDate = toDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public TempHealthCrewPassengerList toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TempHealthCrewPassengerList)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					TempHealthCrewPassengerList.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TempHealthCrewPassengerListImpl tempHealthCrewPassengerListImpl = new TempHealthCrewPassengerListImpl();

		tempHealthCrewPassengerListImpl.setId(getId());
		tempHealthCrewPassengerListImpl.setRequestCode(getRequestCode());
		tempHealthCrewPassengerListImpl.setHealthCrewPassengerCode(getHealthCrewPassengerCode());
		tempHealthCrewPassengerListImpl.setPassengerOrCrewCode(getPassengerOrCrewCode());
		tempHealthCrewPassengerListImpl.setPassengerOrCrewName(getPassengerOrCrewName());
		tempHealthCrewPassengerListImpl.setClassOrRating(getClassOrRating());
		tempHealthCrewPassengerListImpl.setStateVisitedCode(getStateVisitedCode());
		tempHealthCrewPassengerListImpl.setPortVisitedCode(getPortVisitedCode());
		tempHealthCrewPassengerListImpl.setFromDate(getFromDate());
		tempHealthCrewPassengerListImpl.setToDate(getToDate());

		tempHealthCrewPassengerListImpl.resetOriginalValues();

		return tempHealthCrewPassengerListImpl;
	}

	public int compareTo(
		TempHealthCrewPassengerList tempHealthCrewPassengerList) {
		int value = 0;

		if (getId() < tempHealthCrewPassengerList.getId()) {
			value = -1;
		}
		else if (getId() > tempHealthCrewPassengerList.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TempHealthCrewPassengerList tempHealthCrewPassengerList = null;

		try {
			tempHealthCrewPassengerList = (TempHealthCrewPassengerList)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tempHealthCrewPassengerList.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempHealthCrewPassengerListModelImpl tempHealthCrewPassengerListModelImpl =
			this;

		tempHealthCrewPassengerListModelImpl._originalRequestCode = tempHealthCrewPassengerListModelImpl._requestCode;

		tempHealthCrewPassengerListModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempHealthCrewPassengerList> toCacheModel() {
		TempHealthCrewPassengerListCacheModel tempHealthCrewPassengerListCacheModel =
			new TempHealthCrewPassengerListCacheModel();

		tempHealthCrewPassengerListCacheModel.id = getId();

		tempHealthCrewPassengerListCacheModel.requestCode = getRequestCode();

		String requestCode = tempHealthCrewPassengerListCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempHealthCrewPassengerListCacheModel.requestCode = null;
		}

		tempHealthCrewPassengerListCacheModel.healthCrewPassengerCode = getHealthCrewPassengerCode();

		String healthCrewPassengerCode = tempHealthCrewPassengerListCacheModel.healthCrewPassengerCode;

		if ((healthCrewPassengerCode != null) &&
				(healthCrewPassengerCode.length() == 0)) {
			tempHealthCrewPassengerListCacheModel.healthCrewPassengerCode = null;
		}

		tempHealthCrewPassengerListCacheModel.passengerOrCrewCode = getPassengerOrCrewCode();

		String passengerOrCrewCode = tempHealthCrewPassengerListCacheModel.passengerOrCrewCode;

		if ((passengerOrCrewCode != null) &&
				(passengerOrCrewCode.length() == 0)) {
			tempHealthCrewPassengerListCacheModel.passengerOrCrewCode = null;
		}

		tempHealthCrewPassengerListCacheModel.passengerOrCrewName = getPassengerOrCrewName();

		String passengerOrCrewName = tempHealthCrewPassengerListCacheModel.passengerOrCrewName;

		if ((passengerOrCrewName != null) &&
				(passengerOrCrewName.length() == 0)) {
			tempHealthCrewPassengerListCacheModel.passengerOrCrewName = null;
		}

		tempHealthCrewPassengerListCacheModel.classOrRating = getClassOrRating();

		tempHealthCrewPassengerListCacheModel.stateVisitedCode = getStateVisitedCode();

		String stateVisitedCode = tempHealthCrewPassengerListCacheModel.stateVisitedCode;

		if ((stateVisitedCode != null) && (stateVisitedCode.length() == 0)) {
			tempHealthCrewPassengerListCacheModel.stateVisitedCode = null;
		}

		tempHealthCrewPassengerListCacheModel.portVisitedCode = getPortVisitedCode();

		String portVisitedCode = tempHealthCrewPassengerListCacheModel.portVisitedCode;

		if ((portVisitedCode != null) && (portVisitedCode.length() == 0)) {
			tempHealthCrewPassengerListCacheModel.portVisitedCode = null;
		}

		Date fromDate = getFromDate();

		if (fromDate != null) {
			tempHealthCrewPassengerListCacheModel.fromDate = fromDate.getTime();
		}
		else {
			tempHealthCrewPassengerListCacheModel.fromDate = Long.MIN_VALUE;
		}

		Date toDate = getToDate();

		if (toDate != null) {
			tempHealthCrewPassengerListCacheModel.toDate = toDate.getTime();
		}
		else {
			tempHealthCrewPassengerListCacheModel.toDate = Long.MIN_VALUE;
		}

		return tempHealthCrewPassengerListCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", healthCrewPassengerCode=");
		sb.append(getHealthCrewPassengerCode());
		sb.append(", passengerOrCrewCode=");
		sb.append(getPassengerOrCrewCode());
		sb.append(", passengerOrCrewName=");
		sb.append(getPassengerOrCrewName());
		sb.append(", classOrRating=");
		sb.append(getClassOrRating());
		sb.append(", stateVisitedCode=");
		sb.append(getStateVisitedCode());
		sb.append(", portVisitedCode=");
		sb.append(getPortVisitedCode());
		sb.append(", fromDate=");
		sb.append(getFromDate());
		sb.append(", toDate=");
		sb.append(getToDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append(
			"vn.gt.dao.noticeandmessage.model.TempHealthCrewPassengerList");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>healthCrewPassengerCode</column-name><column-value><![CDATA[");
		sb.append(getHealthCrewPassengerCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passengerOrCrewCode</column-name><column-value><![CDATA[");
		sb.append(getPassengerOrCrewCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passengerOrCrewName</column-name><column-value><![CDATA[");
		sb.append(getPassengerOrCrewName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classOrRating</column-name><column-value><![CDATA[");
		sb.append(getClassOrRating());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateVisitedCode</column-name><column-value><![CDATA[");
		sb.append(getStateVisitedCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portVisitedCode</column-name><column-value><![CDATA[");
		sb.append(getPortVisitedCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromDate</column-name><column-value><![CDATA[");
		sb.append(getFromDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toDate</column-name><column-value><![CDATA[");
		sb.append(getToDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempHealthCrewPassengerList.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TempHealthCrewPassengerList.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private String _healthCrewPassengerCode;
	private String _passengerOrCrewCode;
	private String _passengerOrCrewName;
	private int _classOrRating;
	private String _stateVisitedCode;
	private String _portVisitedCode;
	private Date _fromDate;
	private Date _toDate;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private TempHealthCrewPassengerList _escapedModelProxy;
}