/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.NoticeShipMessage;
import vn.gt.dao.noticeandmessage.model.NoticeShipMessageModel;
import vn.gt.dao.noticeandmessage.model.NoticeShipMessageSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the NoticeShipMessage service. Represents a row in the &quot;notice_ship_message&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.NoticeShipMessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NoticeShipMessageImpl}.
 * </p>
 *
 * @author win_64
 * @see NoticeShipMessageImpl
 * @see vn.gt.dao.noticeandmessage.model.NoticeShipMessage
 * @see vn.gt.dao.noticeandmessage.model.NoticeShipMessageModel
 * @generated
 */
@JSON(strict = true)
public class NoticeShipMessageModelImpl extends BaseModelImpl<NoticeShipMessage>
	implements NoticeShipMessageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notice ship message model instance should use the {@link vn.gt.dao.noticeandmessage.model.NoticeShipMessage} interface instead.
	 */
	public static final String TABLE_NAME = "notice_ship_message";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "noticeshipcode", Types.VARCHAR },
			{ "documentname", Types.BIGINT },
			{ "usercreated", Types.VARCHAR },
			{ "confirmtime", Types.INTEGER },
			{ "callsign", Types.VARCHAR },
			{ "arrivaldate", Types.TIMESTAMP },
			{ "arrivalportcode", Types.VARCHAR },
			{ "portgoingtocode", Types.VARCHAR },
			{ "nameandaddofshipowners", Types.VARCHAR },
			{ "clearanceheight", Types.BIGINT },
			{ "showndraft", Types.BIGINT },
			{ "dwt", Types.BIGINT },
			{ "shipagencycode", Types.VARCHAR },
			{ "purposecode", Types.INTEGER },
			{ "crewnumber", Types.BIGINT },
			{ "passengernumber", Types.BIGINT },
			{ "quantityandtypeofcargo", Types.VARCHAR },
			{ "otherpersons", Types.INTEGER },
			{ "remarks", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table notice_ship_message (id LONG not null primary key,noticeshipcode VARCHAR(75) null,documentname LONG,usercreated VARCHAR(75) null,confirmtime INTEGER,callsign VARCHAR(75) null,arrivaldate DATE null,arrivalportcode VARCHAR(75) null,portgoingtocode VARCHAR(75) null,nameandaddofshipowners VARCHAR(75) null,clearanceheight LONG,showndraft LONG,dwt LONG,shipagencycode VARCHAR(75) null,purposecode INTEGER,crewnumber LONG,passengernumber LONG,quantityandtypeofcargo VARCHAR(75) null,otherpersons INTEGER,remarks VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table notice_ship_message";
	public static final String ORDER_BY_JPQL = " ORDER BY noticeShipMessage.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY notice_ship_message.id ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.NoticeShipMessage"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.NoticeShipMessage"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static NoticeShipMessage toModel(NoticeShipMessageSoap soapModel) {
		NoticeShipMessage model = new NoticeShipMessageImpl();

		model.setId(soapModel.getId());
		model.setNoticeShipCode(soapModel.getNoticeShipCode());
		model.setDocumentName(soapModel.getDocumentName());
		model.setUserCreated(soapModel.getUserCreated());
		model.setConfirmTime(soapModel.getConfirmTime());
		model.setCallSign(soapModel.getCallSign());
		model.setArrivalDate(soapModel.getArrivalDate());
		model.setArrivalPortCode(soapModel.getArrivalPortCode());
		model.setPortGoingToCode(soapModel.getPortGoingToCode());
		model.setNameAndAddOfShipOwners(soapModel.getNameAndAddOfShipOwners());
		model.setClearanceHeight(soapModel.getClearanceHeight());
		model.setShownDraft(soapModel.getShownDraft());
		model.setDwt(soapModel.getDwt());
		model.setShipAgencyCode(soapModel.getShipAgencyCode());
		model.setPurposeCode(soapModel.getPurposeCode());
		model.setCrewNumber(soapModel.getCrewNumber());
		model.setPassengerNumber(soapModel.getPassengerNumber());
		model.setQuantityAndTypeOfCargo(soapModel.getQuantityAndTypeOfCargo());
		model.setOtherPersons(soapModel.getOtherPersons());
		model.setRemarks(soapModel.getRemarks());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<NoticeShipMessage> toModels(
		NoticeShipMessageSoap[] soapModels) {
		List<NoticeShipMessage> models = new ArrayList<NoticeShipMessage>(soapModels.length);

		for (NoticeShipMessageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.NoticeShipMessage"));

	public NoticeShipMessageModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return NoticeShipMessage.class;
	}

	public String getModelClassName() {
		return NoticeShipMessage.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	@JSON
	public String getNoticeShipCode() {
		if (_noticeShipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _noticeShipCode;
		}
	}

	public void setNoticeShipCode(String noticeShipCode) {
		_noticeShipCode = noticeShipCode;
	}

	@JSON
	public long getDocumentName() {
		return _documentName;
	}

	public void setDocumentName(long documentName) {
		_documentName = documentName;
	}

	@JSON
	public String getUserCreated() {
		if (_userCreated == null) {
			return StringPool.BLANK;
		}
		else {
			return _userCreated;
		}
	}

	public void setUserCreated(String userCreated) {
		_userCreated = userCreated;
	}

	@JSON
	public int getConfirmTime() {
		return _confirmTime;
	}

	public void setConfirmTime(int confirmTime) {
		_confirmTime = confirmTime;
	}

	@JSON
	public String getCallSign() {
		if (_callSign == null) {
			return StringPool.BLANK;
		}
		else {
			return _callSign;
		}
	}

	public void setCallSign(String callSign) {
		_callSign = callSign;
	}

	@JSON
	public Date getArrivalDate() {
		return _arrivalDate;
	}

	public void setArrivalDate(Date arrivalDate) {
		_arrivalDate = arrivalDate;
	}

	@JSON
	public String getArrivalPortCode() {
		if (_arrivalPortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _arrivalPortCode;
		}
	}

	public void setArrivalPortCode(String arrivalPortCode) {
		_arrivalPortCode = arrivalPortCode;
	}

	@JSON
	public String getPortGoingToCode() {
		if (_portGoingToCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portGoingToCode;
		}
	}

	public void setPortGoingToCode(String portGoingToCode) {
		_portGoingToCode = portGoingToCode;
	}

	@JSON
	public String getNameAndAddOfShipOwners() {
		if (_nameAndAddOfShipOwners == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameAndAddOfShipOwners;
		}
	}

	public void setNameAndAddOfShipOwners(String nameAndAddOfShipOwners) {
		_nameAndAddOfShipOwners = nameAndAddOfShipOwners;
	}

	@JSON
	public long getClearanceHeight() {
		return _clearanceHeight;
	}

	public void setClearanceHeight(long clearanceHeight) {
		_clearanceHeight = clearanceHeight;
	}

	@JSON
	public long getShownDraft() {
		return _shownDraft;
	}

	public void setShownDraft(long shownDraft) {
		_shownDraft = shownDraft;
	}

	@JSON
	public long getDwt() {
		return _dwt;
	}

	public void setDwt(long dwt) {
		_dwt = dwt;
	}

	@JSON
	public String getShipAgencyCode() {
		if (_shipAgencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyCode;
		}
	}

	public void setShipAgencyCode(String shipAgencyCode) {
		_shipAgencyCode = shipAgencyCode;
	}

	@JSON
	public int getPurposeCode() {
		return _purposeCode;
	}

	public void setPurposeCode(int purposeCode) {
		_purposeCode = purposeCode;
	}

	@JSON
	public long getCrewNumber() {
		return _crewNumber;
	}

	public void setCrewNumber(long crewNumber) {
		_crewNumber = crewNumber;
	}

	@JSON
	public long getPassengerNumber() {
		return _passengerNumber;
	}

	public void setPassengerNumber(long passengerNumber) {
		_passengerNumber = passengerNumber;
	}

	@JSON
	public String getQuantityAndTypeOfCargo() {
		if (_quantityAndTypeOfCargo == null) {
			return StringPool.BLANK;
		}
		else {
			return _quantityAndTypeOfCargo;
		}
	}

	public void setQuantityAndTypeOfCargo(String quantityAndTypeOfCargo) {
		_quantityAndTypeOfCargo = quantityAndTypeOfCargo;
	}

	@JSON
	public int getOtherPersons() {
		return _otherPersons;
	}

	public void setOtherPersons(int otherPersons) {
		_otherPersons = otherPersons;
	}

	@JSON
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@Override
	public NoticeShipMessage toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (NoticeShipMessage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					NoticeShipMessage.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		NoticeShipMessageImpl noticeShipMessageImpl = new NoticeShipMessageImpl();

		noticeShipMessageImpl.setId(getId());
		noticeShipMessageImpl.setNoticeShipCode(getNoticeShipCode());
		noticeShipMessageImpl.setDocumentName(getDocumentName());
		noticeShipMessageImpl.setUserCreated(getUserCreated());
		noticeShipMessageImpl.setConfirmTime(getConfirmTime());
		noticeShipMessageImpl.setCallSign(getCallSign());
		noticeShipMessageImpl.setArrivalDate(getArrivalDate());
		noticeShipMessageImpl.setArrivalPortCode(getArrivalPortCode());
		noticeShipMessageImpl.setPortGoingToCode(getPortGoingToCode());
		noticeShipMessageImpl.setNameAndAddOfShipOwners(getNameAndAddOfShipOwners());
		noticeShipMessageImpl.setClearanceHeight(getClearanceHeight());
		noticeShipMessageImpl.setShownDraft(getShownDraft());
		noticeShipMessageImpl.setDwt(getDwt());
		noticeShipMessageImpl.setShipAgencyCode(getShipAgencyCode());
		noticeShipMessageImpl.setPurposeCode(getPurposeCode());
		noticeShipMessageImpl.setCrewNumber(getCrewNumber());
		noticeShipMessageImpl.setPassengerNumber(getPassengerNumber());
		noticeShipMessageImpl.setQuantityAndTypeOfCargo(getQuantityAndTypeOfCargo());
		noticeShipMessageImpl.setOtherPersons(getOtherPersons());
		noticeShipMessageImpl.setRemarks(getRemarks());

		noticeShipMessageImpl.resetOriginalValues();

		return noticeShipMessageImpl;
	}

	public int compareTo(NoticeShipMessage noticeShipMessage) {
		int value = 0;

		if (getId() < noticeShipMessage.getId()) {
			value = -1;
		}
		else if (getId() > noticeShipMessage.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		NoticeShipMessage noticeShipMessage = null;

		try {
			noticeShipMessage = (NoticeShipMessage)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = noticeShipMessage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<NoticeShipMessage> toCacheModel() {
		NoticeShipMessageCacheModel noticeShipMessageCacheModel = new NoticeShipMessageCacheModel();

		noticeShipMessageCacheModel.id = getId();

		noticeShipMessageCacheModel.noticeShipCode = getNoticeShipCode();

		String noticeShipCode = noticeShipMessageCacheModel.noticeShipCode;

		if ((noticeShipCode != null) && (noticeShipCode.length() == 0)) {
			noticeShipMessageCacheModel.noticeShipCode = null;
		}

		noticeShipMessageCacheModel.documentName = getDocumentName();

		noticeShipMessageCacheModel.userCreated = getUserCreated();

		String userCreated = noticeShipMessageCacheModel.userCreated;

		if ((userCreated != null) && (userCreated.length() == 0)) {
			noticeShipMessageCacheModel.userCreated = null;
		}

		noticeShipMessageCacheModel.confirmTime = getConfirmTime();

		noticeShipMessageCacheModel.callSign = getCallSign();

		String callSign = noticeShipMessageCacheModel.callSign;

		if ((callSign != null) && (callSign.length() == 0)) {
			noticeShipMessageCacheModel.callSign = null;
		}

		Date arrivalDate = getArrivalDate();

		if (arrivalDate != null) {
			noticeShipMessageCacheModel.arrivalDate = arrivalDate.getTime();
		}
		else {
			noticeShipMessageCacheModel.arrivalDate = Long.MIN_VALUE;
		}

		noticeShipMessageCacheModel.arrivalPortCode = getArrivalPortCode();

		String arrivalPortCode = noticeShipMessageCacheModel.arrivalPortCode;

		if ((arrivalPortCode != null) && (arrivalPortCode.length() == 0)) {
			noticeShipMessageCacheModel.arrivalPortCode = null;
		}

		noticeShipMessageCacheModel.portGoingToCode = getPortGoingToCode();

		String portGoingToCode = noticeShipMessageCacheModel.portGoingToCode;

		if ((portGoingToCode != null) && (portGoingToCode.length() == 0)) {
			noticeShipMessageCacheModel.portGoingToCode = null;
		}

		noticeShipMessageCacheModel.nameAndAddOfShipOwners = getNameAndAddOfShipOwners();

		String nameAndAddOfShipOwners = noticeShipMessageCacheModel.nameAndAddOfShipOwners;

		if ((nameAndAddOfShipOwners != null) &&
				(nameAndAddOfShipOwners.length() == 0)) {
			noticeShipMessageCacheModel.nameAndAddOfShipOwners = null;
		}

		noticeShipMessageCacheModel.clearanceHeight = getClearanceHeight();

		noticeShipMessageCacheModel.shownDraft = getShownDraft();

		noticeShipMessageCacheModel.dwt = getDwt();

		noticeShipMessageCacheModel.shipAgencyCode = getShipAgencyCode();

		String shipAgencyCode = noticeShipMessageCacheModel.shipAgencyCode;

		if ((shipAgencyCode != null) && (shipAgencyCode.length() == 0)) {
			noticeShipMessageCacheModel.shipAgencyCode = null;
		}

		noticeShipMessageCacheModel.purposeCode = getPurposeCode();

		noticeShipMessageCacheModel.crewNumber = getCrewNumber();

		noticeShipMessageCacheModel.passengerNumber = getPassengerNumber();

		noticeShipMessageCacheModel.quantityAndTypeOfCargo = getQuantityAndTypeOfCargo();

		String quantityAndTypeOfCargo = noticeShipMessageCacheModel.quantityAndTypeOfCargo;

		if ((quantityAndTypeOfCargo != null) &&
				(quantityAndTypeOfCargo.length() == 0)) {
			noticeShipMessageCacheModel.quantityAndTypeOfCargo = null;
		}

		noticeShipMessageCacheModel.otherPersons = getOtherPersons();

		noticeShipMessageCacheModel.remarks = getRemarks();

		String remarks = noticeShipMessageCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			noticeShipMessageCacheModel.remarks = null;
		}

		return noticeShipMessageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", noticeShipCode=");
		sb.append(getNoticeShipCode());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", userCreated=");
		sb.append(getUserCreated());
		sb.append(", confirmTime=");
		sb.append(getConfirmTime());
		sb.append(", callSign=");
		sb.append(getCallSign());
		sb.append(", arrivalDate=");
		sb.append(getArrivalDate());
		sb.append(", arrivalPortCode=");
		sb.append(getArrivalPortCode());
		sb.append(", portGoingToCode=");
		sb.append(getPortGoingToCode());
		sb.append(", nameAndAddOfShipOwners=");
		sb.append(getNameAndAddOfShipOwners());
		sb.append(", clearanceHeight=");
		sb.append(getClearanceHeight());
		sb.append(", shownDraft=");
		sb.append(getShownDraft());
		sb.append(", dwt=");
		sb.append(getDwt());
		sb.append(", shipAgencyCode=");
		sb.append(getShipAgencyCode());
		sb.append(", purposeCode=");
		sb.append(getPurposeCode());
		sb.append(", crewNumber=");
		sb.append(getCrewNumber());
		sb.append(", passengerNumber=");
		sb.append(getPassengerNumber());
		sb.append(", quantityAndTypeOfCargo=");
		sb.append(getQuantityAndTypeOfCargo());
		sb.append(", otherPersons=");
		sb.append(getOtherPersons());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.NoticeShipMessage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noticeShipCode</column-name><column-value><![CDATA[");
		sb.append(getNoticeShipCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userCreated</column-name><column-value><![CDATA[");
		sb.append(getUserCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>confirmTime</column-name><column-value><![CDATA[");
		sb.append(getConfirmTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callSign</column-name><column-value><![CDATA[");
		sb.append(getCallSign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arrivalDate</column-name><column-value><![CDATA[");
		sb.append(getArrivalDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arrivalPortCode</column-name><column-value><![CDATA[");
		sb.append(getArrivalPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portGoingToCode</column-name><column-value><![CDATA[");
		sb.append(getPortGoingToCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameAndAddOfShipOwners</column-name><column-value><![CDATA[");
		sb.append(getNameAndAddOfShipOwners());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clearanceHeight</column-name><column-value><![CDATA[");
		sb.append(getClearanceHeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shownDraft</column-name><column-value><![CDATA[");
		sb.append(getShownDraft());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dwt</column-name><column-value><![CDATA[");
		sb.append(getDwt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyCode</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purposeCode</column-name><column-value><![CDATA[");
		sb.append(getPurposeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>crewNumber</column-name><column-value><![CDATA[");
		sb.append(getCrewNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passengerNumber</column-name><column-value><![CDATA[");
		sb.append(getPassengerNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantityAndTypeOfCargo</column-name><column-value><![CDATA[");
		sb.append(getQuantityAndTypeOfCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherPersons</column-name><column-value><![CDATA[");
		sb.append(getOtherPersons());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = NoticeShipMessage.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			NoticeShipMessage.class
		};
	private long _id;
	private String _noticeShipCode;
	private long _documentName;
	private String _userCreated;
	private int _confirmTime;
	private String _callSign;
	private Date _arrivalDate;
	private String _arrivalPortCode;
	private String _portGoingToCode;
	private String _nameAndAddOfShipOwners;
	private long _clearanceHeight;
	private long _shownDraft;
	private long _dwt;
	private String _shipAgencyCode;
	private int _purposeCode;
	private long _crewNumber;
	private long _passengerNumber;
	private String _quantityAndTypeOfCargo;
	private int _otherPersons;
	private String _remarks;
	private transient ExpandoBridge _expandoBridge;
	private NoticeShipMessage _escapedModelProxy;
}