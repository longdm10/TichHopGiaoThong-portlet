/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.IssuePermissionForTransit;
import vn.gt.dao.noticeandmessage.model.IssuePermissionForTransitModel;
import vn.gt.dao.noticeandmessage.model.IssuePermissionForTransitSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the IssuePermissionForTransit service. Represents a row in the &quot;ISSUE_PERMISSION_FOR_TRANSIT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.IssuePermissionForTransitModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IssuePermissionForTransitImpl}.
 * </p>
 *
 * @author win_64
 * @see IssuePermissionForTransitImpl
 * @see vn.gt.dao.noticeandmessage.model.IssuePermissionForTransit
 * @see vn.gt.dao.noticeandmessage.model.IssuePermissionForTransitModel
 * @generated
 */
@JSON(strict = true)
public class IssuePermissionForTransitModelImpl extends BaseModelImpl<IssuePermissionForTransit>
	implements IssuePermissionForTransitModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a issue permission for transit model instance should use the {@link vn.gt.dao.noticeandmessage.model.IssuePermissionForTransit} interface instead.
	 */
	public static final String TABLE_NAME = "ISSUE_PERMISSION_FOR_TRANSIT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "NumberPermissionForTransit", Types.VARCHAR },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "RequestState", Types.INTEGER },
			{ "PortofAuthority", Types.VARCHAR },
			{ "NameOfShip", Types.VARCHAR },
			{ "FlagStateOfShip", Types.VARCHAR },
			{ "GT", Types.DOUBLE },
			{ "NumberOfCrews", Types.INTEGER },
			{ "NumberOfPassengers", Types.INTEGER },
			{ "CallSign", Types.VARCHAR },
			{ "NameOfMaster", Types.VARCHAR },
			{ "TransitCargo", Types.VARCHAR },
			{ "VolumeCargo", Types.DOUBLE },
			{ "CargoUnit", Types.VARCHAR },
			{ "PermittedTransitFrom", Types.VARCHAR },
			{ "PermittedTransitTo", Types.VARCHAR },
			{ "TimeOfDeparture", Types.TIMESTAMP },
			{ "ValidUntil", Types.TIMESTAMP },
			{ "DateOfSign", Types.TIMESTAMP },
			{ "UserCreated", Types.VARCHAR },
			{ "DirectorOfMaritime", Types.VARCHAR },
			{ "CreatedDate", Types.TIMESTAMP },
			{ "CertificateNo", Types.VARCHAR },
			{ "VersionNo", Types.VARCHAR },
			{ "IsApproval", Types.INTEGER },
			{ "ApprovalDate", Types.TIMESTAMP },
			{ "ApprovalName", Types.VARCHAR },
			{ "Remarks", Types.VARCHAR },
			{ "IsCancel", Types.INTEGER },
			{ "CancelDate", Types.TIMESTAMP },
			{ "CancelName", Types.VARCHAR },
			{ "CancelNote", Types.VARCHAR },
			{ "Representative", Types.VARCHAR },
			{ "DigitalAttachedFile", Types.BIGINT },
			{ "SignDate", Types.TIMESTAMP },
			{ "SignName", Types.VARCHAR },
			{ "SignTitle", Types.VARCHAR },
			{ "SignPlace", Types.VARCHAR },
			{ "StampStatus", Types.BIGINT },
			{ "AttachedFile", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ISSUE_PERMISSION_FOR_TRANSIT (ID LONG not null primary key,RequestCode VARCHAR(75) null,NumberPermissionForTransit VARCHAR(75) null,DocumentName LONG,DocumentYear INTEGER,RequestState INTEGER,PortofAuthority VARCHAR(75) null,NameOfShip VARCHAR(75) null,FlagStateOfShip VARCHAR(75) null,GT DOUBLE,NumberOfCrews INTEGER,NumberOfPassengers INTEGER,CallSign VARCHAR(75) null,NameOfMaster VARCHAR(75) null,TransitCargo VARCHAR(75) null,VolumeCargo DOUBLE,CargoUnit VARCHAR(75) null,PermittedTransitFrom VARCHAR(75) null,PermittedTransitTo VARCHAR(75) null,TimeOfDeparture DATE null,ValidUntil DATE null,DateOfSign DATE null,UserCreated VARCHAR(75) null,DirectorOfMaritime VARCHAR(75) null,CreatedDate DATE null,CertificateNo VARCHAR(75) null,VersionNo VARCHAR(75) null,IsApproval INTEGER,ApprovalDate DATE null,ApprovalName VARCHAR(75) null,Remarks VARCHAR(75) null,IsCancel INTEGER,CancelDate DATE null,CancelName VARCHAR(75) null,CancelNote VARCHAR(75) null,Representative VARCHAR(75) null,DigitalAttachedFile LONG,SignDate DATE null,SignName VARCHAR(75) null,SignTitle VARCHAR(75) null,SignPlace VARCHAR(75) null,StampStatus LONG,AttachedFile LONG)";
	public static final String TABLE_SQL_DROP = "drop table ISSUE_PERMISSION_FOR_TRANSIT";
	public static final String ORDER_BY_JPQL = " ORDER BY issuePermissionForTransit.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ISSUE_PERMISSION_FOR_TRANSIT.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.IssuePermissionForTransit"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.IssuePermissionForTransit"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.IssuePermissionForTransit"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long REQUESTCODE_COLUMN_BITMASK = 4L;
	public static long REQUESTSTATE_COLUMN_BITMASK = 8L;
	public static long VERSIONNO_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static IssuePermissionForTransit toModel(
		IssuePermissionForTransitSoap soapModel) {
		IssuePermissionForTransit model = new IssuePermissionForTransitImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setNumberPermissionForTransit(soapModel.getNumberPermissionForTransit());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setRequestState(soapModel.getRequestState());
		model.setPortofAuthority(soapModel.getPortofAuthority());
		model.setNameOfShip(soapModel.getNameOfShip());
		model.setFlagStateOfShip(soapModel.getFlagStateOfShip());
		model.setGt(soapModel.getGt());
		model.setNumberOfCrews(soapModel.getNumberOfCrews());
		model.setNumberOfPassengers(soapModel.getNumberOfPassengers());
		model.setCallSign(soapModel.getCallSign());
		model.setNameOfMaster(soapModel.getNameOfMaster());
		model.setTransitCargo(soapModel.getTransitCargo());
		model.setVolumeCargo(soapModel.getVolumeCargo());
		model.setCargoUnit(soapModel.getCargoUnit());
		model.setPermittedTransitFrom(soapModel.getPermittedTransitFrom());
		model.setPermittedTransitTo(soapModel.getPermittedTransitTo());
		model.setTimeOfDeparture(soapModel.getTimeOfDeparture());
		model.setValidUntil(soapModel.getValidUntil());
		model.setDateOfSign(soapModel.getDateOfSign());
		model.setUserCreated(soapModel.getUserCreated());
		model.setDirectorOfMaritime(soapModel.getDirectorOfMaritime());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setCertificateNo(soapModel.getCertificateNo());
		model.setVersionNo(soapModel.getVersionNo());
		model.setIsApproval(soapModel.getIsApproval());
		model.setApprovalDate(soapModel.getApprovalDate());
		model.setApprovalName(soapModel.getApprovalName());
		model.setRemarks(soapModel.getRemarks());
		model.setIsCancel(soapModel.getIsCancel());
		model.setCancelDate(soapModel.getCancelDate());
		model.setCancelName(soapModel.getCancelName());
		model.setCancelNote(soapModel.getCancelNote());
		model.setRepresentative(soapModel.getRepresentative());
		model.setDigitalAttachedFile(soapModel.getDigitalAttachedFile());
		model.setSignDate(soapModel.getSignDate());
		model.setSignName(soapModel.getSignName());
		model.setSignTitle(soapModel.getSignTitle());
		model.setSignPlace(soapModel.getSignPlace());
		model.setStampStatus(soapModel.getStampStatus());
		model.setAttachedFile(soapModel.getAttachedFile());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<IssuePermissionForTransit> toModels(
		IssuePermissionForTransitSoap[] soapModels) {
		List<IssuePermissionForTransit> models = new ArrayList<IssuePermissionForTransit>(soapModels.length);

		for (IssuePermissionForTransitSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.IssuePermissionForTransit"));

	public IssuePermissionForTransitModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return IssuePermissionForTransit.class;
	}

	public String getModelClassName() {
		return IssuePermissionForTransit.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	public String getNumberPermissionForTransit() {
		if (_numberPermissionForTransit == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberPermissionForTransit;
		}
	}

	public void setNumberPermissionForTransit(String numberPermissionForTransit) {
		_numberPermissionForTransit = numberPermissionForTransit;
	}

	@JSON
	public long getDocumentName() {
		return _documentName;
	}

	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	public int getDocumentYear() {
		return _documentYear;
	}

	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	public int getRequestState() {
		return _requestState;
	}

	public void setRequestState(int requestState) {
		_columnBitmask |= REQUESTSTATE_COLUMN_BITMASK;

		if (!_setOriginalRequestState) {
			_setOriginalRequestState = true;

			_originalRequestState = _requestState;
		}

		_requestState = requestState;
	}

	public int getOriginalRequestState() {
		return _originalRequestState;
	}

	@JSON
	public String getPortofAuthority() {
		if (_portofAuthority == null) {
			return StringPool.BLANK;
		}
		else {
			return _portofAuthority;
		}
	}

	public void setPortofAuthority(String portofAuthority) {
		_portofAuthority = portofAuthority;
	}

	@JSON
	public String getNameOfShip() {
		if (_nameOfShip == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShip;
		}
	}

	public void setNameOfShip(String nameOfShip) {
		_nameOfShip = nameOfShip;
	}

	@JSON
	public String getFlagStateOfShip() {
		if (_flagStateOfShip == null) {
			return StringPool.BLANK;
		}
		else {
			return _flagStateOfShip;
		}
	}

	public void setFlagStateOfShip(String flagStateOfShip) {
		_flagStateOfShip = flagStateOfShip;
	}

	@JSON
	public double getGt() {
		return _gt;
	}

	public void setGt(double gt) {
		_gt = gt;
	}

	@JSON
	public int getNumberOfCrews() {
		return _numberOfCrews;
	}

	public void setNumberOfCrews(int numberOfCrews) {
		_numberOfCrews = numberOfCrews;
	}

	@JSON
	public int getNumberOfPassengers() {
		return _numberOfPassengers;
	}

	public void setNumberOfPassengers(int numberOfPassengers) {
		_numberOfPassengers = numberOfPassengers;
	}

	@JSON
	public String getCallSign() {
		if (_callSign == null) {
			return StringPool.BLANK;
		}
		else {
			return _callSign;
		}
	}

	public void setCallSign(String callSign) {
		_callSign = callSign;
	}

	@JSON
	public String getNameOfMaster() {
		if (_nameOfMaster == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfMaster;
		}
	}

	public void setNameOfMaster(String nameOfMaster) {
		_nameOfMaster = nameOfMaster;
	}

	@JSON
	public String getTransitCargo() {
		if (_transitCargo == null) {
			return StringPool.BLANK;
		}
		else {
			return _transitCargo;
		}
	}

	public void setTransitCargo(String transitCargo) {
		_transitCargo = transitCargo;
	}

	@JSON
	public double getVolumeCargo() {
		return _volumeCargo;
	}

	public void setVolumeCargo(double volumeCargo) {
		_volumeCargo = volumeCargo;
	}

	@JSON
	public String getCargoUnit() {
		if (_cargoUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _cargoUnit;
		}
	}

	public void setCargoUnit(String cargoUnit) {
		_cargoUnit = cargoUnit;
	}

	@JSON
	public String getPermittedTransitFrom() {
		if (_permittedTransitFrom == null) {
			return StringPool.BLANK;
		}
		else {
			return _permittedTransitFrom;
		}
	}

	public void setPermittedTransitFrom(String permittedTransitFrom) {
		_permittedTransitFrom = permittedTransitFrom;
	}

	@JSON
	public String getPermittedTransitTo() {
		if (_permittedTransitTo == null) {
			return StringPool.BLANK;
		}
		else {
			return _permittedTransitTo;
		}
	}

	public void setPermittedTransitTo(String permittedTransitTo) {
		_permittedTransitTo = permittedTransitTo;
	}

	@JSON
	public Date getTimeOfDeparture() {
		return _timeOfDeparture;
	}

	public void setTimeOfDeparture(Date timeOfDeparture) {
		_timeOfDeparture = timeOfDeparture;
	}

	@JSON
	public Date getValidUntil() {
		return _validUntil;
	}

	public void setValidUntil(Date validUntil) {
		_validUntil = validUntil;
	}

	@JSON
	public Date getDateOfSign() {
		return _dateOfSign;
	}

	public void setDateOfSign(Date dateOfSign) {
		_dateOfSign = dateOfSign;
	}

	@JSON
	public String getUserCreated() {
		if (_userCreated == null) {
			return StringPool.BLANK;
		}
		else {
			return _userCreated;
		}
	}

	public void setUserCreated(String userCreated) {
		_userCreated = userCreated;
	}

	@JSON
	public String getDirectorOfMaritime() {
		if (_directorOfMaritime == null) {
			return StringPool.BLANK;
		}
		else {
			return _directorOfMaritime;
		}
	}

	public void setDirectorOfMaritime(String directorOfMaritime) {
		_directorOfMaritime = directorOfMaritime;
	}

	@JSON
	public Date getCreatedDate() {
		return _createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	public String getCertificateNo() {
		if (_certificateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateNo;
		}
	}

	public void setCertificateNo(String certificateNo) {
		_certificateNo = certificateNo;
	}

	@JSON
	public String getVersionNo() {
		if (_versionNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _versionNo;
		}
	}

	public void setVersionNo(String versionNo) {
		_columnBitmask |= VERSIONNO_COLUMN_BITMASK;

		if (_originalVersionNo == null) {
			_originalVersionNo = _versionNo;
		}

		_versionNo = versionNo;
	}

	public String getOriginalVersionNo() {
		return GetterUtil.getString(_originalVersionNo);
	}

	@JSON
	public int getIsApproval() {
		return _isApproval;
	}

	public void setIsApproval(int isApproval) {
		_isApproval = isApproval;
	}

	@JSON
	public Date getApprovalDate() {
		return _approvalDate;
	}

	public void setApprovalDate(Date approvalDate) {
		_approvalDate = approvalDate;
	}

	@JSON
	public String getApprovalName() {
		if (_approvalName == null) {
			return StringPool.BLANK;
		}
		else {
			return _approvalName;
		}
	}

	public void setApprovalName(String approvalName) {
		_approvalName = approvalName;
	}

	@JSON
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	public int getIsCancel() {
		return _isCancel;
	}

	public void setIsCancel(int isCancel) {
		_isCancel = isCancel;
	}

	@JSON
	public Date getCancelDate() {
		return _cancelDate;
	}

	public void setCancelDate(Date cancelDate) {
		_cancelDate = cancelDate;
	}

	@JSON
	public String getCancelName() {
		if (_cancelName == null) {
			return StringPool.BLANK;
		}
		else {
			return _cancelName;
		}
	}

	public void setCancelName(String cancelName) {
		_cancelName = cancelName;
	}

	@JSON
	public String getCancelNote() {
		if (_cancelNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _cancelNote;
		}
	}

	public void setCancelNote(String cancelNote) {
		_cancelNote = cancelNote;
	}

	@JSON
	public String getRepresentative() {
		if (_representative == null) {
			return StringPool.BLANK;
		}
		else {
			return _representative;
		}
	}

	public void setRepresentative(String representative) {
		_representative = representative;
	}

	@JSON
	public long getDigitalAttachedFile() {
		return _digitalAttachedFile;
	}

	public void setDigitalAttachedFile(long digitalAttachedFile) {
		_digitalAttachedFile = digitalAttachedFile;
	}

	@JSON
	public Date getSignDate() {
		return _signDate;
	}

	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	public String getSignName() {
		if (_signName == null) {
			return StringPool.BLANK;
		}
		else {
			return _signName;
		}
	}

	public void setSignName(String signName) {
		_signName = signName;
	}

	@JSON
	public String getSignTitle() {
		if (_signTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _signTitle;
		}
	}

	public void setSignTitle(String signTitle) {
		_signTitle = signTitle;
	}

	@JSON
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@JSON
	public long getStampStatus() {
		return _stampStatus;
	}

	public void setStampStatus(long stampStatus) {
		_stampStatus = stampStatus;
	}

	@JSON
	public long getAttachedFile() {
		return _attachedFile;
	}

	public void setAttachedFile(long attachedFile) {
		_attachedFile = attachedFile;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public IssuePermissionForTransit toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (IssuePermissionForTransit)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					IssuePermissionForTransit.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		IssuePermissionForTransitImpl issuePermissionForTransitImpl = new IssuePermissionForTransitImpl();

		issuePermissionForTransitImpl.setId(getId());
		issuePermissionForTransitImpl.setRequestCode(getRequestCode());
		issuePermissionForTransitImpl.setNumberPermissionForTransit(getNumberPermissionForTransit());
		issuePermissionForTransitImpl.setDocumentName(getDocumentName());
		issuePermissionForTransitImpl.setDocumentYear(getDocumentYear());
		issuePermissionForTransitImpl.setRequestState(getRequestState());
		issuePermissionForTransitImpl.setPortofAuthority(getPortofAuthority());
		issuePermissionForTransitImpl.setNameOfShip(getNameOfShip());
		issuePermissionForTransitImpl.setFlagStateOfShip(getFlagStateOfShip());
		issuePermissionForTransitImpl.setGt(getGt());
		issuePermissionForTransitImpl.setNumberOfCrews(getNumberOfCrews());
		issuePermissionForTransitImpl.setNumberOfPassengers(getNumberOfPassengers());
		issuePermissionForTransitImpl.setCallSign(getCallSign());
		issuePermissionForTransitImpl.setNameOfMaster(getNameOfMaster());
		issuePermissionForTransitImpl.setTransitCargo(getTransitCargo());
		issuePermissionForTransitImpl.setVolumeCargo(getVolumeCargo());
		issuePermissionForTransitImpl.setCargoUnit(getCargoUnit());
		issuePermissionForTransitImpl.setPermittedTransitFrom(getPermittedTransitFrom());
		issuePermissionForTransitImpl.setPermittedTransitTo(getPermittedTransitTo());
		issuePermissionForTransitImpl.setTimeOfDeparture(getTimeOfDeparture());
		issuePermissionForTransitImpl.setValidUntil(getValidUntil());
		issuePermissionForTransitImpl.setDateOfSign(getDateOfSign());
		issuePermissionForTransitImpl.setUserCreated(getUserCreated());
		issuePermissionForTransitImpl.setDirectorOfMaritime(getDirectorOfMaritime());
		issuePermissionForTransitImpl.setCreatedDate(getCreatedDate());
		issuePermissionForTransitImpl.setCertificateNo(getCertificateNo());
		issuePermissionForTransitImpl.setVersionNo(getVersionNo());
		issuePermissionForTransitImpl.setIsApproval(getIsApproval());
		issuePermissionForTransitImpl.setApprovalDate(getApprovalDate());
		issuePermissionForTransitImpl.setApprovalName(getApprovalName());
		issuePermissionForTransitImpl.setRemarks(getRemarks());
		issuePermissionForTransitImpl.setIsCancel(getIsCancel());
		issuePermissionForTransitImpl.setCancelDate(getCancelDate());
		issuePermissionForTransitImpl.setCancelName(getCancelName());
		issuePermissionForTransitImpl.setCancelNote(getCancelNote());
		issuePermissionForTransitImpl.setRepresentative(getRepresentative());
		issuePermissionForTransitImpl.setDigitalAttachedFile(getDigitalAttachedFile());
		issuePermissionForTransitImpl.setSignDate(getSignDate());
		issuePermissionForTransitImpl.setSignName(getSignName());
		issuePermissionForTransitImpl.setSignTitle(getSignTitle());
		issuePermissionForTransitImpl.setSignPlace(getSignPlace());
		issuePermissionForTransitImpl.setStampStatus(getStampStatus());
		issuePermissionForTransitImpl.setAttachedFile(getAttachedFile());

		issuePermissionForTransitImpl.resetOriginalValues();

		return issuePermissionForTransitImpl;
	}

	public int compareTo(IssuePermissionForTransit issuePermissionForTransit) {
		int value = 0;

		if (getId() < issuePermissionForTransit.getId()) {
			value = -1;
		}
		else if (getId() > issuePermissionForTransit.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		IssuePermissionForTransit issuePermissionForTransit = null;

		try {
			issuePermissionForTransit = (IssuePermissionForTransit)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = issuePermissionForTransit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		IssuePermissionForTransitModelImpl issuePermissionForTransitModelImpl = this;

		issuePermissionForTransitModelImpl._originalRequestCode = issuePermissionForTransitModelImpl._requestCode;

		issuePermissionForTransitModelImpl._originalDocumentName = issuePermissionForTransitModelImpl._documentName;

		issuePermissionForTransitModelImpl._setOriginalDocumentName = false;

		issuePermissionForTransitModelImpl._originalDocumentYear = issuePermissionForTransitModelImpl._documentYear;

		issuePermissionForTransitModelImpl._setOriginalDocumentYear = false;

		issuePermissionForTransitModelImpl._originalRequestState = issuePermissionForTransitModelImpl._requestState;

		issuePermissionForTransitModelImpl._setOriginalRequestState = false;

		issuePermissionForTransitModelImpl._originalVersionNo = issuePermissionForTransitModelImpl._versionNo;

		issuePermissionForTransitModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<IssuePermissionForTransit> toCacheModel() {
		IssuePermissionForTransitCacheModel issuePermissionForTransitCacheModel = new IssuePermissionForTransitCacheModel();

		issuePermissionForTransitCacheModel.id = getId();

		issuePermissionForTransitCacheModel.requestCode = getRequestCode();

		String requestCode = issuePermissionForTransitCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			issuePermissionForTransitCacheModel.requestCode = null;
		}

		issuePermissionForTransitCacheModel.numberPermissionForTransit = getNumberPermissionForTransit();

		String numberPermissionForTransit = issuePermissionForTransitCacheModel.numberPermissionForTransit;

		if ((numberPermissionForTransit != null) &&
				(numberPermissionForTransit.length() == 0)) {
			issuePermissionForTransitCacheModel.numberPermissionForTransit = null;
		}

		issuePermissionForTransitCacheModel.documentName = getDocumentName();

		issuePermissionForTransitCacheModel.documentYear = getDocumentYear();

		issuePermissionForTransitCacheModel.requestState = getRequestState();

		issuePermissionForTransitCacheModel.portofAuthority = getPortofAuthority();

		String portofAuthority = issuePermissionForTransitCacheModel.portofAuthority;

		if ((portofAuthority != null) && (portofAuthority.length() == 0)) {
			issuePermissionForTransitCacheModel.portofAuthority = null;
		}

		issuePermissionForTransitCacheModel.nameOfShip = getNameOfShip();

		String nameOfShip = issuePermissionForTransitCacheModel.nameOfShip;

		if ((nameOfShip != null) && (nameOfShip.length() == 0)) {
			issuePermissionForTransitCacheModel.nameOfShip = null;
		}

		issuePermissionForTransitCacheModel.flagStateOfShip = getFlagStateOfShip();

		String flagStateOfShip = issuePermissionForTransitCacheModel.flagStateOfShip;

		if ((flagStateOfShip != null) && (flagStateOfShip.length() == 0)) {
			issuePermissionForTransitCacheModel.flagStateOfShip = null;
		}

		issuePermissionForTransitCacheModel.gt = getGt();

		issuePermissionForTransitCacheModel.numberOfCrews = getNumberOfCrews();

		issuePermissionForTransitCacheModel.numberOfPassengers = getNumberOfPassengers();

		issuePermissionForTransitCacheModel.callSign = getCallSign();

		String callSign = issuePermissionForTransitCacheModel.callSign;

		if ((callSign != null) && (callSign.length() == 0)) {
			issuePermissionForTransitCacheModel.callSign = null;
		}

		issuePermissionForTransitCacheModel.nameOfMaster = getNameOfMaster();

		String nameOfMaster = issuePermissionForTransitCacheModel.nameOfMaster;

		if ((nameOfMaster != null) && (nameOfMaster.length() == 0)) {
			issuePermissionForTransitCacheModel.nameOfMaster = null;
		}

		issuePermissionForTransitCacheModel.transitCargo = getTransitCargo();

		String transitCargo = issuePermissionForTransitCacheModel.transitCargo;

		if ((transitCargo != null) && (transitCargo.length() == 0)) {
			issuePermissionForTransitCacheModel.transitCargo = null;
		}

		issuePermissionForTransitCacheModel.volumeCargo = getVolumeCargo();

		issuePermissionForTransitCacheModel.cargoUnit = getCargoUnit();

		String cargoUnit = issuePermissionForTransitCacheModel.cargoUnit;

		if ((cargoUnit != null) && (cargoUnit.length() == 0)) {
			issuePermissionForTransitCacheModel.cargoUnit = null;
		}

		issuePermissionForTransitCacheModel.permittedTransitFrom = getPermittedTransitFrom();

		String permittedTransitFrom = issuePermissionForTransitCacheModel.permittedTransitFrom;

		if ((permittedTransitFrom != null) &&
				(permittedTransitFrom.length() == 0)) {
			issuePermissionForTransitCacheModel.permittedTransitFrom = null;
		}

		issuePermissionForTransitCacheModel.permittedTransitTo = getPermittedTransitTo();

		String permittedTransitTo = issuePermissionForTransitCacheModel.permittedTransitTo;

		if ((permittedTransitTo != null) && (permittedTransitTo.length() == 0)) {
			issuePermissionForTransitCacheModel.permittedTransitTo = null;
		}

		Date timeOfDeparture = getTimeOfDeparture();

		if (timeOfDeparture != null) {
			issuePermissionForTransitCacheModel.timeOfDeparture = timeOfDeparture.getTime();
		}
		else {
			issuePermissionForTransitCacheModel.timeOfDeparture = Long.MIN_VALUE;
		}

		Date validUntil = getValidUntil();

		if (validUntil != null) {
			issuePermissionForTransitCacheModel.validUntil = validUntil.getTime();
		}
		else {
			issuePermissionForTransitCacheModel.validUntil = Long.MIN_VALUE;
		}

		Date dateOfSign = getDateOfSign();

		if (dateOfSign != null) {
			issuePermissionForTransitCacheModel.dateOfSign = dateOfSign.getTime();
		}
		else {
			issuePermissionForTransitCacheModel.dateOfSign = Long.MIN_VALUE;
		}

		issuePermissionForTransitCacheModel.userCreated = getUserCreated();

		String userCreated = issuePermissionForTransitCacheModel.userCreated;

		if ((userCreated != null) && (userCreated.length() == 0)) {
			issuePermissionForTransitCacheModel.userCreated = null;
		}

		issuePermissionForTransitCacheModel.directorOfMaritime = getDirectorOfMaritime();

		String directorOfMaritime = issuePermissionForTransitCacheModel.directorOfMaritime;

		if ((directorOfMaritime != null) && (directorOfMaritime.length() == 0)) {
			issuePermissionForTransitCacheModel.directorOfMaritime = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			issuePermissionForTransitCacheModel.createdDate = createdDate.getTime();
		}
		else {
			issuePermissionForTransitCacheModel.createdDate = Long.MIN_VALUE;
		}

		issuePermissionForTransitCacheModel.certificateNo = getCertificateNo();

		String certificateNo = issuePermissionForTransitCacheModel.certificateNo;

		if ((certificateNo != null) && (certificateNo.length() == 0)) {
			issuePermissionForTransitCacheModel.certificateNo = null;
		}

		issuePermissionForTransitCacheModel.versionNo = getVersionNo();

		String versionNo = issuePermissionForTransitCacheModel.versionNo;

		if ((versionNo != null) && (versionNo.length() == 0)) {
			issuePermissionForTransitCacheModel.versionNo = null;
		}

		issuePermissionForTransitCacheModel.isApproval = getIsApproval();

		Date approvalDate = getApprovalDate();

		if (approvalDate != null) {
			issuePermissionForTransitCacheModel.approvalDate = approvalDate.getTime();
		}
		else {
			issuePermissionForTransitCacheModel.approvalDate = Long.MIN_VALUE;
		}

		issuePermissionForTransitCacheModel.approvalName = getApprovalName();

		String approvalName = issuePermissionForTransitCacheModel.approvalName;

		if ((approvalName != null) && (approvalName.length() == 0)) {
			issuePermissionForTransitCacheModel.approvalName = null;
		}

		issuePermissionForTransitCacheModel.remarks = getRemarks();

		String remarks = issuePermissionForTransitCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			issuePermissionForTransitCacheModel.remarks = null;
		}

		issuePermissionForTransitCacheModel.isCancel = getIsCancel();

		Date cancelDate = getCancelDate();

		if (cancelDate != null) {
			issuePermissionForTransitCacheModel.cancelDate = cancelDate.getTime();
		}
		else {
			issuePermissionForTransitCacheModel.cancelDate = Long.MIN_VALUE;
		}

		issuePermissionForTransitCacheModel.cancelName = getCancelName();

		String cancelName = issuePermissionForTransitCacheModel.cancelName;

		if ((cancelName != null) && (cancelName.length() == 0)) {
			issuePermissionForTransitCacheModel.cancelName = null;
		}

		issuePermissionForTransitCacheModel.cancelNote = getCancelNote();

		String cancelNote = issuePermissionForTransitCacheModel.cancelNote;

		if ((cancelNote != null) && (cancelNote.length() == 0)) {
			issuePermissionForTransitCacheModel.cancelNote = null;
		}

		issuePermissionForTransitCacheModel.representative = getRepresentative();

		String representative = issuePermissionForTransitCacheModel.representative;

		if ((representative != null) && (representative.length() == 0)) {
			issuePermissionForTransitCacheModel.representative = null;
		}

		issuePermissionForTransitCacheModel.digitalAttachedFile = getDigitalAttachedFile();

		Date signDate = getSignDate();

		if (signDate != null) {
			issuePermissionForTransitCacheModel.signDate = signDate.getTime();
		}
		else {
			issuePermissionForTransitCacheModel.signDate = Long.MIN_VALUE;
		}

		issuePermissionForTransitCacheModel.signName = getSignName();

		String signName = issuePermissionForTransitCacheModel.signName;

		if ((signName != null) && (signName.length() == 0)) {
			issuePermissionForTransitCacheModel.signName = null;
		}

		issuePermissionForTransitCacheModel.signTitle = getSignTitle();

		String signTitle = issuePermissionForTransitCacheModel.signTitle;

		if ((signTitle != null) && (signTitle.length() == 0)) {
			issuePermissionForTransitCacheModel.signTitle = null;
		}

		issuePermissionForTransitCacheModel.signPlace = getSignPlace();

		String signPlace = issuePermissionForTransitCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			issuePermissionForTransitCacheModel.signPlace = null;
		}

		issuePermissionForTransitCacheModel.stampStatus = getStampStatus();

		issuePermissionForTransitCacheModel.attachedFile = getAttachedFile();

		return issuePermissionForTransitCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(87);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", numberPermissionForTransit=");
		sb.append(getNumberPermissionForTransit());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append(", portofAuthority=");
		sb.append(getPortofAuthority());
		sb.append(", nameOfShip=");
		sb.append(getNameOfShip());
		sb.append(", flagStateOfShip=");
		sb.append(getFlagStateOfShip());
		sb.append(", gt=");
		sb.append(getGt());
		sb.append(", numberOfCrews=");
		sb.append(getNumberOfCrews());
		sb.append(", numberOfPassengers=");
		sb.append(getNumberOfPassengers());
		sb.append(", callSign=");
		sb.append(getCallSign());
		sb.append(", nameOfMaster=");
		sb.append(getNameOfMaster());
		sb.append(", transitCargo=");
		sb.append(getTransitCargo());
		sb.append(", volumeCargo=");
		sb.append(getVolumeCargo());
		sb.append(", cargoUnit=");
		sb.append(getCargoUnit());
		sb.append(", permittedTransitFrom=");
		sb.append(getPermittedTransitFrom());
		sb.append(", permittedTransitTo=");
		sb.append(getPermittedTransitTo());
		sb.append(", timeOfDeparture=");
		sb.append(getTimeOfDeparture());
		sb.append(", validUntil=");
		sb.append(getValidUntil());
		sb.append(", dateOfSign=");
		sb.append(getDateOfSign());
		sb.append(", userCreated=");
		sb.append(getUserCreated());
		sb.append(", directorOfMaritime=");
		sb.append(getDirectorOfMaritime());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", certificateNo=");
		sb.append(getCertificateNo());
		sb.append(", versionNo=");
		sb.append(getVersionNo());
		sb.append(", isApproval=");
		sb.append(getIsApproval());
		sb.append(", approvalDate=");
		sb.append(getApprovalDate());
		sb.append(", approvalName=");
		sb.append(getApprovalName());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", isCancel=");
		sb.append(getIsCancel());
		sb.append(", cancelDate=");
		sb.append(getCancelDate());
		sb.append(", cancelName=");
		sb.append(getCancelName());
		sb.append(", cancelNote=");
		sb.append(getCancelNote());
		sb.append(", representative=");
		sb.append(getRepresentative());
		sb.append(", digitalAttachedFile=");
		sb.append(getDigitalAttachedFile());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", signName=");
		sb.append(getSignName());
		sb.append(", signTitle=");
		sb.append(getSignTitle());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", stampStatus=");
		sb.append(getStampStatus());
		sb.append(", attachedFile=");
		sb.append(getAttachedFile());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(133);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.IssuePermissionForTransit");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberPermissionForTransit</column-name><column-value><![CDATA[");
		sb.append(getNumberPermissionForTransit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portofAuthority</column-name><column-value><![CDATA[");
		sb.append(getPortofAuthority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShip</column-name><column-value><![CDATA[");
		sb.append(getNameOfShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flagStateOfShip</column-name><column-value><![CDATA[");
		sb.append(getFlagStateOfShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gt</column-name><column-value><![CDATA[");
		sb.append(getGt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfCrews</column-name><column-value><![CDATA[");
		sb.append(getNumberOfCrews());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfPassengers</column-name><column-value><![CDATA[");
		sb.append(getNumberOfPassengers());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callSign</column-name><column-value><![CDATA[");
		sb.append(getCallSign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfMaster</column-name><column-value><![CDATA[");
		sb.append(getNameOfMaster());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transitCargo</column-name><column-value><![CDATA[");
		sb.append(getTransitCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>volumeCargo</column-name><column-value><![CDATA[");
		sb.append(getVolumeCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cargoUnit</column-name><column-value><![CDATA[");
		sb.append(getCargoUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>permittedTransitFrom</column-name><column-value><![CDATA[");
		sb.append(getPermittedTransitFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>permittedTransitTo</column-name><column-value><![CDATA[");
		sb.append(getPermittedTransitTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeOfDeparture</column-name><column-value><![CDATA[");
		sb.append(getTimeOfDeparture());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validUntil</column-name><column-value><![CDATA[");
		sb.append(getValidUntil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfSign</column-name><column-value><![CDATA[");
		sb.append(getDateOfSign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userCreated</column-name><column-value><![CDATA[");
		sb.append(getUserCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>directorOfMaritime</column-name><column-value><![CDATA[");
		sb.append(getDirectorOfMaritime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateNo</column-name><column-value><![CDATA[");
		sb.append(getCertificateNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNo</column-name><column-value><![CDATA[");
		sb.append(getVersionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApproval</column-name><column-value><![CDATA[");
		sb.append(getIsApproval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvalDate</column-name><column-value><![CDATA[");
		sb.append(getApprovalDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvalName</column-name><column-value><![CDATA[");
		sb.append(getApprovalName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isCancel</column-name><column-value><![CDATA[");
		sb.append(getIsCancel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelDate</column-name><column-value><![CDATA[");
		sb.append(getCancelDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelName</column-name><column-value><![CDATA[");
		sb.append(getCancelName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelNote</column-name><column-value><![CDATA[");
		sb.append(getCancelNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>representative</column-name><column-value><![CDATA[");
		sb.append(getRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>digitalAttachedFile</column-name><column-value><![CDATA[");
		sb.append(getDigitalAttachedFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signName</column-name><column-value><![CDATA[");
		sb.append(getSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signTitle</column-name><column-value><![CDATA[");
		sb.append(getSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stampStatus</column-name><column-value><![CDATA[");
		sb.append(getStampStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFile</column-name><column-value><![CDATA[");
		sb.append(getAttachedFile());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = IssuePermissionForTransit.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			IssuePermissionForTransit.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private String _numberPermissionForTransit;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private int _requestState;
	private int _originalRequestState;
	private boolean _setOriginalRequestState;
	private String _portofAuthority;
	private String _nameOfShip;
	private String _flagStateOfShip;
	private double _gt;
	private int _numberOfCrews;
	private int _numberOfPassengers;
	private String _callSign;
	private String _nameOfMaster;
	private String _transitCargo;
	private double _volumeCargo;
	private String _cargoUnit;
	private String _permittedTransitFrom;
	private String _permittedTransitTo;
	private Date _timeOfDeparture;
	private Date _validUntil;
	private Date _dateOfSign;
	private String _userCreated;
	private String _directorOfMaritime;
	private Date _createdDate;
	private String _certificateNo;
	private String _versionNo;
	private String _originalVersionNo;
	private int _isApproval;
	private Date _approvalDate;
	private String _approvalName;
	private String _remarks;
	private int _isCancel;
	private Date _cancelDate;
	private String _cancelName;
	private String _cancelNote;
	private String _representative;
	private long _digitalAttachedFile;
	private Date _signDate;
	private String _signName;
	private String _signTitle;
	private String _signPlace;
	private long _stampStatus;
	private long _attachedFile;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private IssuePermissionForTransit _escapedModelProxy;
}