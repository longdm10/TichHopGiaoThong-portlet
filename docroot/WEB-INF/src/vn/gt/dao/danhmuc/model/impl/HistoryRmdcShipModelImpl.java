/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.danhmuc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.danhmuc.model.HistoryRmdcShip;
import vn.gt.dao.danhmuc.model.HistoryRmdcShipModel;
import vn.gt.dao.danhmuc.model.HistoryRmdcShipSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the HistoryRmdcShip service. Represents a row in the &quot;history_dmdc_ship&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.danhmuc.model.HistoryRmdcShipModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HistoryRmdcShipImpl}.
 * </p>
 *
 * @author win_64
 * @see HistoryRmdcShipImpl
 * @see vn.gt.dao.danhmuc.model.HistoryRmdcShip
 * @see vn.gt.dao.danhmuc.model.HistoryRmdcShipModel
 * @generated
 */
@JSON(strict = true)
public class HistoryRmdcShipModelImpl extends BaseModelImpl<HistoryRmdcShip>
	implements HistoryRmdcShipModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a history rmdc ship model instance should use the {@link vn.gt.dao.danhmuc.model.HistoryRmdcShip} interface instead.
	 */
	public static final String TABLE_NAME = "history_dmdc_ship";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "shipid", Types.INTEGER },
			{ "shipname", Types.VARCHAR },
			{ "shiptypeid", Types.INTEGER },
			{ "shiptypecode", Types.VARCHAR },
			{ "imo", Types.VARCHAR },
			{ "callsign", Types.VARCHAR },
			{ "stateid", Types.VARCHAR },
			{ "statecode", Types.VARCHAR },
			{ "registrynumber", Types.VARCHAR },
			{ "registrydate", Types.TIMESTAMP },
			{ "registryportid", Types.INTEGER },
			{ "registryportcode", Types.VARCHAR },
			{ "gt", Types.DOUBLE },
			{ "nrt", Types.DOUBLE },
			{ "dwt", Types.DOUBLE },
			{ "ship_length", Types.DOUBLE },
			{ "ship_width", Types.DOUBLE },
			{ "ship_height", Types.DOUBLE },
			{ "sailingspeed", Types.DOUBLE },
			{ "color", Types.VARCHAR },
			{ "bonecode", Types.VARCHAR },
			{ "machinecode", Types.VARCHAR },
			{ "shipagencyid", Types.INTEGER },
			{ "shipagencycode", Types.VARCHAR },
			{ "fishingboatregistration", Types.VARCHAR },
			{ "roleship", Types.INTEGER },
			{ "isdelete", Types.INTEGER },
			{ "markedasdelete", Types.INTEGER },
			{ "modifieddate", Types.TIMESTAMP },
			{ "requesteddate", Types.TIMESTAMP },
			{ "syncversion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table history_dmdc_ship (id LONG not null primary key,shipid INTEGER,shipname VARCHAR(75) null,shiptypeid INTEGER,shiptypecode VARCHAR(75) null,imo VARCHAR(75) null,callsign VARCHAR(75) null,stateid VARCHAR(75) null,statecode VARCHAR(75) null,registrynumber VARCHAR(75) null,registrydate DATE null,registryportid INTEGER,registryportcode VARCHAR(75) null,gt DOUBLE,nrt DOUBLE,dwt DOUBLE,ship_length DOUBLE,ship_width DOUBLE,ship_height DOUBLE,sailingspeed DOUBLE,color VARCHAR(75) null,bonecode VARCHAR(75) null,machinecode VARCHAR(75) null,shipagencyid INTEGER,shipagencycode VARCHAR(75) null,fishingboatregistration VARCHAR(75) null,roleship INTEGER,isdelete INTEGER,markedasdelete INTEGER,modifieddate DATE null,requesteddate DATE null,syncversion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table history_dmdc_ship";
	public static final String ORDER_BY_JPQL = " ORDER BY historyRmdcShip.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY history_dmdc_ship.id ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.danhmuc.model.HistoryRmdcShip"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.danhmuc.model.HistoryRmdcShip"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.danhmuc.model.HistoryRmdcShip"),
			true);
	public static long SHIPTYPECODE_COLUMN_BITMASK = 1L;
	public static long SYNCVERSION_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static HistoryRmdcShip toModel(HistoryRmdcShipSoap soapModel) {
		HistoryRmdcShip model = new HistoryRmdcShipImpl();

		model.setId(soapModel.getId());
		model.setShipId(soapModel.getShipId());
		model.setShipName(soapModel.getShipName());
		model.setShipTypeId(soapModel.getShipTypeId());
		model.setShipTypeCode(soapModel.getShipTypeCode());
		model.setImo(soapModel.getImo());
		model.setCallSign(soapModel.getCallSign());
		model.setStateId(soapModel.getStateId());
		model.setStateCode(soapModel.getStateCode());
		model.setRegistryNumber(soapModel.getRegistryNumber());
		model.setRegistryDate(soapModel.getRegistryDate());
		model.setRegistryPortId(soapModel.getRegistryPortId());
		model.setRegistryPortCode(soapModel.getRegistryPortCode());
		model.setGt(soapModel.getGt());
		model.setNrt(soapModel.getNrt());
		model.setDwt(soapModel.getDwt());
		model.setLength(soapModel.getLength());
		model.setWidth(soapModel.getWidth());
		model.setHeight(soapModel.getHeight());
		model.setSailingSpeed(soapModel.getSailingSpeed());
		model.setColor(soapModel.getColor());
		model.setBoneCode(soapModel.getBoneCode());
		model.setMachineCode(soapModel.getMachineCode());
		model.setShipAgencyId(soapModel.getShipAgencyId());
		model.setShipAgencyCode(soapModel.getShipAgencyCode());
		model.setFishingBoatRegistration(soapModel.getFishingBoatRegistration());
		model.setRoleShip(soapModel.getRoleShip());
		model.setIsDelete(soapModel.getIsDelete());
		model.setMarkedAsDelete(soapModel.getMarkedAsDelete());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRequestedDate(soapModel.getRequestedDate());
		model.setSyncVersion(soapModel.getSyncVersion());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<HistoryRmdcShip> toModels(
		HistoryRmdcShipSoap[] soapModels) {
		List<HistoryRmdcShip> models = new ArrayList<HistoryRmdcShip>(soapModels.length);

		for (HistoryRmdcShipSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.danhmuc.model.HistoryRmdcShip"));

	public HistoryRmdcShipModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return HistoryRmdcShip.class;
	}

	public String getModelClassName() {
		return HistoryRmdcShip.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public int getShipId() {
		return _shipId;
	}

	public void setShipId(int shipId) {
		_shipId = shipId;
	}

	@JSON
	public String getShipName() {
		if (_shipName == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipName;
		}
	}

	public void setShipName(String shipName) {
		_shipName = shipName;
	}

	@JSON
	public int getShipTypeId() {
		return _shipTypeId;
	}

	public void setShipTypeId(int shipTypeId) {
		_shipTypeId = shipTypeId;
	}

	@JSON
	public String getShipTypeCode() {
		if (_shipTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipTypeCode;
		}
	}

	public void setShipTypeCode(String shipTypeCode) {
		_columnBitmask |= SHIPTYPECODE_COLUMN_BITMASK;

		if (_originalShipTypeCode == null) {
			_originalShipTypeCode = _shipTypeCode;
		}

		_shipTypeCode = shipTypeCode;
	}

	public String getOriginalShipTypeCode() {
		return GetterUtil.getString(_originalShipTypeCode);
	}

	@JSON
	public String getImo() {
		if (_imo == null) {
			return StringPool.BLANK;
		}
		else {
			return _imo;
		}
	}

	public void setImo(String imo) {
		_imo = imo;
	}

	@JSON
	public String getCallSign() {
		if (_callSign == null) {
			return StringPool.BLANK;
		}
		else {
			return _callSign;
		}
	}

	public void setCallSign(String callSign) {
		_callSign = callSign;
	}

	@JSON
	public String getStateId() {
		if (_stateId == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateId;
		}
	}

	public void setStateId(String stateId) {
		_stateId = stateId;
	}

	@JSON
	public String getStateCode() {
		if (_stateCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateCode;
		}
	}

	public void setStateCode(String stateCode) {
		_stateCode = stateCode;
	}

	@JSON
	public String getRegistryNumber() {
		if (_registryNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _registryNumber;
		}
	}

	public void setRegistryNumber(String registryNumber) {
		_registryNumber = registryNumber;
	}

	@JSON
	public Date getRegistryDate() {
		return _registryDate;
	}

	public void setRegistryDate(Date registryDate) {
		_registryDate = registryDate;
	}

	@JSON
	public int getRegistryPortId() {
		return _registryPortId;
	}

	public void setRegistryPortId(int registryPortId) {
		_registryPortId = registryPortId;
	}

	@JSON
	public String getRegistryPortCode() {
		if (_registryPortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _registryPortCode;
		}
	}

	public void setRegistryPortCode(String registryPortCode) {
		_registryPortCode = registryPortCode;
	}

	@JSON
	public double getGt() {
		return _gt;
	}

	public void setGt(double gt) {
		_gt = gt;
	}

	@JSON
	public double getNrt() {
		return _nrt;
	}

	public void setNrt(double nrt) {
		_nrt = nrt;
	}

	@JSON
	public double getDwt() {
		return _dwt;
	}

	public void setDwt(double dwt) {
		_dwt = dwt;
	}

	@JSON
	public double getLength() {
		return _length;
	}

	public void setLength(double length) {
		_length = length;
	}

	@JSON
	public double getWidth() {
		return _width;
	}

	public void setWidth(double width) {
		_width = width;
	}

	@JSON
	public double getHeight() {
		return _height;
	}

	public void setHeight(double height) {
		_height = height;
	}

	@JSON
	public double getSailingSpeed() {
		return _sailingSpeed;
	}

	public void setSailingSpeed(double sailingSpeed) {
		_sailingSpeed = sailingSpeed;
	}

	@JSON
	public String getColor() {
		if (_color == null) {
			return StringPool.BLANK;
		}
		else {
			return _color;
		}
	}

	public void setColor(String color) {
		_color = color;
	}

	@JSON
	public String getBoneCode() {
		if (_boneCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _boneCode;
		}
	}

	public void setBoneCode(String boneCode) {
		_boneCode = boneCode;
	}

	@JSON
	public String getMachineCode() {
		if (_machineCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _machineCode;
		}
	}

	public void setMachineCode(String machineCode) {
		_machineCode = machineCode;
	}

	@JSON
	public int getShipAgencyId() {
		return _shipAgencyId;
	}

	public void setShipAgencyId(int shipAgencyId) {
		_shipAgencyId = shipAgencyId;
	}

	@JSON
	public String getShipAgencyCode() {
		if (_shipAgencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyCode;
		}
	}

	public void setShipAgencyCode(String shipAgencyCode) {
		_shipAgencyCode = shipAgencyCode;
	}

	@JSON
	public String getFishingBoatRegistration() {
		if (_fishingBoatRegistration == null) {
			return StringPool.BLANK;
		}
		else {
			return _fishingBoatRegistration;
		}
	}

	public void setFishingBoatRegistration(String fishingBoatRegistration) {
		_fishingBoatRegistration = fishingBoatRegistration;
	}

	@JSON
	public int getRoleShip() {
		return _roleShip;
	}

	public void setRoleShip(int roleShip) {
		_roleShip = roleShip;
	}

	@JSON
	public int getIsDelete() {
		return _isDelete;
	}

	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	@JSON
	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public Date getRequestedDate() {
		return _requestedDate;
	}

	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	@JSON
	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	public void setSyncVersion(String syncVersion) {
		_columnBitmask |= SYNCVERSION_COLUMN_BITMASK;

		if (_originalSyncVersion == null) {
			_originalSyncVersion = _syncVersion;
		}

		_syncVersion = syncVersion;
	}

	public String getOriginalSyncVersion() {
		return GetterUtil.getString(_originalSyncVersion);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public HistoryRmdcShip toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (HistoryRmdcShip)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					HistoryRmdcShip.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		HistoryRmdcShipImpl historyRmdcShipImpl = new HistoryRmdcShipImpl();

		historyRmdcShipImpl.setId(getId());
		historyRmdcShipImpl.setShipId(getShipId());
		historyRmdcShipImpl.setShipName(getShipName());
		historyRmdcShipImpl.setShipTypeId(getShipTypeId());
		historyRmdcShipImpl.setShipTypeCode(getShipTypeCode());
		historyRmdcShipImpl.setImo(getImo());
		historyRmdcShipImpl.setCallSign(getCallSign());
		historyRmdcShipImpl.setStateId(getStateId());
		historyRmdcShipImpl.setStateCode(getStateCode());
		historyRmdcShipImpl.setRegistryNumber(getRegistryNumber());
		historyRmdcShipImpl.setRegistryDate(getRegistryDate());
		historyRmdcShipImpl.setRegistryPortId(getRegistryPortId());
		historyRmdcShipImpl.setRegistryPortCode(getRegistryPortCode());
		historyRmdcShipImpl.setGt(getGt());
		historyRmdcShipImpl.setNrt(getNrt());
		historyRmdcShipImpl.setDwt(getDwt());
		historyRmdcShipImpl.setLength(getLength());
		historyRmdcShipImpl.setWidth(getWidth());
		historyRmdcShipImpl.setHeight(getHeight());
		historyRmdcShipImpl.setSailingSpeed(getSailingSpeed());
		historyRmdcShipImpl.setColor(getColor());
		historyRmdcShipImpl.setBoneCode(getBoneCode());
		historyRmdcShipImpl.setMachineCode(getMachineCode());
		historyRmdcShipImpl.setShipAgencyId(getShipAgencyId());
		historyRmdcShipImpl.setShipAgencyCode(getShipAgencyCode());
		historyRmdcShipImpl.setFishingBoatRegistration(getFishingBoatRegistration());
		historyRmdcShipImpl.setRoleShip(getRoleShip());
		historyRmdcShipImpl.setIsDelete(getIsDelete());
		historyRmdcShipImpl.setMarkedAsDelete(getMarkedAsDelete());
		historyRmdcShipImpl.setModifiedDate(getModifiedDate());
		historyRmdcShipImpl.setRequestedDate(getRequestedDate());
		historyRmdcShipImpl.setSyncVersion(getSyncVersion());

		historyRmdcShipImpl.resetOriginalValues();

		return historyRmdcShipImpl;
	}

	public int compareTo(HistoryRmdcShip historyRmdcShip) {
		int value = 0;

		if (getId() < historyRmdcShip.getId()) {
			value = -1;
		}
		else if (getId() > historyRmdcShip.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		HistoryRmdcShip historyRmdcShip = null;

		try {
			historyRmdcShip = (HistoryRmdcShip)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = historyRmdcShip.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		HistoryRmdcShipModelImpl historyRmdcShipModelImpl = this;

		historyRmdcShipModelImpl._originalShipTypeCode = historyRmdcShipModelImpl._shipTypeCode;

		historyRmdcShipModelImpl._originalSyncVersion = historyRmdcShipModelImpl._syncVersion;

		historyRmdcShipModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<HistoryRmdcShip> toCacheModel() {
		HistoryRmdcShipCacheModel historyRmdcShipCacheModel = new HistoryRmdcShipCacheModel();

		historyRmdcShipCacheModel.id = getId();

		historyRmdcShipCacheModel.shipId = getShipId();

		historyRmdcShipCacheModel.shipName = getShipName();

		String shipName = historyRmdcShipCacheModel.shipName;

		if ((shipName != null) && (shipName.length() == 0)) {
			historyRmdcShipCacheModel.shipName = null;
		}

		historyRmdcShipCacheModel.shipTypeId = getShipTypeId();

		historyRmdcShipCacheModel.shipTypeCode = getShipTypeCode();

		String shipTypeCode = historyRmdcShipCacheModel.shipTypeCode;

		if ((shipTypeCode != null) && (shipTypeCode.length() == 0)) {
			historyRmdcShipCacheModel.shipTypeCode = null;
		}

		historyRmdcShipCacheModel.imo = getImo();

		String imo = historyRmdcShipCacheModel.imo;

		if ((imo != null) && (imo.length() == 0)) {
			historyRmdcShipCacheModel.imo = null;
		}

		historyRmdcShipCacheModel.callSign = getCallSign();

		String callSign = historyRmdcShipCacheModel.callSign;

		if ((callSign != null) && (callSign.length() == 0)) {
			historyRmdcShipCacheModel.callSign = null;
		}

		historyRmdcShipCacheModel.stateId = getStateId();

		String stateId = historyRmdcShipCacheModel.stateId;

		if ((stateId != null) && (stateId.length() == 0)) {
			historyRmdcShipCacheModel.stateId = null;
		}

		historyRmdcShipCacheModel.stateCode = getStateCode();

		String stateCode = historyRmdcShipCacheModel.stateCode;

		if ((stateCode != null) && (stateCode.length() == 0)) {
			historyRmdcShipCacheModel.stateCode = null;
		}

		historyRmdcShipCacheModel.registryNumber = getRegistryNumber();

		String registryNumber = historyRmdcShipCacheModel.registryNumber;

		if ((registryNumber != null) && (registryNumber.length() == 0)) {
			historyRmdcShipCacheModel.registryNumber = null;
		}

		Date registryDate = getRegistryDate();

		if (registryDate != null) {
			historyRmdcShipCacheModel.registryDate = registryDate.getTime();
		}
		else {
			historyRmdcShipCacheModel.registryDate = Long.MIN_VALUE;
		}

		historyRmdcShipCacheModel.registryPortId = getRegistryPortId();

		historyRmdcShipCacheModel.registryPortCode = getRegistryPortCode();

		String registryPortCode = historyRmdcShipCacheModel.registryPortCode;

		if ((registryPortCode != null) && (registryPortCode.length() == 0)) {
			historyRmdcShipCacheModel.registryPortCode = null;
		}

		historyRmdcShipCacheModel.gt = getGt();

		historyRmdcShipCacheModel.nrt = getNrt();

		historyRmdcShipCacheModel.dwt = getDwt();

		historyRmdcShipCacheModel.length = getLength();

		historyRmdcShipCacheModel.width = getWidth();

		historyRmdcShipCacheModel.height = getHeight();

		historyRmdcShipCacheModel.sailingSpeed = getSailingSpeed();

		historyRmdcShipCacheModel.color = getColor();

		String color = historyRmdcShipCacheModel.color;

		if ((color != null) && (color.length() == 0)) {
			historyRmdcShipCacheModel.color = null;
		}

		historyRmdcShipCacheModel.boneCode = getBoneCode();

		String boneCode = historyRmdcShipCacheModel.boneCode;

		if ((boneCode != null) && (boneCode.length() == 0)) {
			historyRmdcShipCacheModel.boneCode = null;
		}

		historyRmdcShipCacheModel.machineCode = getMachineCode();

		String machineCode = historyRmdcShipCacheModel.machineCode;

		if ((machineCode != null) && (machineCode.length() == 0)) {
			historyRmdcShipCacheModel.machineCode = null;
		}

		historyRmdcShipCacheModel.shipAgencyId = getShipAgencyId();

		historyRmdcShipCacheModel.shipAgencyCode = getShipAgencyCode();

		String shipAgencyCode = historyRmdcShipCacheModel.shipAgencyCode;

		if ((shipAgencyCode != null) && (shipAgencyCode.length() == 0)) {
			historyRmdcShipCacheModel.shipAgencyCode = null;
		}

		historyRmdcShipCacheModel.fishingBoatRegistration = getFishingBoatRegistration();

		String fishingBoatRegistration = historyRmdcShipCacheModel.fishingBoatRegistration;

		if ((fishingBoatRegistration != null) &&
				(fishingBoatRegistration.length() == 0)) {
			historyRmdcShipCacheModel.fishingBoatRegistration = null;
		}

		historyRmdcShipCacheModel.roleShip = getRoleShip();

		historyRmdcShipCacheModel.isDelete = getIsDelete();

		historyRmdcShipCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			historyRmdcShipCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			historyRmdcShipCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			historyRmdcShipCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			historyRmdcShipCacheModel.requestedDate = Long.MIN_VALUE;
		}

		historyRmdcShipCacheModel.syncVersion = getSyncVersion();

		String syncVersion = historyRmdcShipCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			historyRmdcShipCacheModel.syncVersion = null;
		}

		return historyRmdcShipCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(65);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", shipId=");
		sb.append(getShipId());
		sb.append(", shipName=");
		sb.append(getShipName());
		sb.append(", shipTypeId=");
		sb.append(getShipTypeId());
		sb.append(", shipTypeCode=");
		sb.append(getShipTypeCode());
		sb.append(", imo=");
		sb.append(getImo());
		sb.append(", callSign=");
		sb.append(getCallSign());
		sb.append(", stateId=");
		sb.append(getStateId());
		sb.append(", stateCode=");
		sb.append(getStateCode());
		sb.append(", registryNumber=");
		sb.append(getRegistryNumber());
		sb.append(", registryDate=");
		sb.append(getRegistryDate());
		sb.append(", registryPortId=");
		sb.append(getRegistryPortId());
		sb.append(", registryPortCode=");
		sb.append(getRegistryPortCode());
		sb.append(", gt=");
		sb.append(getGt());
		sb.append(", nrt=");
		sb.append(getNrt());
		sb.append(", dwt=");
		sb.append(getDwt());
		sb.append(", length=");
		sb.append(getLength());
		sb.append(", width=");
		sb.append(getWidth());
		sb.append(", height=");
		sb.append(getHeight());
		sb.append(", sailingSpeed=");
		sb.append(getSailingSpeed());
		sb.append(", color=");
		sb.append(getColor());
		sb.append(", boneCode=");
		sb.append(getBoneCode());
		sb.append(", machineCode=");
		sb.append(getMachineCode());
		sb.append(", shipAgencyId=");
		sb.append(getShipAgencyId());
		sb.append(", shipAgencyCode=");
		sb.append(getShipAgencyCode());
		sb.append(", fishingBoatRegistration=");
		sb.append(getFishingBoatRegistration());
		sb.append(", roleShip=");
		sb.append(getRoleShip());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(100);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.danhmuc.model.HistoryRmdcShip");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipId</column-name><column-value><![CDATA[");
		sb.append(getShipId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipName</column-name><column-value><![CDATA[");
		sb.append(getShipName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipTypeId</column-name><column-value><![CDATA[");
		sb.append(getShipTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipTypeCode</column-name><column-value><![CDATA[");
		sb.append(getShipTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imo</column-name><column-value><![CDATA[");
		sb.append(getImo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callSign</column-name><column-value><![CDATA[");
		sb.append(getCallSign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateId</column-name><column-value><![CDATA[");
		sb.append(getStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateCode</column-name><column-value><![CDATA[");
		sb.append(getStateCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registryNumber</column-name><column-value><![CDATA[");
		sb.append(getRegistryNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registryDate</column-name><column-value><![CDATA[");
		sb.append(getRegistryDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registryPortId</column-name><column-value><![CDATA[");
		sb.append(getRegistryPortId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registryPortCode</column-name><column-value><![CDATA[");
		sb.append(getRegistryPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gt</column-name><column-value><![CDATA[");
		sb.append(getGt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nrt</column-name><column-value><![CDATA[");
		sb.append(getNrt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dwt</column-name><column-value><![CDATA[");
		sb.append(getDwt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>length</column-name><column-value><![CDATA[");
		sb.append(getLength());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>width</column-name><column-value><![CDATA[");
		sb.append(getWidth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>height</column-name><column-value><![CDATA[");
		sb.append(getHeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sailingSpeed</column-name><column-value><![CDATA[");
		sb.append(getSailingSpeed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>color</column-name><column-value><![CDATA[");
		sb.append(getColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>boneCode</column-name><column-value><![CDATA[");
		sb.append(getBoneCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>machineCode</column-name><column-value><![CDATA[");
		sb.append(getMachineCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyId</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyCode</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fishingBoatRegistration</column-name><column-value><![CDATA[");
		sb.append(getFishingBoatRegistration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleShip</column-name><column-value><![CDATA[");
		sb.append(getRoleShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = HistoryRmdcShip.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			HistoryRmdcShip.class
		};
	private long _id;
	private int _shipId;
	private String _shipName;
	private int _shipTypeId;
	private String _shipTypeCode;
	private String _originalShipTypeCode;
	private String _imo;
	private String _callSign;
	private String _stateId;
	private String _stateCode;
	private String _registryNumber;
	private Date _registryDate;
	private int _registryPortId;
	private String _registryPortCode;
	private double _gt;
	private double _nrt;
	private double _dwt;
	private double _length;
	private double _width;
	private double _height;
	private double _sailingSpeed;
	private String _color;
	private String _boneCode;
	private String _machineCode;
	private int _shipAgencyId;
	private String _shipAgencyCode;
	private String _fishingBoatRegistration;
	private int _roleShip;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private String _originalSyncVersion;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private HistoryRmdcShip _escapedModelProxy;
}