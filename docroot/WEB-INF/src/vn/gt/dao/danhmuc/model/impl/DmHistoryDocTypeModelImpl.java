/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.danhmuc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import vn.gt.dao.danhmuc.model.DmHistoryDocType;
import vn.gt.dao.danhmuc.model.DmHistoryDocTypeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the DmHistoryDocType service. Represents a row in the &quot;DM_HISTORY_DOC_TYPE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.danhmuc.model.DmHistoryDocTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmHistoryDocTypeImpl}.
 * </p>
 *
 * @author win_64
 * @see DmHistoryDocTypeImpl
 * @see vn.gt.dao.danhmuc.model.DmHistoryDocType
 * @see vn.gt.dao.danhmuc.model.DmHistoryDocTypeModel
 * @generated
 */
public class DmHistoryDocTypeModelImpl extends BaseModelImpl<DmHistoryDocType>
	implements DmHistoryDocTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm history doc type model instance should use the {@link vn.gt.dao.danhmuc.model.DmHistoryDocType} interface instead.
	 */
	public static final String TABLE_NAME = "DM_HISTORY_DOC_TYPE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.INTEGER },
			{ "DocumentTypeCode", Types.VARCHAR },
			{ "DocumentType", Types.VARCHAR },
			{ "DocumentTypeName", Types.VARCHAR },
			{ "IsDelete", Types.INTEGER },
			{ "MarkedAsDelete", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "SyncVersion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_HISTORY_DOC_TYPE (id INTEGER not null primary key,DocumentTypeCode VARCHAR(75) null,DocumentType VARCHAR(75) null,DocumentTypeName VARCHAR(75) null,IsDelete INTEGER,MarkedAsDelete INTEGER,ModifiedDate DATE null,RequestedDate DATE null,SyncVersion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_HISTORY_DOC_TYPE";
	public static final String ORDER_BY_JPQL = " ORDER BY dmHistoryDocType.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_HISTORY_DOC_TYPE.id ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.danhmuc.model.DmHistoryDocType"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.danhmuc.model.DmHistoryDocType"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.danhmuc.model.DmHistoryDocType"),
			true);
	public static long DOCUMENTTYPE_COLUMN_BITMASK = 1L;
	public static long SYNCVERSION_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.danhmuc.model.DmHistoryDocType"));

	public DmHistoryDocTypeModelImpl() {
	}

	public int getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return DmHistoryDocType.class;
	}

	public String getModelClassName() {
		return DmHistoryDocType.class.getName();
	}

	public int getId() {
		return _id;
	}

	public void setId(int id) {
		_columnBitmask = -1L;

		_id = id;
	}

	public String getDocumentTypeCode() {
		if (_documentTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _documentTypeCode;
		}
	}

	public void setDocumentTypeCode(String documentTypeCode) {
		_documentTypeCode = documentTypeCode;
	}

	public String getDocumentType() {
		if (_documentType == null) {
			return StringPool.BLANK;
		}
		else {
			return _documentType;
		}
	}

	public void setDocumentType(String documentType) {
		_columnBitmask |= DOCUMENTTYPE_COLUMN_BITMASK;

		if (_originalDocumentType == null) {
			_originalDocumentType = _documentType;
		}

		_documentType = documentType;
	}

	public String getOriginalDocumentType() {
		return GetterUtil.getString(_originalDocumentType);
	}

	public String getDocumentTypeName() {
		if (_documentTypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _documentTypeName;
		}
	}

	public void setDocumentTypeName(String documentTypeName) {
		_documentTypeName = documentTypeName;
	}

	public int getIsDelete() {
		return _isDelete;
	}

	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public Date getRequestedDate() {
		return _requestedDate;
	}

	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	public void setSyncVersion(String syncVersion) {
		_columnBitmask |= SYNCVERSION_COLUMN_BITMASK;

		if (_originalSyncVersion == null) {
			_originalSyncVersion = _syncVersion;
		}

		_syncVersion = syncVersion;
	}

	public String getOriginalSyncVersion() {
		return GetterUtil.getString(_originalSyncVersion);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DmHistoryDocType toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (DmHistoryDocType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		DmHistoryDocTypeImpl dmHistoryDocTypeImpl = new DmHistoryDocTypeImpl();

		dmHistoryDocTypeImpl.setId(getId());
		dmHistoryDocTypeImpl.setDocumentTypeCode(getDocumentTypeCode());
		dmHistoryDocTypeImpl.setDocumentType(getDocumentType());
		dmHistoryDocTypeImpl.setDocumentTypeName(getDocumentTypeName());
		dmHistoryDocTypeImpl.setIsDelete(getIsDelete());
		dmHistoryDocTypeImpl.setMarkedAsDelete(getMarkedAsDelete());
		dmHistoryDocTypeImpl.setModifiedDate(getModifiedDate());
		dmHistoryDocTypeImpl.setRequestedDate(getRequestedDate());
		dmHistoryDocTypeImpl.setSyncVersion(getSyncVersion());

		dmHistoryDocTypeImpl.resetOriginalValues();

		return dmHistoryDocTypeImpl;
	}

	public int compareTo(DmHistoryDocType dmHistoryDocType) {
		int value = 0;

		if (getId() < dmHistoryDocType.getId()) {
			value = -1;
		}
		else if (getId() > dmHistoryDocType.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		DmHistoryDocType dmHistoryDocType = null;

		try {
			dmHistoryDocType = (DmHistoryDocType)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = dmHistoryDocType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DmHistoryDocTypeModelImpl dmHistoryDocTypeModelImpl = this;

		dmHistoryDocTypeModelImpl._originalDocumentType = dmHistoryDocTypeModelImpl._documentType;

		dmHistoryDocTypeModelImpl._originalSyncVersion = dmHistoryDocTypeModelImpl._syncVersion;

		dmHistoryDocTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DmHistoryDocType> toCacheModel() {
		DmHistoryDocTypeCacheModel dmHistoryDocTypeCacheModel = new DmHistoryDocTypeCacheModel();

		dmHistoryDocTypeCacheModel.id = getId();

		dmHistoryDocTypeCacheModel.documentTypeCode = getDocumentTypeCode();

		String documentTypeCode = dmHistoryDocTypeCacheModel.documentTypeCode;

		if ((documentTypeCode != null) && (documentTypeCode.length() == 0)) {
			dmHistoryDocTypeCacheModel.documentTypeCode = null;
		}

		dmHistoryDocTypeCacheModel.documentType = getDocumentType();

		String documentType = dmHistoryDocTypeCacheModel.documentType;

		if ((documentType != null) && (documentType.length() == 0)) {
			dmHistoryDocTypeCacheModel.documentType = null;
		}

		dmHistoryDocTypeCacheModel.documentTypeName = getDocumentTypeName();

		String documentTypeName = dmHistoryDocTypeCacheModel.documentTypeName;

		if ((documentTypeName != null) && (documentTypeName.length() == 0)) {
			dmHistoryDocTypeCacheModel.documentTypeName = null;
		}

		dmHistoryDocTypeCacheModel.isDelete = getIsDelete();

		dmHistoryDocTypeCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmHistoryDocTypeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmHistoryDocTypeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			dmHistoryDocTypeCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			dmHistoryDocTypeCacheModel.requestedDate = Long.MIN_VALUE;
		}

		dmHistoryDocTypeCacheModel.syncVersion = getSyncVersion();

		String syncVersion = dmHistoryDocTypeCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			dmHistoryDocTypeCacheModel.syncVersion = null;
		}

		return dmHistoryDocTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", documentTypeCode=");
		sb.append(getDocumentTypeCode());
		sb.append(", documentType=");
		sb.append(getDocumentType());
		sb.append(", documentTypeName=");
		sb.append(getDocumentTypeName());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.danhmuc.model.DmHistoryDocType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentTypeCode</column-name><column-value><![CDATA[");
		sb.append(getDocumentTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentType</column-name><column-value><![CDATA[");
		sb.append(getDocumentType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentTypeName</column-name><column-value><![CDATA[");
		sb.append(getDocumentTypeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmHistoryDocType.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			DmHistoryDocType.class
		};
	private int _id;
	private String _documentTypeCode;
	private String _documentType;
	private String _originalDocumentType;
	private String _documentTypeName;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private String _originalSyncVersion;
	private long _columnBitmask;
	private DmHistoryDocType _escapedModelProxy;
}