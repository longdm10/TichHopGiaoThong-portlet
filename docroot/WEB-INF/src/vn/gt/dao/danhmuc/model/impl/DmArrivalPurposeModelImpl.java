/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.danhmuc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import vn.gt.dao.danhmuc.model.DmArrivalPurpose;
import vn.gt.dao.danhmuc.model.DmArrivalPurposeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the DmArrivalPurpose service. Represents a row in the &quot;DM_ARRIVAL_PURPOSE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.danhmuc.model.DmArrivalPurposeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmArrivalPurposeImpl}.
 * </p>
 *
 * @author win_64
 * @see DmArrivalPurposeImpl
 * @see vn.gt.dao.danhmuc.model.DmArrivalPurpose
 * @see vn.gt.dao.danhmuc.model.DmArrivalPurposeModel
 * @generated
 */
public class DmArrivalPurposeModelImpl extends BaseModelImpl<DmArrivalPurpose>
	implements DmArrivalPurposeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm arrival purpose model instance should use the {@link vn.gt.dao.danhmuc.model.DmArrivalPurpose} interface instead.
	 */
	public static final String TABLE_NAME = "DM_ARRIVAL_PURPOSE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.INTEGER },
			{ "PurposeCode", Types.VARCHAR },
			{ "PurposeName", Types.VARCHAR },
			{ "PurposeNameVN", Types.VARCHAR },
			{ "IsDelete", Types.INTEGER },
			{ "MarkedAsDelete", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "SyncVersion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_ARRIVAL_PURPOSE (id INTEGER not null primary key,PurposeCode VARCHAR(75) null,PurposeName VARCHAR(75) null,PurposeNameVN VARCHAR(75) null,IsDelete INTEGER,MarkedAsDelete INTEGER,ModifiedDate DATE null,RequestedDate DATE null,SyncVersion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_ARRIVAL_PURPOSE";
	public static final String ORDER_BY_JPQL = " ORDER BY dmArrivalPurpose.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_ARRIVAL_PURPOSE.id ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.danhmuc.model.DmArrivalPurpose"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.danhmuc.model.DmArrivalPurpose"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.danhmuc.model.DmArrivalPurpose"),
			true);
	public static long PURPOSECODE_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.danhmuc.model.DmArrivalPurpose"));

	public DmArrivalPurposeModelImpl() {
	}

	public int getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return DmArrivalPurpose.class;
	}

	public String getModelClassName() {
		return DmArrivalPurpose.class.getName();
	}

	public int getId() {
		return _id;
	}

	public void setId(int id) {
		_columnBitmask = -1L;

		_id = id;
	}

	public String getPurposeCode() {
		if (_purposeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _purposeCode;
		}
	}

	public void setPurposeCode(String purposeCode) {
		_columnBitmask |= PURPOSECODE_COLUMN_BITMASK;

		if (_originalPurposeCode == null) {
			_originalPurposeCode = _purposeCode;
		}

		_purposeCode = purposeCode;
	}

	public String getOriginalPurposeCode() {
		return GetterUtil.getString(_originalPurposeCode);
	}

	public String getPurposeName() {
		if (_purposeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _purposeName;
		}
	}

	public void setPurposeName(String purposeName) {
		_purposeName = purposeName;
	}

	public String getPurposeNameVN() {
		if (_purposeNameVN == null) {
			return StringPool.BLANK;
		}
		else {
			return _purposeNameVN;
		}
	}

	public void setPurposeNameVN(String purposeNameVN) {
		_purposeNameVN = purposeNameVN;
	}

	public int getIsDelete() {
		return _isDelete;
	}

	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public Date getRequestedDate() {
		return _requestedDate;
	}

	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	public void setSyncVersion(String syncVersion) {
		_syncVersion = syncVersion;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DmArrivalPurpose toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (DmArrivalPurpose)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		DmArrivalPurposeImpl dmArrivalPurposeImpl = new DmArrivalPurposeImpl();

		dmArrivalPurposeImpl.setId(getId());
		dmArrivalPurposeImpl.setPurposeCode(getPurposeCode());
		dmArrivalPurposeImpl.setPurposeName(getPurposeName());
		dmArrivalPurposeImpl.setPurposeNameVN(getPurposeNameVN());
		dmArrivalPurposeImpl.setIsDelete(getIsDelete());
		dmArrivalPurposeImpl.setMarkedAsDelete(getMarkedAsDelete());
		dmArrivalPurposeImpl.setModifiedDate(getModifiedDate());
		dmArrivalPurposeImpl.setRequestedDate(getRequestedDate());
		dmArrivalPurposeImpl.setSyncVersion(getSyncVersion());

		dmArrivalPurposeImpl.resetOriginalValues();

		return dmArrivalPurposeImpl;
	}

	public int compareTo(DmArrivalPurpose dmArrivalPurpose) {
		int value = 0;

		if (getId() < dmArrivalPurpose.getId()) {
			value = -1;
		}
		else if (getId() > dmArrivalPurpose.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		DmArrivalPurpose dmArrivalPurpose = null;

		try {
			dmArrivalPurpose = (DmArrivalPurpose)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = dmArrivalPurpose.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DmArrivalPurposeModelImpl dmArrivalPurposeModelImpl = this;

		dmArrivalPurposeModelImpl._originalPurposeCode = dmArrivalPurposeModelImpl._purposeCode;

		dmArrivalPurposeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DmArrivalPurpose> toCacheModel() {
		DmArrivalPurposeCacheModel dmArrivalPurposeCacheModel = new DmArrivalPurposeCacheModel();

		dmArrivalPurposeCacheModel.id = getId();

		dmArrivalPurposeCacheModel.purposeCode = getPurposeCode();

		String purposeCode = dmArrivalPurposeCacheModel.purposeCode;

		if ((purposeCode != null) && (purposeCode.length() == 0)) {
			dmArrivalPurposeCacheModel.purposeCode = null;
		}

		dmArrivalPurposeCacheModel.purposeName = getPurposeName();

		String purposeName = dmArrivalPurposeCacheModel.purposeName;

		if ((purposeName != null) && (purposeName.length() == 0)) {
			dmArrivalPurposeCacheModel.purposeName = null;
		}

		dmArrivalPurposeCacheModel.purposeNameVN = getPurposeNameVN();

		String purposeNameVN = dmArrivalPurposeCacheModel.purposeNameVN;

		if ((purposeNameVN != null) && (purposeNameVN.length() == 0)) {
			dmArrivalPurposeCacheModel.purposeNameVN = null;
		}

		dmArrivalPurposeCacheModel.isDelete = getIsDelete();

		dmArrivalPurposeCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmArrivalPurposeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmArrivalPurposeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			dmArrivalPurposeCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			dmArrivalPurposeCacheModel.requestedDate = Long.MIN_VALUE;
		}

		dmArrivalPurposeCacheModel.syncVersion = getSyncVersion();

		String syncVersion = dmArrivalPurposeCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			dmArrivalPurposeCacheModel.syncVersion = null;
		}

		return dmArrivalPurposeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", purposeCode=");
		sb.append(getPurposeCode());
		sb.append(", purposeName=");
		sb.append(getPurposeName());
		sb.append(", purposeNameVN=");
		sb.append(getPurposeNameVN());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.danhmuc.model.DmArrivalPurpose");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purposeCode</column-name><column-value><![CDATA[");
		sb.append(getPurposeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purposeName</column-name><column-value><![CDATA[");
		sb.append(getPurposeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purposeNameVN</column-name><column-value><![CDATA[");
		sb.append(getPurposeNameVN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmArrivalPurpose.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			DmArrivalPurpose.class
		};
	private int _id;
	private String _purposeCode;
	private String _originalPurposeCode;
	private String _purposeName;
	private String _purposeNameVN;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private long _columnBitmask;
	private DmArrivalPurpose _escapedModelProxy;
}