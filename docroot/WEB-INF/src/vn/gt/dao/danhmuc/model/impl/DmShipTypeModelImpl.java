/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.danhmuc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import vn.gt.dao.danhmuc.model.DmShipType;
import vn.gt.dao.danhmuc.model.DmShipTypeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the DmShipType service. Represents a row in the &quot;DM_SHIP_TYPE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.danhmuc.model.DmShipTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmShipTypeImpl}.
 * </p>
 *
 * @author win_64
 * @see DmShipTypeImpl
 * @see vn.gt.dao.danhmuc.model.DmShipType
 * @see vn.gt.dao.danhmuc.model.DmShipTypeModel
 * @generated
 */
public class DmShipTypeModelImpl extends BaseModelImpl<DmShipType>
	implements DmShipTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm ship type model instance should use the {@link vn.gt.dao.danhmuc.model.DmShipType} interface instead.
	 */
	public static final String TABLE_NAME = "DM_SHIP_TYPE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.INTEGER },
			{ "ShipTypeCode", Types.VARCHAR },
			{ "ShipTypeName", Types.VARCHAR },
			{ "ShipTypeNameVN", Types.VARCHAR },
			{ "ShipTypeOrder", Types.INTEGER },
			{ "IsDelete", Types.INTEGER },
			{ "MarkedAsDelete", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "SyncVersion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_SHIP_TYPE (id INTEGER not null primary key,ShipTypeCode VARCHAR(75) null,ShipTypeName VARCHAR(75) null,ShipTypeNameVN VARCHAR(75) null,ShipTypeOrder INTEGER,IsDelete INTEGER,MarkedAsDelete INTEGER,ModifiedDate DATE null,RequestedDate DATE null,SyncVersion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_SHIP_TYPE";
	public static final String ORDER_BY_JPQL = " ORDER BY dmShipType.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_SHIP_TYPE.id ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.danhmuc.model.DmShipType"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.danhmuc.model.DmShipType"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.danhmuc.model.DmShipType"),
			true);
	public static long SHIPTYPECODE_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.danhmuc.model.DmShipType"));

	public DmShipTypeModelImpl() {
	}

	public int getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return DmShipType.class;
	}

	public String getModelClassName() {
		return DmShipType.class.getName();
	}

	public int getId() {
		return _id;
	}

	public void setId(int id) {
		_columnBitmask = -1L;

		_id = id;
	}

	public String getShipTypeCode() {
		if (_shipTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipTypeCode;
		}
	}

	public void setShipTypeCode(String shipTypeCode) {
		_columnBitmask |= SHIPTYPECODE_COLUMN_BITMASK;

		if (_originalShipTypeCode == null) {
			_originalShipTypeCode = _shipTypeCode;
		}

		_shipTypeCode = shipTypeCode;
	}

	public String getOriginalShipTypeCode() {
		return GetterUtil.getString(_originalShipTypeCode);
	}

	public String getShipTypeName() {
		if (_shipTypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipTypeName;
		}
	}

	public void setShipTypeName(String shipTypeName) {
		_shipTypeName = shipTypeName;
	}

	public String getShipTypeNameVN() {
		if (_shipTypeNameVN == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipTypeNameVN;
		}
	}

	public void setShipTypeNameVN(String shipTypeNameVN) {
		_shipTypeNameVN = shipTypeNameVN;
	}

	public int getShipTypeOrder() {
		return _shipTypeOrder;
	}

	public void setShipTypeOrder(int shipTypeOrder) {
		_shipTypeOrder = shipTypeOrder;
	}

	public int getIsDelete() {
		return _isDelete;
	}

	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public Date getRequestedDate() {
		return _requestedDate;
	}

	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	public void setSyncVersion(String syncVersion) {
		_syncVersion = syncVersion;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DmShipType toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (DmShipType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		DmShipTypeImpl dmShipTypeImpl = new DmShipTypeImpl();

		dmShipTypeImpl.setId(getId());
		dmShipTypeImpl.setShipTypeCode(getShipTypeCode());
		dmShipTypeImpl.setShipTypeName(getShipTypeName());
		dmShipTypeImpl.setShipTypeNameVN(getShipTypeNameVN());
		dmShipTypeImpl.setShipTypeOrder(getShipTypeOrder());
		dmShipTypeImpl.setIsDelete(getIsDelete());
		dmShipTypeImpl.setMarkedAsDelete(getMarkedAsDelete());
		dmShipTypeImpl.setModifiedDate(getModifiedDate());
		dmShipTypeImpl.setRequestedDate(getRequestedDate());
		dmShipTypeImpl.setSyncVersion(getSyncVersion());

		dmShipTypeImpl.resetOriginalValues();

		return dmShipTypeImpl;
	}

	public int compareTo(DmShipType dmShipType) {
		int value = 0;

		if (getId() < dmShipType.getId()) {
			value = -1;
		}
		else if (getId() > dmShipType.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		DmShipType dmShipType = null;

		try {
			dmShipType = (DmShipType)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = dmShipType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DmShipTypeModelImpl dmShipTypeModelImpl = this;

		dmShipTypeModelImpl._originalShipTypeCode = dmShipTypeModelImpl._shipTypeCode;

		dmShipTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DmShipType> toCacheModel() {
		DmShipTypeCacheModel dmShipTypeCacheModel = new DmShipTypeCacheModel();

		dmShipTypeCacheModel.id = getId();

		dmShipTypeCacheModel.shipTypeCode = getShipTypeCode();

		String shipTypeCode = dmShipTypeCacheModel.shipTypeCode;

		if ((shipTypeCode != null) && (shipTypeCode.length() == 0)) {
			dmShipTypeCacheModel.shipTypeCode = null;
		}

		dmShipTypeCacheModel.shipTypeName = getShipTypeName();

		String shipTypeName = dmShipTypeCacheModel.shipTypeName;

		if ((shipTypeName != null) && (shipTypeName.length() == 0)) {
			dmShipTypeCacheModel.shipTypeName = null;
		}

		dmShipTypeCacheModel.shipTypeNameVN = getShipTypeNameVN();

		String shipTypeNameVN = dmShipTypeCacheModel.shipTypeNameVN;

		if ((shipTypeNameVN != null) && (shipTypeNameVN.length() == 0)) {
			dmShipTypeCacheModel.shipTypeNameVN = null;
		}

		dmShipTypeCacheModel.shipTypeOrder = getShipTypeOrder();

		dmShipTypeCacheModel.isDelete = getIsDelete();

		dmShipTypeCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmShipTypeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmShipTypeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			dmShipTypeCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			dmShipTypeCacheModel.requestedDate = Long.MIN_VALUE;
		}

		dmShipTypeCacheModel.syncVersion = getSyncVersion();

		String syncVersion = dmShipTypeCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			dmShipTypeCacheModel.syncVersion = null;
		}

		return dmShipTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", shipTypeCode=");
		sb.append(getShipTypeCode());
		sb.append(", shipTypeName=");
		sb.append(getShipTypeName());
		sb.append(", shipTypeNameVN=");
		sb.append(getShipTypeNameVN());
		sb.append(", shipTypeOrder=");
		sb.append(getShipTypeOrder());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.danhmuc.model.DmShipType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipTypeCode</column-name><column-value><![CDATA[");
		sb.append(getShipTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipTypeName</column-name><column-value><![CDATA[");
		sb.append(getShipTypeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipTypeNameVN</column-name><column-value><![CDATA[");
		sb.append(getShipTypeNameVN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipTypeOrder</column-name><column-value><![CDATA[");
		sb.append(getShipTypeOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmShipType.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			DmShipType.class
		};
	private int _id;
	private String _shipTypeCode;
	private String _originalShipTypeCode;
	private String _shipTypeName;
	private String _shipTypeNameVN;
	private int _shipTypeOrder;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private long _columnBitmask;
	private DmShipType _escapedModelProxy;
}