/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.danhmuc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.danhmuc.model.DmSyncCategory;
import vn.gt.dao.danhmuc.model.DmSyncCategoryModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the DmSyncCategory service. Represents a row in the &quot;dm_sync_category&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.danhmuc.model.DmSyncCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmSyncCategoryImpl}.
 * </p>
 *
 * @author win_64
 * @see DmSyncCategoryImpl
 * @see vn.gt.dao.danhmuc.model.DmSyncCategory
 * @see vn.gt.dao.danhmuc.model.DmSyncCategoryModel
 * @generated
 */
public class DmSyncCategoryModelImpl extends BaseModelImpl<DmSyncCategory>
	implements DmSyncCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm sync category model instance should use the {@link vn.gt.dao.danhmuc.model.DmSyncCategory} interface instead.
	 */
	public static final String TABLE_NAME = "dm_sync_category";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "CategoryID", Types.VARCHAR },
			{ "categorydescription", Types.VARCHAR },
			{ "modifieduser", Types.VARCHAR },
			{ "modifieddate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table dm_sync_category (id LONG not null primary key,CategoryID VARCHAR(75) null,categorydescription VARCHAR(75) null,modifieduser VARCHAR(75) null,modifieddate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table dm_sync_category";
	public static final String ORDER_BY_JPQL = " ORDER BY dmSyncCategory.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY dm_sync_category.id ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.danhmuc.model.DmSyncCategory"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.danhmuc.model.DmSyncCategory"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.danhmuc.model.DmSyncCategory"));

	public DmSyncCategoryModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return DmSyncCategory.class;
	}

	public String getModelClassName() {
		return DmSyncCategory.class.getName();
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public String getCategoryId() {
		if (_categoryId == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryId;
		}
	}

	public void setCategoryId(String categoryId) {
		_categoryId = categoryId;
	}

	public String getCategoryDescription() {
		if (_categoryDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryDescription;
		}
	}

	public void setCategoryDescription(String categoryDescription) {
		_categoryDescription = categoryDescription;
	}

	public String getModifiedUser() {
		if (_modifiedUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedUser;
		}
	}

	public void setModifiedUser(String modifiedUser) {
		_modifiedUser = modifiedUser;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public DmSyncCategory toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (DmSyncCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					DmSyncCategory.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		DmSyncCategoryImpl dmSyncCategoryImpl = new DmSyncCategoryImpl();

		dmSyncCategoryImpl.setId(getId());
		dmSyncCategoryImpl.setCategoryId(getCategoryId());
		dmSyncCategoryImpl.setCategoryDescription(getCategoryDescription());
		dmSyncCategoryImpl.setModifiedUser(getModifiedUser());
		dmSyncCategoryImpl.setModifiedDate(getModifiedDate());

		dmSyncCategoryImpl.resetOriginalValues();

		return dmSyncCategoryImpl;
	}

	public int compareTo(DmSyncCategory dmSyncCategory) {
		int value = 0;

		if (getId() < dmSyncCategory.getId()) {
			value = -1;
		}
		else if (getId() > dmSyncCategory.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		DmSyncCategory dmSyncCategory = null;

		try {
			dmSyncCategory = (DmSyncCategory)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = dmSyncCategory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DmSyncCategory> toCacheModel() {
		DmSyncCategoryCacheModel dmSyncCategoryCacheModel = new DmSyncCategoryCacheModel();

		dmSyncCategoryCacheModel.id = getId();

		dmSyncCategoryCacheModel.categoryId = getCategoryId();

		String categoryId = dmSyncCategoryCacheModel.categoryId;

		if ((categoryId != null) && (categoryId.length() == 0)) {
			dmSyncCategoryCacheModel.categoryId = null;
		}

		dmSyncCategoryCacheModel.categoryDescription = getCategoryDescription();

		String categoryDescription = dmSyncCategoryCacheModel.categoryDescription;

		if ((categoryDescription != null) &&
				(categoryDescription.length() == 0)) {
			dmSyncCategoryCacheModel.categoryDescription = null;
		}

		dmSyncCategoryCacheModel.modifiedUser = getModifiedUser();

		String modifiedUser = dmSyncCategoryCacheModel.modifiedUser;

		if ((modifiedUser != null) && (modifiedUser.length() == 0)) {
			dmSyncCategoryCacheModel.modifiedUser = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmSyncCategoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmSyncCategoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return dmSyncCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", categoryDescription=");
		sb.append(getCategoryDescription());
		sb.append(", modifiedUser=");
		sb.append(getModifiedUser());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.danhmuc.model.DmSyncCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryDescription</column-name><column-value><![CDATA[");
		sb.append(getCategoryDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedUser</column-name><column-value><![CDATA[");
		sb.append(getModifiedUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmSyncCategory.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			DmSyncCategory.class
		};
	private long _id;
	private String _categoryId;
	private String _categoryDescription;
	private String _modifiedUser;
	private Date _modifiedDate;
	private transient ExpandoBridge _expandoBridge;
	private DmSyncCategory _escapedModelProxy;
}